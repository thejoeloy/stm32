
sdio_1bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000890c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  08008adc  08008adc  00009adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800919c  0800919c  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  0800919c  0800919c  0000a19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091a4  080091a4  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091a4  080091a4  0000a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091a8  080091a8  0000a1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080091ac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000235c  20000068  08009214  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023c4  08009214  0000b3c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea1d  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e36  00000000  00000000  00019ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0001c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  0001d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250b0  00000000  00000000  0001e114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d99  00000000  00000000  000431c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf192  00000000  00000000  00056f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001260ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ddc  00000000  00000000  00126134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00129f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ac4 	.word	0x08008ac4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08008ac4 	.word	0x08008ac4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fc84 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f81e 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f8d6 	bl	80007bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000610:	f000 f8ac 	bl	800076c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000614:	f000 f88a 	bl	800072c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000618:	f004 f81a 	bl	8004650 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  sd_card_mount();
 800061c:	f000 f948 	bl	80008b0 <sd_card_mount>
  sd_card_read("test.txt");
 8000620:	4806      	ldr	r0, [pc, #24]	@ (800063c <main+0x3c>)
 8000622:	f000 f977 	bl	8000914 <sd_card_read>
  sd_card_write("write.txt", "Joke, Cunning, and Revenge");
 8000626:	4906      	ldr	r1, [pc, #24]	@ (8000640 <main+0x40>)
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <main+0x44>)
 800062a:	f000 f9c5 	bl	80009b8 <sd_card_write>
  sd_card_read("write.txt");
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <main+0x44>)
 8000630:	f000 f970 	bl	8000914 <sd_card_read>
  sd_card_unmount();
 8000634:	f000 f962 	bl	80008fc <sd_card_unmount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <main+0x38>
 800063c:	08008adc 	.word	0x08008adc
 8000640:	08008ae8 	.word	0x08008ae8
 8000644:	08008b04 	.word	0x08008b04

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2234      	movs	r2, #52	@ 0x34
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 fd5e 	bl	8008118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b2c      	ldr	r3, [pc, #176]	@ (8000724 <SystemClock_Config+0xdc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a2b      	ldr	r2, [pc, #172]	@ (8000724 <SystemClock_Config+0xdc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <SystemClock_Config+0xdc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <SystemClock_Config+0xe0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a25      	ldr	r2, [pc, #148]	@ (8000728 <SystemClock_Config+0xe0>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <SystemClock_Config+0xe0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006bc:	23b4      	movs	r3, #180	@ 0xb4
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f865 	bl	80027a0 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006dc:	f000 f8e2 	bl	80008a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e0:	f001 fa54 	bl	8001b8c <HAL_PWREx_EnableOverDrive>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ea:	f000 f8db 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000704:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2105      	movs	r1, #5
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fa8d 	bl	8001c2c <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000718:	f000 f8c4 	bl	80008a4 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	@ 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 8000732:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <MX_SDIO_SD_Init+0x3c>)
 8000734:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800074e:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8000754:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <MX_SDIO_SD_Init+0x38>)
 8000756:	220a      	movs	r2, #10
 8000758:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000084 	.word	0x20000084
 8000768:	40012c00 	.word	0x40012c00

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <MX_DMA_Init+0x4c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0f      	ldr	r2, [pc, #60]	@ (80007b8 <MX_DMA_Init+0x4c>)
 800077c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <MX_DMA_Init+0x4c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	203b      	movs	r0, #59	@ 0x3b
 8000794:	f000 fd2d 	bl	80011f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000798:	203b      	movs	r0, #59	@ 0x3b
 800079a:	f000 fd46 	bl	800122a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2045      	movs	r0, #69	@ 0x45
 80007a4:	f000 fd25 	bl	80011f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007a8:	2045      	movs	r0, #69	@ 0x45
 80007aa:	f000 fd3e 	bl	800122a <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <MX_GPIO_Init+0xa8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a22      	ldr	r2, [pc, #136]	@ (8000864 <MX_GPIO_Init+0xa8>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <MX_GPIO_Init+0xa8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <MX_GPIO_Init+0xa8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000864 <MX_GPIO_Init+0xa8>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_GPIO_Init+0xa8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_GPIO_Init+0xa8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a14      	ldr	r2, [pc, #80]	@ (8000864 <MX_GPIO_Init+0xa8>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_GPIO_Init+0xa8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_GPIO_Init+0xa8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a0d      	ldr	r2, [pc, #52]	@ (8000864 <MX_GPIO_Init+0xa8>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_GPIO_Init+0xa8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000842:	2340      	movs	r3, #64	@ 0x40
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_GPIO_Init+0xac>)
 8000856:	f000 ffed 	bl	8001834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	@ 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020800 	.word	0x40020800

0800086c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	e009      	b.n	8000892 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	60ba      	str	r2, [r7, #8]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe92 	bl	80005b0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbf1      	blt.n	800087e <_write+0x12>
  }
  return len;
 800089a:	687b      	ldr	r3, [r7, #4]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <sd_card_mount>:
static FRESULT sd_result;
static FATFS sdCard;
static FIL sdFile;

void sd_card_mount()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	sd_result = f_mount(&sdCard, SDPath, 1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	490c      	ldr	r1, [pc, #48]	@ (80008e8 <sd_card_mount+0x38>)
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <sd_card_mount+0x3c>)
 80008ba:	f006 fa33 	bl	8006d24 <f_mount>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <sd_card_mount+0x40>)
 80008c4:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <sd_card_mount+0x40>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d007      	beq.n	80008de <sd_card_mount+0x2e>
	{
		printf("error in mounting an sd card: %d \n", sd_result);
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <sd_card_mount+0x40>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	4619      	mov	r1, r3
 80008d4:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <sd_card_mount+0x44>)
 80008d6:	f007 fad7 	bl	8007e88 <iprintf>
		while(1);
 80008da:	bf00      	nop
 80008dc:	e7fd      	b.n	80008da <sd_card_mount+0x2a>
	}
	else
	{
		printf("succeded in mounting an sd card \n");
 80008de:	4806      	ldr	r0, [pc, #24]	@ (80008f8 <sd_card_mount+0x48>)
 80008e0:	f007 fb3a 	bl	8007f58 <puts>
	}
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20002240 	.word	0x20002240
 80008ec:	200001cc 	.word	0x200001cc
 80008f0:	200001c8 	.word	0x200001c8
 80008f4:	08008b10 	.word	0x08008b10
 80008f8:	08008b34 	.word	0x08008b34

080008fc <sd_card_unmount>:

void sd_card_unmount()
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 8000900:	2200      	movs	r2, #0
 8000902:	4903      	ldr	r1, [pc, #12]	@ (8000910 <sd_card_unmount+0x14>)
 8000904:	2000      	movs	r0, #0
 8000906:	f006 fa0d 	bl	8006d24 <f_mount>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	08008b58 	.word	0x08008b58

08000914 <sd_card_read>:

void sd_card_read(const char* filename)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b0a4      	sub	sp, #144	@ 0x90
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    BYTE readBuf[128]; // Adjust buffer size as needed

    // Open the file for reading
    sd_result = f_open(&sdFile, filename, FA_READ);
 800091c:	2201      	movs	r2, #1
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	481e      	ldr	r0, [pc, #120]	@ (800099c <sd_card_read+0x88>)
 8000922:	f006 fa45 	bl	8006db0 <f_open>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <sd_card_read+0x8c>)
 800092c:	701a      	strb	r2, [r3, #0]
    if (sd_result != FR_OK)
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <sd_card_read+0x8c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d007      	beq.n	8000946 <sd_card_read+0x32>
    {
        printf("Error opening file '%s' for reading: %d\n", filename, sd_result);
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <sd_card_read+0x8c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	4819      	ldr	r0, [pc, #100]	@ (80009a4 <sd_card_read+0x90>)
 8000940:	f007 faa2 	bl	8007e88 <iprintf>
 8000944:	e026      	b.n	8000994 <sd_card_read+0x80>
        return;
    }

    printf("Successfully opened file '%s' for reading\n", filename);
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	4817      	ldr	r0, [pc, #92]	@ (80009a8 <sd_card_read+0x94>)
 800094a:	f007 fa9d 	bl	8007e88 <iprintf>

    // Read data from the file
    TCHAR* rres = f_gets((TCHAR*)readBuf, sizeof(readBuf), &sdFile);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <sd_card_read+0x88>)
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	4618      	mov	r0, r3
 8000958:	f006 ff9d 	bl	8007896 <f_gets>
 800095c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    if (rres != NULL)
 8000960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000964:	2b00      	cmp	r3, #0
 8000966:	d007      	beq.n	8000978 <sd_card_read+0x64>
    {
        printf("Read from '%s': %s\n", filename, readBuf);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	461a      	mov	r2, r3
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	480e      	ldr	r0, [pc, #56]	@ (80009ac <sd_card_read+0x98>)
 8000972:	f007 fa89 	bl	8007e88 <iprintf>
 8000976:	e006      	b.n	8000986 <sd_card_read+0x72>
    }
    else
    {
        printf("Error reading from '%s': %d\n", filename, sd_result);
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <sd_card_read+0x8c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <sd_card_read+0x9c>)
 8000982:	f007 fa81 	bl	8007e88 <iprintf>
    }

    // Close the file
    f_close(&sdFile);
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <sd_card_read+0x88>)
 8000988:	f006 ff5b 	bl	8007842 <f_close>
    printf("Closed file '%s' after reading\n", filename);
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4809      	ldr	r0, [pc, #36]	@ (80009b4 <sd_card_read+0xa0>)
 8000990:	f007 fa7a 	bl	8007e88 <iprintf>
}
 8000994:	3790      	adds	r7, #144	@ 0x90
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20001204 	.word	0x20001204
 80009a0:	200001c8 	.word	0x200001c8
 80009a4:	08008b5c 	.word	0x08008b5c
 80009a8:	08008b88 	.word	0x08008b88
 80009ac:	08008bb4 	.word	0x08008bb4
 80009b0:	08008bc8 	.word	0x08008bc8
 80009b4:	08008be8 	.word	0x08008be8

080009b8 <sd_card_write>:

void sd_card_write(const char* filename, const char* data)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
    UINT bytesWritten;

    // Open the file for writing (create if not exists, overwrite if exists)
    sd_result = f_open(&sdFile, filename, FA_WRITE | FA_CREATE_ALWAYS);
 80009c2:	220a      	movs	r2, #10
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	4820      	ldr	r0, [pc, #128]	@ (8000a48 <sd_card_write+0x90>)
 80009c8:	f006 f9f2 	bl	8006db0 <f_open>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <sd_card_write+0x94>)
 80009d2:	701a      	strb	r2, [r3, #0]
    if (sd_result != FR_OK)
 80009d4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <sd_card_write+0x94>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d007      	beq.n	80009ec <sd_card_write+0x34>
    {
        printf("Error opening file '%s' for writing: %d\n", filename, sd_result);
 80009dc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <sd_card_write+0x94>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	481a      	ldr	r0, [pc, #104]	@ (8000a50 <sd_card_write+0x98>)
 80009e6:	f007 fa4f 	bl	8007e88 <iprintf>
 80009ea:	e02a      	b.n	8000a42 <sd_card_write+0x8a>
        return;
    }

    printf("Successfully opened file '%s' for writing\n", filename);
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4819      	ldr	r0, [pc, #100]	@ (8000a54 <sd_card_write+0x9c>)
 80009f0:	f007 fa4a 	bl	8007e88 <iprintf>

    // Write data to the file
    sd_result = f_write(&sdFile, data, strlen(data), &bytesWritten);
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f7ff fc0b 	bl	8000210 <strlen>
 80009fa:	4602      	mov	r2, r0
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	6839      	ldr	r1, [r7, #0]
 8000a02:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <sd_card_write+0x90>)
 8000a04:	f006 fd0b 	bl	800741e <f_write>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <sd_card_write+0x94>)
 8000a0e:	701a      	strb	r2, [r3, #0]
    if (sd_result == FR_OK)
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <sd_card_write+0x94>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d106      	bne.n	8000a26 <sd_card_write+0x6e>
    {
        printf("Wrote %u bytes to '%s'\n", bytesWritten, filename);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480e      	ldr	r0, [pc, #56]	@ (8000a58 <sd_card_write+0xa0>)
 8000a20:	f007 fa32 	bl	8007e88 <iprintf>
 8000a24:	e006      	b.n	8000a34 <sd_card_write+0x7c>
    }
    else
    {
        printf("Error writing to '%s': %d\n", filename, sd_result);
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <sd_card_write+0x94>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	480b      	ldr	r0, [pc, #44]	@ (8000a5c <sd_card_write+0xa4>)
 8000a30:	f007 fa2a 	bl	8007e88 <iprintf>
    }

    // Close the file
    f_close(&sdFile);
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <sd_card_write+0x90>)
 8000a36:	f006 ff04 	bl	8007842 <f_close>
    printf("Closed file '%s' after writing\n", filename);
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <sd_card_write+0xa8>)
 8000a3e:	f007 fa23 	bl	8007e88 <iprintf>
}
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20001204 	.word	0x20001204
 8000a4c:	200001c8 	.word	0x200001c8
 8000a50:	08008c08 	.word	0x08008c08
 8000a54:	08008c34 	.word	0x08008c34
 8000a58:	08008c60 	.word	0x08008c60
 8000a5c:	08008c78 	.word	0x08008c78
 8000a60:	08008c94 	.word	0x08008c94

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0a2      	sub	sp, #136	@ 0x88
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	225c      	movs	r2, #92	@ 0x5c
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f007 fb1f 	bl	8008118 <memset>
  if(hsd->Instance==SDIO)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a7f      	ldr	r2, [pc, #508]	@ (8000cdc <HAL_SD_MspInit+0x228>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	f040 80f6 	bne.w	8000cd2 <HAL_SD_MspInit+0x21e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000ae6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000aec:	2300      	movs	r3, #0
 8000aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000af0:	2300      	movs	r3, #0
 8000af2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 f97d 	bl	8001df8 <HAL_RCCEx_PeriphCLKConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000b04:	f7ff fece 	bl	80008a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	4b74      	ldr	r3, [pc, #464]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b10:	4a73      	ldr	r2, [pc, #460]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b16:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b18:	4b71      	ldr	r3, [pc, #452]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	4b6d      	ldr	r3, [pc, #436]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2c:	4a6c      	ldr	r2, [pc, #432]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b34:	4b6a      	ldr	r3, [pc, #424]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4b66      	ldr	r3, [pc, #408]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	4a65      	ldr	r2, [pc, #404]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b50:	4b63      	ldr	r3, [pc, #396]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	4b5f      	ldr	r3, [pc, #380]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	4a5e      	ldr	r2, [pc, #376]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ce0 <HAL_SD_MspInit+0x22c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b94:	4619      	mov	r1, r3
 8000b96:	4853      	ldr	r0, [pc, #332]	@ (8000ce4 <HAL_SD_MspInit+0x230>)
 8000b98:	f000 fe4c 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ba0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000bba:	4619      	mov	r1, r3
 8000bbc:	484a      	ldr	r0, [pc, #296]	@ (8000ce8 <HAL_SD_MspInit+0x234>)
 8000bbe:	f000 fe39 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000bde:	4619      	mov	r1, r3
 8000be0:	4842      	ldr	r0, [pc, #264]	@ (8000cec <HAL_SD_MspInit+0x238>)
 8000be2:	f000 fe27 	bl	8001834 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000be6:	4b42      	ldr	r3, [pc, #264]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000be8:	4a42      	ldr	r2, [pc, #264]	@ (8000cf4 <HAL_SD_MspInit+0x240>)
 8000bea:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000bec:	4b40      	ldr	r3, [pc, #256]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000bee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bf2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c00:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c06:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c08:	4b39      	ldr	r3, [pc, #228]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c0e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c10:	4b37      	ldr	r3, [pc, #220]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c16:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000c18:	4b35      	ldr	r3, [pc, #212]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c1e:	4b34      	ldr	r3, [pc, #208]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c24:	4b32      	ldr	r3, [pc, #200]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c26:	2204      	movs	r2, #4
 8000c28:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c2a:	4b31      	ldr	r3, [pc, #196]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000c30:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c32:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c36:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c38:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c3a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c3e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000c40:	482b      	ldr	r0, [pc, #172]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c42:	f000 fb0d 	bl	8001260 <HAL_DMA_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8000c4c:	f7ff fe2a 	bl	80008a4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a27      	ldr	r2, [pc, #156]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c54:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c56:	4a26      	ldr	r2, [pc, #152]	@ (8000cf0 <HAL_SD_MspInit+0x23c>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000c5c:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000c5e:	4a27      	ldr	r2, [pc, #156]	@ (8000cfc <HAL_SD_MspInit+0x248>)
 8000c60:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000c62:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000c64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c68:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c6a:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000c6c:	2240      	movs	r2, #64	@ 0x40
 8000c6e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c70:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c7c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000c80:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c84:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000c88:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000c90:	2220      	movs	r2, #32
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000ca8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000cb0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000cb4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000cb6:	4810      	ldr	r0, [pc, #64]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000cb8:	f000 fad2 	bl	8001260 <HAL_DMA_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8000cc2:	f7ff fdef 	bl	80008a4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000cca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <HAL_SD_MspInit+0x244>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3788      	adds	r7, #136	@ 0x88
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40012c00 	.word	0x40012c00
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	20000108 	.word	0x20000108
 8000cf4:	40026458 	.word	0x40026458
 8000cf8:	20000168 	.word	0x20000168
 8000cfc:	400264a0 	.word	0x400264a0

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <NMI_Handler+0x4>

08000d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <MemManage_Handler+0x4>

08000d18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d56:	f000 f92d 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <DMA2_Stream3_IRQHandler+0x10>)
 8000d66:	f000 fb29 	bl	80013bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000108 	.word	0x20000108

08000d74 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <DMA2_Stream6_IRQHandler+0x10>)
 8000d7a:	f000 fb1f 	bl	80013bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000168 	.word	0x20000168

08000d88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e00a      	b.n	8000db0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d9a:	f3af 8000 	nop.w
 8000d9e:	4601      	mov	r1, r0
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	b2ca      	uxtb	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf0      	blt.n	8000d9a <_read+0x12>
  }

  return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dea:	605a      	str	r2, [r3, #4]
  return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_isatty>:

int _isatty(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f007 f9ba 	bl	80081d4 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20020000 	.word	0x20020000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	20002234 	.word	0x20002234
 8000e94:	200023c8 	.word	0x200023c8

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	@ (8000efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f007 f979 	bl	80081e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fb87 	bl	8000600 <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f00:	080091ac 	.word	0x080091ac
  ldr r2, =_sbss
 8000f04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f08:	200023c4 	.word	0x200023c4

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	@ (8000f50 <HAL_Init+0x40>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_Init+0x40>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	@ (8000f50 <HAL_Init+0x40>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f94f 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fd8e 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f967 	bl	8001246 <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f90:	f000 f92f 	bl	80011f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	@ (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20002238 	.word	0x20002238

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20002238 	.word	0x20002238

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008

0800103c <__NVIC_SetPriorityGrouping>:
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_GetPriorityGrouping>:
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_EnableIRQ>:
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4907      	ldr	r1, [pc, #28]	@ (80010d8 <__NVIC_EnableIRQ+0x38>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	@ (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	@ (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	@ 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	@ 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <SysTick_Config>:
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a8:	d301      	bcc.n	80011ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <SysTick_Config+0x40>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b6:	210f      	movs	r1, #15
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011bc:	f7ff ff8e 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <SysTick_Config+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <SysTick_Config+0x40>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff29 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff3e 	bl	8001084 <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff8e 	bl	8001130 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5d 	bl	80010dc <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff31 	bl	80010a0 <__NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffa2 	bl	8001198 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff feb6 	bl	8000fdc <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e099      	b.n	80013b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2202      	movs	r2, #2
 8001280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129c:	e00f      	b.n	80012be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800129e:	f7ff fe9d 	bl	8000fdc <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d908      	bls.n	80012be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2220      	movs	r2, #32
 80012b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e078      	b.n	80013b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e8      	bne.n	800129e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	4b38      	ldr	r3, [pc, #224]	@ (80013b8 <HAL_DMA_Init+0x158>)
 80012d8:	4013      	ands	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4313      	orrs	r3, r2
 800130e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001314:	2b04      	cmp	r3, #4
 8001316:	d107      	bne.n	8001328 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	4313      	orrs	r3, r2
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4313      	orrs	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f023 0307 	bic.w	r3, r3, #7
 800133e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4313      	orrs	r3, r2
 8001348:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	2b04      	cmp	r3, #4
 8001350:	d117      	bne.n	8001382 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4313      	orrs	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00e      	beq.n	8001382 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f9e9 	bl	800173c <DMA_CheckFifoParam>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2240      	movs	r2, #64	@ 0x40
 8001374:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800137e:	2301      	movs	r3, #1
 8001380:	e016      	b.n	80013b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f9a0 	bl	80016d0 <DMA_CalcBaseAndBitshift>
 8001390:	4603      	mov	r3, r0
 8001392:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001398:	223f      	movs	r2, #63	@ 0x3f
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	f010803f 	.word	0xf010803f

080013bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001604 <HAL_DMA_IRQHandler+0x248>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a8e      	ldr	r2, [pc, #568]	@ (8001608 <HAL_DMA_IRQHandler+0x24c>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0a9b      	lsrs	r3, r3, #10
 80013d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e6:	2208      	movs	r2, #8
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d01a      	beq.n	8001428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0204 	bic.w	r2, r2, #4
 800140e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001414:	2208      	movs	r2, #8
 8001416:	409a      	lsls	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142c:	2201      	movs	r2, #1
 800142e:	409a      	lsls	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d012      	beq.n	800145e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00b      	beq.n	800145e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144a:	2201      	movs	r2, #1
 800144c:	409a      	lsls	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001456:	f043 0202 	orr.w	r2, r3, #2
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001462:	2204      	movs	r2, #4
 8001464:	409a      	lsls	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d012      	beq.n	8001494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001480:	2204      	movs	r2, #4
 8001482:	409a      	lsls	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800148c:	f043 0204 	orr.w	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001498:	2210      	movs	r2, #16
 800149a:	409a      	lsls	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d043      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d03c      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b6:	2210      	movs	r2, #16
 80014b8:	409a      	lsls	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d018      	beq.n	80014fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d108      	bne.n	80014ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d024      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
 80014ea:	e01f      	b.n	800152c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
 80014fc:	e016      	b.n	800152c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0208 	bic.w	r2, r2, #8
 800151a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001530:	2220      	movs	r2, #32
 8001532:	409a      	lsls	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 808f 	beq.w	800165c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8087 	beq.w	800165c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001552:	2220      	movs	r2, #32
 8001554:	409a      	lsls	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b05      	cmp	r3, #5
 8001564:	d136      	bne.n	80015d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0216 	bic.w	r2, r2, #22
 8001574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_DMA_IRQHandler+0x1da>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0208 	bic.w	r2, r2, #8
 80015a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015aa:	223f      	movs	r2, #63	@ 0x3f
 80015ac:	409a      	lsls	r2, r3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d07e      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
        }
        return;
 80015d2:	e079      	b.n	80016c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01d      	beq.n	800161e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10d      	bne.n	800160c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d031      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	4798      	blx	r3
 8001600:	e02c      	b.n	800165c <HAL_DMA_IRQHandler+0x2a0>
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000
 8001608:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
 800161c:	e01e      	b.n	800165c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10f      	bne.n	800164c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0210 	bic.w	r2, r2, #16
 800163a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001660:	2b00      	cmp	r3, #0
 8001662:	d032      	beq.n	80016ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d022      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2205      	movs	r2, #5
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3301      	adds	r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	d307      	bcc.n	80016a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f2      	bne.n	8001688 <HAL_DMA_IRQHandler+0x2cc>
 80016a2:	e000      	b.n	80016a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	4798      	blx	r3
 80016c6:	e000      	b.n	80016ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80016c8:	bf00      	nop
    }
  }
}
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	3b10      	subs	r3, #16
 80016e0:	4a14      	ldr	r2, [pc, #80]	@ (8001734 <DMA_CalcBaseAndBitshift+0x64>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016ea:	4a13      	ldr	r2, [pc, #76]	@ (8001738 <DMA_CalcBaseAndBitshift+0x68>)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d909      	bls.n	8001712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001706:	f023 0303 	bic.w	r3, r3, #3
 800170a:	1d1a      	adds	r2, r3, #4
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001710:	e007      	b.n	8001722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800171a:	f023 0303 	bic.w	r3, r3, #3
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	aaaaaaab 	.word	0xaaaaaaab
 8001738:	08008d0c 	.word	0x08008d0c

0800173c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d11f      	bne.n	8001796 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d856      	bhi.n	800180a <DMA_CheckFifoParam+0xce>
 800175c:	a201      	add	r2, pc, #4	@ (adr r2, 8001764 <DMA_CheckFifoParam+0x28>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	08001775 	.word	0x08001775
 8001768:	08001787 	.word	0x08001787
 800176c:	08001775 	.word	0x08001775
 8001770:	0800180b 	.word	0x0800180b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d046      	beq.n	800180e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001784:	e043      	b.n	800180e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800178e:	d140      	bne.n	8001812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001794:	e03d      	b.n	8001812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800179e:	d121      	bne.n	80017e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d837      	bhi.n	8001816 <DMA_CheckFifoParam+0xda>
 80017a6:	a201      	add	r2, pc, #4	@ (adr r2, 80017ac <DMA_CheckFifoParam+0x70>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017bd 	.word	0x080017bd
 80017b0:	080017c3 	.word	0x080017c3
 80017b4:	080017bd 	.word	0x080017bd
 80017b8:	080017d5 	.word	0x080017d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
      break;
 80017c0:	e030      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d025      	beq.n	800181a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d2:	e022      	b.n	800181a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017dc:	d11f      	bne.n	800181e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017e2:	e01c      	b.n	800181e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d903      	bls.n	80017f2 <DMA_CheckFifoParam+0xb6>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d003      	beq.n	80017f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017f0:	e018      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
      break;
 80017f6:	e015      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00e      	beq.n	8001822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
      break;
 8001808:	e00b      	b.n	8001822 <DMA_CheckFifoParam+0xe6>
      break;
 800180a:	bf00      	nop
 800180c:	e00a      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;
 800180e:	bf00      	nop
 8001810:	e008      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;
 8001812:	bf00      	nop
 8001814:	e006      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;
 8001816:	bf00      	nop
 8001818:	e004      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;
 800181a:	bf00      	nop
 800181c:	e002      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;   
 800181e:	bf00      	nop
 8001820:	e000      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;
 8001822:	bf00      	nop
    }
  } 
  
  return status; 
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	@ 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e165      	b.n	8001b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8154 	bne.w	8001b16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d005      	beq.n	8001886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001882:	2b02      	cmp	r3, #2
 8001884:	d130      	bne.n	80018e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 0201 	and.w	r2, r3, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d017      	beq.n	8001924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d123      	bne.n	8001978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	69b9      	ldr	r1, [r7, #24]
 8001974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0203 	and.w	r2, r3, #3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80ae 	beq.w	8001b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b5d      	ldr	r3, [pc, #372]	@ (8001b34 <HAL_GPIO_Init+0x300>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001b34 <HAL_GPIO_Init+0x300>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001b34 <HAL_GPIO_Init+0x300>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d6:	4a58      	ldr	r2, [pc, #352]	@ (8001b38 <HAL_GPIO_Init+0x304>)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	220f      	movs	r2, #15
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4f      	ldr	r2, [pc, #316]	@ (8001b3c <HAL_GPIO_Init+0x308>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d025      	beq.n	8001a4e <HAL_GPIO_Init+0x21a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4e      	ldr	r2, [pc, #312]	@ (8001b40 <HAL_GPIO_Init+0x30c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d01f      	beq.n	8001a4a <HAL_GPIO_Init+0x216>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001b44 <HAL_GPIO_Init+0x310>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d019      	beq.n	8001a46 <HAL_GPIO_Init+0x212>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4c      	ldr	r2, [pc, #304]	@ (8001b48 <HAL_GPIO_Init+0x314>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x20e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8001b4c <HAL_GPIO_Init+0x318>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x20a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4a      	ldr	r2, [pc, #296]	@ (8001b50 <HAL_GPIO_Init+0x31c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x206>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a49      	ldr	r2, [pc, #292]	@ (8001b54 <HAL_GPIO_Init+0x320>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x202>
 8001a32:	2306      	movs	r3, #6
 8001a34:	e00c      	b.n	8001a50 <HAL_GPIO_Init+0x21c>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e00a      	b.n	8001a50 <HAL_GPIO_Init+0x21c>
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	e008      	b.n	8001a50 <HAL_GPIO_Init+0x21c>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x21c>
 8001a42:	2303      	movs	r3, #3
 8001a44:	e004      	b.n	8001a50 <HAL_GPIO_Init+0x21c>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e002      	b.n	8001a50 <HAL_GPIO_Init+0x21c>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_GPIO_Init+0x21c>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	f002 0203 	and.w	r2, r2, #3
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a60:	4935      	ldr	r1, [pc, #212]	@ (8001b38 <HAL_GPIO_Init+0x304>)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b58 <HAL_GPIO_Init+0x324>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a92:	4a31      	ldr	r2, [pc, #196]	@ (8001b58 <HAL_GPIO_Init+0x324>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a98:	4b2f      	ldr	r3, [pc, #188]	@ (8001b58 <HAL_GPIO_Init+0x324>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001abc:	4a26      	ldr	r2, [pc, #152]	@ (8001b58 <HAL_GPIO_Init+0x324>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ac2:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <HAL_GPIO_Init+0x324>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b58 <HAL_GPIO_Init+0x324>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	@ (8001b58 <HAL_GPIO_Init+0x324>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b10:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <HAL_GPIO_Init+0x324>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b0f      	cmp	r3, #15
 8001b20:	f67f ae96 	bls.w	8001850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3724      	adds	r7, #36	@ 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40013800 	.word	0x40013800
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40020400 	.word	0x40020400
 8001b44:	40020800 	.word	0x40020800
 8001b48:	40020c00 	.word	0x40020c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40021400 	.word	0x40021400
 8001b54:	40021800 	.word	0x40021800
 8001b58:	40013c00 	.word	0x40013c00

08001b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <HAL_PWREx_EnableOverDrive+0x94>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb8:	f7ff fa10 	bl	8000fdc <HAL_GetTick>
 8001bbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bbe:	e009      	b.n	8001bd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bc0:	f7ff fa0c 	bl	8000fdc <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bce:	d901      	bls.n	8001bd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e01f      	b.n	8001c14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001be2:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be8:	f7ff f9f8 	bl	8000fdc <HAL_GetTick>
 8001bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bee:	e009      	b.n	8001c04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bf0:	f7ff f9f4 	bl	8000fdc <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bfe:	d901      	bls.n	8001c04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e007      	b.n	8001c14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c04:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c10:	d1ee      	bne.n	8001bf0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	420e0040 	.word	0x420e0040
 8001c24:	40007000 	.word	0x40007000
 8001c28:	420e0044 	.word	0x420e0044

08001c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0cc      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b68      	ldr	r3, [pc, #416]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d90c      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b65      	ldr	r3, [pc, #404]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b63      	ldr	r3, [pc, #396]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0b8      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c80:	4b59      	ldr	r3, [pc, #356]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a58      	ldr	r2, [pc, #352]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c98:	4b53      	ldr	r3, [pc, #332]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b50      	ldr	r3, [pc, #320]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	494d      	ldr	r1, [pc, #308]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d044      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b47      	ldr	r3, [pc, #284]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d119      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e07f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	4b3f      	ldr	r3, [pc, #252]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e06f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e067      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0a:	4b37      	ldr	r3, [pc, #220]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 0203 	bic.w	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4934      	ldr	r1, [pc, #208]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d1c:	f7ff f95e 	bl	8000fdc <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d24:	f7ff f95a 	bl	8000fdc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e04f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 020c 	and.w	r2, r3, #12
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1eb      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b25      	ldr	r3, [pc, #148]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d20c      	bcs.n	8001d74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e032      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4916      	ldr	r1, [pc, #88]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d9e:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	490e      	ldr	r1, [pc, #56]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db2:	f000 fb4b 	bl	800244c <HAL_RCC_GetSysClockFreq>
 8001db6:	4602      	mov	r2, r0
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	490a      	ldr	r1, [pc, #40]	@ (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	5ccb      	ldrb	r3, [r1, r3]
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	4a09      	ldr	r2, [pc, #36]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f8be 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023c00 	.word	0x40023c00
 8001de8:	40023800 	.word	0x40023800
 8001dec:	08008cfc 	.word	0x08008cfc
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	@ 0x30
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001e30:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e36:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3e:	496c      	ldr	r1, [pc, #432]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001e5e:	4b64      	ldr	r3, [pc, #400]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e64:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e6c:	4960      	ldr	r1, [pc, #384]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d017      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e8c:	4b58      	ldr	r3, [pc, #352]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4955      	ldr	r1, [pc, #340]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001eac:	2301      	movs	r3, #1
 8001eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d017      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ec8:	4b49      	ldr	r3, [pc, #292]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ece:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed6:	4946      	ldr	r1, [pc, #280]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ee6:	d101      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 808a 	beq.w	800201a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b39      	ldr	r3, [pc, #228]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	4a38      	ldr	r2, [pc, #224]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f16:	4b36      	ldr	r3, [pc, #216]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f22:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a33      	ldr	r2, [pc, #204]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f2e:	f7ff f855 	bl	8000fdc <HAL_GetTick>
 8001f32:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f36:	f7ff f851 	bl	8000fdc <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e278      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001f48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f54:	4b26      	ldr	r3, [pc, #152]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f5c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d02f      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f6c:	6a3a      	ldr	r2, [r7, #32]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d028      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f7a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001f88:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d114      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f81f 	bl	8000fdc <HAL_GetTick>
 8001f9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7ff f81b 	bl	8000fdc <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e240      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0ee      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001fd0:	d114      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fe6:	4902      	ldr	r1, [pc, #8]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]
 8001fec:	e00c      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	42470e40 	.word	0x42470e40
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a49      	ldr	r2, [pc, #292]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002002:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002006:	6093      	str	r3, [r2, #8]
 8002008:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800200a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	4944      	ldr	r1, [pc, #272]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002016:	4313      	orrs	r3, r2
 8002018:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800202c:	4b3f      	ldr	r3, [pc, #252]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800202e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800203c:	4b3a      	ldr	r3, [pc, #232]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800203e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002042:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	4937      	ldr	r1, [pc, #220]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800205e:	4b32      	ldr	r3, [pc, #200]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002064:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206c:	492e      	ldr	r1, [pc, #184]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d011      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002080:	4b29      	ldr	r3, [pc, #164]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002086:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208e:	4926      	ldr	r1, [pc, #152]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800209e:	d101      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80020a0:	2301      	movs	r3, #1
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80020b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	491a      	ldr	r1, [pc, #104]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d011      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e0:	4911      	ldr	r1, [pc, #68]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020f0:	d101      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80020f2:	2301      	movs	r3, #1
 80020f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80020f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d005      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002104:	f040 80ff 	bne.w	8002306 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800210e:	f7fe ff65 	bl	8000fdc <HAL_GetTick>
 8002112:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002114:	e00e      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002116:	f7fe ff61 	bl	8000fdc <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d907      	bls.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e188      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002128:	40023800 	.word	0x40023800
 800212c:	424711e0 	.word	0x424711e0
 8002130:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002134:	4b7e      	ldr	r3, [pc, #504]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ea      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002150:	2b00      	cmp	r3, #0
 8002152:	d009      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800215c:	2b00      	cmp	r3, #0
 800215e:	d028      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d124      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002168:	4b71      	ldr	r3, [pc, #452]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800216a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800216e:	0c1b      	lsrs	r3, r3, #16
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	3301      	adds	r3, #1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800217a:	4b6d      	ldr	r3, [pc, #436]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800217c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002180:	0e1b      	lsrs	r3, r3, #24
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	431a      	orrs	r2, r3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	3b01      	subs	r3, #1
 800219a:	041b      	lsls	r3, r3, #16
 800219c:	431a      	orrs	r2, r3
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	071b      	lsls	r3, r3, #28
 80021aa:	4961      	ldr	r1, [pc, #388]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d035      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021dc:	d130      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80021de:	4b54      	ldr	r3, [pc, #336]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	3301      	adds	r3, #1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021f6:	0f1b      	lsrs	r3, r3, #28
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	019b      	lsls	r3, r3, #6
 8002208:	431a      	orrs	r2, r3
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	085b      	lsrs	r3, r3, #1
 800220e:	3b01      	subs	r3, #1
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	431a      	orrs	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	071b      	lsls	r3, r3, #28
 8002220:	4943      	ldr	r1, [pc, #268]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002228:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800222a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800222e:	f023 021f 	bic.w	r2, r3, #31
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	3b01      	subs	r3, #1
 8002238:	493d      	ldr	r1, [pc, #244]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d029      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002254:	d124      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002256:	4b36      	ldr	r3, [pc, #216]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	3301      	adds	r3, #1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002268:	4b31      	ldr	r3, [pc, #196]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800226a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800226e:	0f1b      	lsrs	r3, r3, #28
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	019b      	lsls	r3, r3, #6
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	3b01      	subs	r3, #1
 800228a:	041b      	lsls	r3, r3, #16
 800228c:	431a      	orrs	r2, r3
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	431a      	orrs	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	071b      	lsls	r3, r3, #28
 8002298:	4925      	ldr	r1, [pc, #148]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d016      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	019b      	lsls	r3, r3, #6
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	3b01      	subs	r3, #1
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	071b      	lsls	r3, r3, #28
 80022d2:	4917      	ldr	r1, [pc, #92]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022da:	4b16      	ldr	r3, [pc, #88]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022e0:	f7fe fe7c 	bl	8000fdc <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022e8:	f7fe fe78 	bl	8000fdc <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e09f      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	2b01      	cmp	r3, #1
 800230a:	f040 8095 	bne.w	8002438 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002314:	f7fe fe62 	bl	8000fdc <HAL_GetTick>
 8002318:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800231a:	e00f      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800231c:	f7fe fe5e 	bl	8000fdc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d908      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e085      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	42470068 	.word	0x42470068
 8002338:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800233c:	4b41      	ldr	r3, [pc, #260]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002348:	d0e8      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002366:	2b00      	cmp	r3, #0
 8002368:	d02b      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236e:	2b00      	cmp	r3, #0
 8002370:	d127      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002372:	4b34      	ldr	r3, [pc, #208]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	3301      	adds	r3, #1
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	019b      	lsls	r3, r3, #6
 800238e:	431a      	orrs	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	3b01      	subs	r3, #1
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	4928      	ldr	r1, [pc, #160]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023a8:	4b26      	ldr	r3, [pc, #152]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b6:	3b01      	subs	r3, #1
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	4922      	ldr	r1, [pc, #136]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01d      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023d6:	d118      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	0e1b      	lsrs	r3, r3, #24
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	019b      	lsls	r3, r3, #6
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	3b01      	subs	r3, #1
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	4910      	ldr	r1, [pc, #64]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800240a:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002410:	f7fe fde4 	bl	8000fdc <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002418:	f7fe fde0 	bl	8000fdc <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e007      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002436:	d1ef      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3730      	adds	r7, #48	@ 0x30
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	42470070 	.word	0x42470070

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002450:	b0a6      	sub	sp, #152	@ 0x98
 8002452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002472:	4bc8      	ldr	r3, [pc, #800]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b0c      	cmp	r3, #12
 800247c:	f200 817e 	bhi.w	800277c <HAL_RCC_GetSysClockFreq+0x330>
 8002480:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	080024bd 	.word	0x080024bd
 800248c:	0800277d 	.word	0x0800277d
 8002490:	0800277d 	.word	0x0800277d
 8002494:	0800277d 	.word	0x0800277d
 8002498:	080024c5 	.word	0x080024c5
 800249c:	0800277d 	.word	0x0800277d
 80024a0:	0800277d 	.word	0x0800277d
 80024a4:	0800277d 	.word	0x0800277d
 80024a8:	080024cd 	.word	0x080024cd
 80024ac:	0800277d 	.word	0x0800277d
 80024b0:	0800277d 	.word	0x0800277d
 80024b4:	0800277d 	.word	0x0800277d
 80024b8:	08002637 	.word	0x08002637
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4bb6      	ldr	r3, [pc, #728]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x34c>)
 80024be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80024c2:	e15f      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024c4:	4bb5      	ldr	r3, [pc, #724]	@ (800279c <HAL_RCC_GetSysClockFreq+0x350>)
 80024c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80024ca:	e15b      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024cc:	4bb1      	ldr	r3, [pc, #708]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d8:	4bae      	ldr	r3, [pc, #696]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d031      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e4:	4bab      	ldr	r3, [pc, #684]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	2200      	movs	r2, #0
 80024ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80024f8:	2300      	movs	r3, #0
 80024fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80024fc:	4ba7      	ldr	r3, [pc, #668]	@ (800279c <HAL_RCC_GetSysClockFreq+0x350>)
 80024fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002502:	462a      	mov	r2, r5
 8002504:	fb03 f202 	mul.w	r2, r3, r2
 8002508:	2300      	movs	r3, #0
 800250a:	4621      	mov	r1, r4
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	4aa2      	ldr	r2, [pc, #648]	@ (800279c <HAL_RCC_GetSysClockFreq+0x350>)
 8002514:	4621      	mov	r1, r4
 8002516:	fba1 1202 	umull	r1, r2, r1, r2
 800251a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800251c:	460a      	mov	r2, r1
 800251e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002520:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002522:	4413      	add	r3, r2
 8002524:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800252a:	2200      	movs	r2, #0
 800252c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800252e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002530:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002534:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002538:	f7fd fec2 	bl	80002c0 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4613      	mov	r3, r2
 8002542:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002546:	e064      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002548:	4b92      	ldr	r3, [pc, #584]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	2200      	movs	r2, #0
 8002550:	653b      	str	r3, [r7, #80]	@ 0x50
 8002552:	657a      	str	r2, [r7, #84]	@ 0x54
 8002554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800255c:	2300      	movs	r3, #0
 800255e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002560:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002564:	4622      	mov	r2, r4
 8002566:	462b      	mov	r3, r5
 8002568:	f04f 0000 	mov.w	r0, #0
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	0159      	lsls	r1, r3, #5
 8002572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002576:	0150      	lsls	r0, r2, #5
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4621      	mov	r1, r4
 800257e:	1a51      	subs	r1, r2, r1
 8002580:	6139      	str	r1, [r7, #16]
 8002582:	4629      	mov	r1, r5
 8002584:	eb63 0301 	sbc.w	r3, r3, r1
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002596:	4659      	mov	r1, fp
 8002598:	018b      	lsls	r3, r1, #6
 800259a:	4651      	mov	r1, sl
 800259c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025a0:	4651      	mov	r1, sl
 80025a2:	018a      	lsls	r2, r1, #6
 80025a4:	4651      	mov	r1, sl
 80025a6:	ebb2 0801 	subs.w	r8, r2, r1
 80025aa:	4659      	mov	r1, fp
 80025ac:	eb63 0901 	sbc.w	r9, r3, r1
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025c4:	4690      	mov	r8, r2
 80025c6:	4699      	mov	r9, r3
 80025c8:	4623      	mov	r3, r4
 80025ca:	eb18 0303 	adds.w	r3, r8, r3
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	462b      	mov	r3, r5
 80025d2:	eb49 0303 	adc.w	r3, r9, r3
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025e4:	4629      	mov	r1, r5
 80025e6:	028b      	lsls	r3, r1, #10
 80025e8:	4621      	mov	r1, r4
 80025ea:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ee:	4621      	mov	r1, r4
 80025f0:	028a      	lsls	r2, r1, #10
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fa:	2200      	movs	r2, #0
 80025fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80025fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002600:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002604:	f7fd fe5c 	bl	80002c0 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4613      	mov	r3, r2
 800260e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002612:	4b60      	ldr	r3, [pc, #384]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0c1b      	lsrs	r3, r3, #16
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	3301      	adds	r3, #1
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002624:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002634:	e0a6      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002636:	4b57      	ldr	r3, [pc, #348]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800263e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002642:	4b54      	ldr	r3, [pc, #336]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d02a      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b51      	ldr	r3, [pc, #324]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002658:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800265a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002660:	2100      	movs	r1, #0
 8002662:	4b4e      	ldr	r3, [pc, #312]	@ (800279c <HAL_RCC_GetSysClockFreq+0x350>)
 8002664:	fb03 f201 	mul.w	r2, r3, r1
 8002668:	2300      	movs	r3, #0
 800266a:	fb00 f303 	mul.w	r3, r0, r3
 800266e:	4413      	add	r3, r2
 8002670:	4a4a      	ldr	r2, [pc, #296]	@ (800279c <HAL_RCC_GetSysClockFreq+0x350>)
 8002672:	fba0 1202 	umull	r1, r2, r0, r2
 8002676:	677a      	str	r2, [r7, #116]	@ 0x74
 8002678:	460a      	mov	r2, r1
 800267a:	673a      	str	r2, [r7, #112]	@ 0x70
 800267c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800267e:	4413      	add	r3, r2
 8002680:	677b      	str	r3, [r7, #116]	@ 0x74
 8002682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002686:	2200      	movs	r2, #0
 8002688:	633b      	str	r3, [r7, #48]	@ 0x30
 800268a:	637a      	str	r2, [r7, #52]	@ 0x34
 800268c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002690:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002694:	f7fd fe14 	bl	80002c0 <__aeabi_uldivmod>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4613      	mov	r3, r2
 800269e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026a2:	e05b      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	2200      	movs	r2, #0
 80026ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80026bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026c0:	4642      	mov	r2, r8
 80026c2:	464b      	mov	r3, r9
 80026c4:	f04f 0000 	mov.w	r0, #0
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	0159      	lsls	r1, r3, #5
 80026ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d2:	0150      	lsls	r0, r2, #5
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4641      	mov	r1, r8
 80026da:	ebb2 0a01 	subs.w	sl, r2, r1
 80026de:	4649      	mov	r1, r9
 80026e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026f8:	ebb2 040a 	subs.w	r4, r2, sl
 80026fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	00eb      	lsls	r3, r5, #3
 800270a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800270e:	00e2      	lsls	r2, r4, #3
 8002710:	4614      	mov	r4, r2
 8002712:	461d      	mov	r5, r3
 8002714:	4643      	mov	r3, r8
 8002716:	18e3      	adds	r3, r4, r3
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	464b      	mov	r3, r9
 800271c:	eb45 0303 	adc.w	r3, r5, r3
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800272e:	4629      	mov	r1, r5
 8002730:	028b      	lsls	r3, r1, #10
 8002732:	4621      	mov	r1, r4
 8002734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002738:	4621      	mov	r1, r4
 800273a:	028a      	lsls	r2, r1, #10
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002744:	2200      	movs	r2, #0
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	61fa      	str	r2, [r7, #28]
 800274a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800274e:	f7fd fdb7 	bl	80002c0 <__aeabi_uldivmod>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4613      	mov	r3, r2
 8002758:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x348>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0f1b      	lsrs	r3, r3, #28
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800276a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800276e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800277a:	e003      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x34c>)
 800277e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002782:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002784:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002788:	4618      	mov	r0, r3
 800278a:	3798      	adds	r7, #152	@ 0x98
 800278c:	46bd      	mov	sp, r7
 800278e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	00f42400 	.word	0x00f42400
 800279c:	017d7840 	.word	0x017d7840

080027a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e28d      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8083 	beq.w	80028c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027c0:	4b94      	ldr	r3, [pc, #592]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d019      	beq.n	8002800 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027cc:	4b91      	ldr	r3, [pc, #580]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027e4:	d00c      	beq.n	8002800 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d112      	bne.n	8002818 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f2:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027fe:	d10b      	bne.n	8002818 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	4b84      	ldr	r3, [pc, #528]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05b      	beq.n	80028c4 <HAL_RCC_OscConfig+0x124>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d157      	bne.n	80028c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e25a      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002820:	d106      	bne.n	8002830 <HAL_RCC_OscConfig+0x90>
 8002822:	4b7c      	ldr	r3, [pc, #496]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7b      	ldr	r2, [pc, #492]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xcc>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0xb4>
 800283a:	4b76      	ldr	r3, [pc, #472]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a75      	ldr	r2, [pc, #468]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b73      	ldr	r3, [pc, #460]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a72      	ldr	r2, [pc, #456]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xcc>
 8002854:	4b6f      	ldr	r3, [pc, #444]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6e      	ldr	r2, [pc, #440]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b6c      	ldr	r3, [pc, #432]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a6b      	ldr	r2, [pc, #428]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800286a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fbb2 	bl	8000fdc <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fbae 	bl	8000fdc <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e21f      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b61      	ldr	r3, [pc, #388]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xdc>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fb9e 	bl	8000fdc <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe fb9a 	bl	8000fdc <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e20b      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b57      	ldr	r3, [pc, #348]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x104>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d06f      	beq.n	80029b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028d2:	4b50      	ldr	r3, [pc, #320]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d017      	beq.n	800290e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028de:	4b4d      	ldr	r3, [pc, #308]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d105      	bne.n	80028f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f6:	4b47      	ldr	r3, [pc, #284]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002902:	4b44      	ldr	r3, [pc, #272]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b41      	ldr	r3, [pc, #260]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x186>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1d3      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b3b      	ldr	r3, [pc, #236]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4937      	ldr	r1, [pc, #220]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e03a      	b.n	80029b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b34      	ldr	r3, [pc, #208]	@ (8002a18 <HAL_RCC_OscConfig+0x278>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fb47 	bl	8000fdc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7fe fb43 	bl	8000fdc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1b4      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b28      	ldr	r3, [pc, #160]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4925      	ldr	r1, [pc, #148]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_RCC_OscConfig+0x278>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fb26 	bl	8000fdc <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe fb22 	bl	8000fdc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e193      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d036      	beq.n	8002a2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d016      	beq.n	80029f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b15      	ldr	r3, [pc, #84]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe fb06 	bl	8000fdc <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fb02 	bl	8000fdc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e173      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80029e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x234>
 80029f2:	e01b      	b.n	8002a2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f4:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <HAL_RCC_OscConfig+0x27c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe faef 	bl	8000fdc <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	e00e      	b.n	8002a20 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe faeb 	bl	8000fdc <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d907      	bls.n	8002a20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e15c      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	42470000 	.word	0x42470000
 8002a1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	4b8a      	ldr	r3, [pc, #552]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ea      	bne.n	8002a02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8097 	beq.w	8002b68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3e:	4b83      	ldr	r3, [pc, #524]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	4a7e      	ldr	r2, [pc, #504]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4b79      	ldr	r3, [pc, #484]	@ (8002c50 <HAL_RCC_OscConfig+0x4b0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d118      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a76:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <HAL_RCC_OscConfig+0x4b0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a75      	ldr	r2, [pc, #468]	@ (8002c50 <HAL_RCC_OscConfig+0x4b0>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7fe faab 	bl	8000fdc <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7fe faa7 	bl	8000fdc <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e118      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c50 <HAL_RCC_OscConfig+0x4b0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x31e>
 8002ab0:	4b66      	ldr	r3, [pc, #408]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab4:	4a65      	ldr	r2, [pc, #404]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abc:	e01c      	b.n	8002af8 <HAL_RCC_OscConfig+0x358>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x340>
 8002ac6:	4b61      	ldr	r3, [pc, #388]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aca:	4a60      	ldr	r2, [pc, #384]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad2:	4b5e      	ldr	r3, [pc, #376]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0x358>
 8002ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae4:	4a59      	ldr	r2, [pc, #356]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aec:	4b57      	ldr	r3, [pc, #348]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af0:	4a56      	ldr	r2, [pc, #344]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002af2:	f023 0304 	bic.w	r3, r3, #4
 8002af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe fa6c 	bl	8000fdc <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe fa68 	bl	8000fdc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e0d7      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0ee      	beq.n	8002b08 <HAL_RCC_OscConfig+0x368>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fa56 	bl	8000fdc <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe fa52 	bl	8000fdc <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0c1      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	4b40      	ldr	r3, [pc, #256]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ee      	bne.n	8002b34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	4a3a      	ldr	r2, [pc, #232]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80ad 	beq.w	8002ccc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b72:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d060      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d145      	bne.n	8002c12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b33      	ldr	r3, [pc, #204]	@ (8002c54 <HAL_RCC_OscConfig+0x4b4>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fa26 	bl	8000fdc <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fa22 	bl	8000fdc <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e093      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	4b29      	ldr	r3, [pc, #164]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	019b      	lsls	r3, r3, #6
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	071b      	lsls	r3, r3, #28
 8002bde:	491b      	ldr	r1, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <HAL_RCC_OscConfig+0x4b4>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7fe f9f7 	bl	8000fdc <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7fe f9f3 	bl	8000fdc <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e064      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c04:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x452>
 8002c10:	e05c      	b.n	8002ccc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c12:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <HAL_RCC_OscConfig+0x4b4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe f9e0 	bl	8000fdc <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe f9dc 	bl	8000fdc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e04d      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_RCC_OscConfig+0x4ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x480>
 8002c3e:	e045      	b.n	8002ccc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e040      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000
 8002c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c58:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <HAL_RCC_OscConfig+0x538>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d030      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d129      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d122      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d119      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e022      	b.n	8002d34 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fd fed7 	bl	8000ab4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2203      	movs	r2, #3
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f814 	bl	8002d3c <HAL_SD_InitCard>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00a      	b.n	8002d34 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d3c:	b5b0      	push	{r4, r5, r7, lr}
 8002d3e:	b08e      	sub	sp, #56	@ 0x38
 8002d40:	af04      	add	r7, sp, #16
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002d58:	2376      	movs	r3, #118	@ 0x76
 8002d5a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681d      	ldr	r5, [r3, #0]
 8002d60:	466c      	mov	r4, sp
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d74:	4628      	mov	r0, r5
 8002d76:	f000 ff39 	bl	8003bec <SDIO_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e04f      	b.n	8002e2c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002d8c:	4b29      	ldr	r3, [pc, #164]	@ (8002e34 <HAL_SD_InitCard+0xf8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 ff71 	bl	8003c7e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002d9c:	4b25      	ldr	r3, [pc, #148]	@ (8002e34 <HAL_SD_InitCard+0xf8>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002da2:	2002      	movs	r0, #2
 8002da4:	f7fe f926 	bl	8000ff4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fe69 	bl	8003a80 <SD_PowerON>
 8002dae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e02e      	b.n	8002e2c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fd88 	bl	80038e4 <SD_InitCard>
 8002dd4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e01b      	b.n	8002e2c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 ffd0 	bl	8003da2 <SDMMC_CmdBlockLength>
 8002e02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00f      	beq.n	8002e2a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e38 <HAL_SD_InitCard+0xfc>)
 8002e10:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3728      	adds	r7, #40	@ 0x28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bdb0      	pop	{r4, r5, r7, pc}
 8002e34:	422580a0 	.word	0x422580a0
 8002e38:	004005ff 	.word	0x004005ff

08002e3c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b092      	sub	sp, #72	@ 0x48
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e4a:	f7fe f8c7 	bl	8000fdc <HAL_GetTick>
 8002e4e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e62:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e1bd      	b.n	80031ea <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	f040 81b0 	bne.w	80031dc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	441a      	add	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d907      	bls.n	8002ea0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e94:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e1a4      	b.n	80031ea <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2200      	movs	r2, #0
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d002      	beq.n	8002ebe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eba:	025b      	lsls	r3, r3, #9
 8002ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ec2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	025b      	lsls	r3, r3, #9
 8002ec8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002eca:	2390      	movs	r3, #144	@ 0x90
 8002ecc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f107 0214 	add.w	r2, r7, #20
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 ff30 	bl	8003d4a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d90a      	bls.n	8002f06 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 ff94 	bl	8003e2a <SDMMC_CmdReadMultiBlock>
 8002f02:	6478      	str	r0, [r7, #68]	@ 0x44
 8002f04:	e009      	b.n	8002f1a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 ff67 	bl	8003de6 <SDMMC_CmdReadSingleBlock>
 8002f18:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d012      	beq.n	8002f46 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a7a      	ldr	r2, [pc, #488]	@ (8003110 <HAL_SD_ReadBlocks+0x2d4>)
 8002f26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e151      	b.n	80031ea <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002f4a:	e061      	b.n	8003010 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d03c      	beq.n	8002fd4 <HAL_SD_ReadBlocks+0x198>
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d039      	beq.n	8002fd4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f64:	e033      	b.n	8002fce <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fe69 	bl	8003c42 <SDIO_ReadFIFO>
 8002f70:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f82:	3b01      	subs	r3, #1
 8002f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f92:	3301      	adds	r3, #1
 8002f94:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9e:	0c1b      	lsrs	r3, r3, #16
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa8:	3301      	adds	r3, #1
 8002faa:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb4:	0e1b      	lsrs	r3, r3, #24
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fca:	3301      	adds	r3, #1
 8002fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd0:	2b07      	cmp	r3, #7
 8002fd2:	d9c8      	bls.n	8002f66 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002fd4:	f7fe f802 	bl	8000fdc <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d902      	bls.n	8002fea <HAL_SD_ReadBlocks+0x1ae>
 8002fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d112      	bne.n	8003010 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a48      	ldr	r2, [pc, #288]	@ (8003110 <HAL_SD_ReadBlocks+0x2d4>)
 8002ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0ec      	b.n	80031ea <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800301a:	2b00      	cmp	r3, #0
 800301c:	d096      	beq.n	8002f4c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d022      	beq.n	8003072 <HAL_SD_ReadBlocks+0x236>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d91f      	bls.n	8003072 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	2b03      	cmp	r3, #3
 8003038:	d01b      	beq.n	8003072 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 ff5a 	bl	8003ef8 <SDMMC_CmdStopTransfer>
 8003044:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003048:	2b00      	cmp	r3, #0
 800304a:	d012      	beq.n	8003072 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2f      	ldr	r2, [pc, #188]	@ (8003110 <HAL_SD_ReadBlocks+0x2d4>)
 8003052:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0bb      	b.n	80031ea <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d012      	beq.n	80030a6 <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a22      	ldr	r2, [pc, #136]	@ (8003110 <HAL_SD_ReadBlocks+0x2d4>)
 8003086:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	f043 0208 	orr.w	r2, r3, #8
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0a1      	b.n	80031ea <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d012      	beq.n	80030da <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a15      	ldr	r2, [pc, #84]	@ (8003110 <HAL_SD_ReadBlocks+0x2d4>)
 80030ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c0:	f043 0202 	orr.w	r2, r3, #2
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e087      	b.n	80031ea <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d064      	beq.n	80031b2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a08      	ldr	r2, [pc, #32]	@ (8003110 <HAL_SD_ReadBlocks+0x2d4>)
 80030ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06d      	b.n	80031ea <HAL_SD_ReadBlocks+0x3ae>
 800310e:	bf00      	nop
 8003110:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fd92 	bl	8003c42 <SDIO_ReadFIFO>
 800311e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003122:	b2da      	uxtb	r2, r3
 8003124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003126:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312a:	3301      	adds	r3, #1
 800312c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800312e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003130:	3b01      	subs	r3, #1
 8003132:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	b2da      	uxtb	r2, r3
 800313a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800313e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003140:	3301      	adds	r3, #1
 8003142:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003146:	3b01      	subs	r3, #1
 8003148:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800314a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	b2da      	uxtb	r2, r3
 8003150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003152:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003156:	3301      	adds	r3, #1
 8003158:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800315a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800315c:	3b01      	subs	r3, #1
 800315e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	0e1b      	lsrs	r3, r3, #24
 8003164:	b2da      	uxtb	r2, r3
 8003166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003168:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800316a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316c:	3301      	adds	r3, #1
 800316e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003172:	3b01      	subs	r3, #1
 8003174:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003176:	f7fd ff31 	bl	8000fdc <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003182:	429a      	cmp	r2, r3
 8003184:	d902      	bls.n	800318c <HAL_SD_ReadBlocks+0x350>
 8003186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003188:	2b00      	cmp	r3, #0
 800318a:	d112      	bne.n	80031b2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a18      	ldr	r2, [pc, #96]	@ (80031f4 <HAL_SD_ReadBlocks+0x3b8>)
 8003192:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e01b      	b.n	80031ea <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_SD_ReadBlocks+0x38a>
 80031c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1a6      	bne.n	8003114 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f240 523a 	movw	r2, #1338	@ 0x53a
 80031ce:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	e006      	b.n	80031ea <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
  }
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3748      	adds	r7, #72	@ 0x48
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	004005ff 	.word	0x004005ff

080031f8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b092      	sub	sp, #72	@ 0x48
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003206:	f7fd fee9 	bl	8000fdc <HAL_GetTick>
 800320a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d107      	bne.n	800322a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e165      	b.n	80034f6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	f040 8158 	bne.w	80034e8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800323e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	441a      	add	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	429a      	cmp	r2, r3
 800324a:	d907      	bls.n	800325c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e14c      	b.n	80034f6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2203      	movs	r2, #3
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2200      	movs	r2, #0
 800326a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003270:	2b01      	cmp	r3, #1
 8003272:	d002      	beq.n	800327a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003276:	025b      	lsls	r3, r3, #9
 8003278:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800327e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	025b      	lsls	r3, r3, #9
 8003284:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003286:	2390      	movs	r3, #144	@ 0x90
 8003288:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800328a:	2300      	movs	r3, #0
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800328e:	2300      	movs	r3, #0
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003292:	2301      	movs	r3, #1
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f107 0218 	add.w	r2, r7, #24
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fd52 	bl	8003d4a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d90a      	bls.n	80032c2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fdfa 	bl	8003eb2 <SDMMC_CmdWriteMultiBlock>
 80032be:	6478      	str	r0, [r7, #68]	@ 0x44
 80032c0:	e009      	b.n	80032d6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2210      	movs	r2, #16
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fdcd 	bl	8003e6e <SDMMC_CmdWriteSingleBlock>
 80032d4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80032d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d012      	beq.n	8003302 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a87      	ldr	r2, [pc, #540]	@ (8003500 <HAL_SD_WriteBlocks+0x308>)
 80032e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ea:	431a      	orrs	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0f9      	b.n	80034f6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003306:	e065      	b.n	80033d4 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d040      	beq.n	8003398 <HAL_SD_WriteBlocks+0x1a0>
 8003316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d03d      	beq.n	8003398 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800331c:	2300      	movs	r3, #0
 800331e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003320:	e037      	b.n	8003392 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332a:	3301      	adds	r3, #1
 800332c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800332e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003330:	3b01      	subs	r3, #1
 8003332:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	021a      	lsls	r2, r3, #8
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003342:	3301      	adds	r3, #1
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003348:	3b01      	subs	r3, #1
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800334c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	041a      	lsls	r2, r3, #16
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335a:	3301      	adds	r3, #1
 800335c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800335e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003360:	3b01      	subs	r3, #1
 8003362:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	061a      	lsls	r2, r3, #24
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003372:	3301      	adds	r3, #1
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003378:	3b01      	subs	r3, #1
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f107 0214 	add.w	r2, r7, #20
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fc68 	bl	8003c5c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800338c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800338e:	3301      	adds	r3, #1
 8003390:	643b      	str	r3, [r7, #64]	@ 0x40
 8003392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003394:	2b07      	cmp	r3, #7
 8003396:	d9c4      	bls.n	8003322 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003398:	f7fd fe20 	bl	8000fdc <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d902      	bls.n	80033ae <HAL_SD_WriteBlocks+0x1b6>
 80033a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d112      	bne.n	80033d4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a53      	ldr	r2, [pc, #332]	@ (8003500 <HAL_SD_WriteBlocks+0x308>)
 80033b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e090      	b.n	80034f6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033da:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d092      	beq.n	8003308 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d022      	beq.n	8003436 <HAL_SD_WriteBlocks+0x23e>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d91f      	bls.n	8003436 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d01b      	beq.n	8003436 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fd78 	bl	8003ef8 <SDMMC_CmdStopTransfer>
 8003408:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800340a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a3a      	ldr	r2, [pc, #232]	@ (8003500 <HAL_SD_WriteBlocks+0x308>)
 8003416:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800341c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341e:	431a      	orrs	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e05f      	b.n	80034f6 <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d012      	beq.n	800346a <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a2d      	ldr	r2, [pc, #180]	@ (8003500 <HAL_SD_WriteBlocks+0x308>)
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	f043 0208 	orr.w	r2, r3, #8
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e045      	b.n	80034f6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a20      	ldr	r2, [pc, #128]	@ (8003500 <HAL_SD_WriteBlocks+0x308>)
 800347e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	f043 0202 	orr.w	r2, r3, #2
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e02b      	b.n	80034f6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d012      	beq.n	80034d2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a13      	ldr	r2, [pc, #76]	@ (8003500 <HAL_SD_WriteBlocks+0x308>)
 80034b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	f043 0210 	orr.w	r2, r3, #16
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e011      	b.n	80034f6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80034da:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e006      	b.n	80034f6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3748      	adds	r7, #72	@ 0x48
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	004005ff 	.word	0x004005ff

08003504 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003512:	0f9b      	lsrs	r3, r3, #30
 8003514:	b2da      	uxtb	r2, r3
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800351e:	0e9b      	lsrs	r3, r3, #26
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	b2da      	uxtb	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003530:	0e1b      	lsrs	r3, r3, #24
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	b2da      	uxtb	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	b2da      	uxtb	r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	b2da      	uxtb	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800355a:	b2da      	uxtb	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003564:	0d1b      	lsrs	r3, r3, #20
 8003566:	b29a      	uxth	r2, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	b2da      	uxtb	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003582:	0bdb      	lsrs	r3, r3, #15
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	b2da      	uxtb	r2, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003594:	0b9b      	lsrs	r3, r3, #14
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	b2da      	uxtb	r2, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a6:	0b5b      	lsrs	r3, r3, #13
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b8:	0b1b      	lsrs	r3, r3, #12
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2200      	movs	r2, #0
 80035ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d163      	bne.n	800369c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d8:	009a      	lsls	r2, r3, #2
 80035da:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035de:	4013      	ands	r3, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80035e4:	0f92      	lsrs	r2, r2, #30
 80035e6:	431a      	orrs	r2, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f0:	0edb      	lsrs	r3, r3, #27
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003602:	0e1b      	lsrs	r3, r3, #24
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	b2da      	uxtb	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003614:	0d5b      	lsrs	r3, r3, #21
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	b2da      	uxtb	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003626:	0c9b      	lsrs	r3, r3, #18
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	b2da      	uxtb	r2, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003638:	0bdb      	lsrs	r3, r3, #15
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	b2da      	uxtb	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	7e1b      	ldrb	r3, [r3, #24]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	3302      	adds	r3, #2
 800365c:	2201      	movs	r2, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003666:	fb03 f202 	mul.w	r2, r3, r2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	7a1b      	ldrb	r3, [r3, #8]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	2201      	movs	r2, #1
 800367a:	409a      	lsls	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003688:	0a52      	lsrs	r2, r2, #9
 800368a:	fb03 f202 	mul.w	r2, r3, r2
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003698:	661a      	str	r2, [r3, #96]	@ 0x60
 800369a:	e031      	b.n	8003700 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d11d      	bne.n	80036e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036b2:	0c1b      	lsrs	r3, r3, #16
 80036b4:	431a      	orrs	r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	3301      	adds	r3, #1
 80036c0:	029a      	lsls	r2, r3, #10
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036d4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80036de:	e00f      	b.n	8003700 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a58      	ldr	r2, [pc, #352]	@ (8003848 <HAL_SD_GetCardCSD+0x344>)
 80036e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e09d      	b.n	800383c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003704:	0b9b      	lsrs	r3, r3, #14
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	b2da      	uxtb	r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003716:	09db      	lsrs	r3, r3, #7
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800371e:	b2da      	uxtb	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800372e:	b2da      	uxtb	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	0fdb      	lsrs	r3, r3, #31
 800373a:	b2da      	uxtb	r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003744:	0f5b      	lsrs	r3, r3, #29
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	b2da      	uxtb	r2, r3
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003756:	0e9b      	lsrs	r3, r3, #26
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	b2da      	uxtb	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003768:	0d9b      	lsrs	r3, r3, #22
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	b2da      	uxtb	r2, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	0d5b      	lsrs	r3, r3, #21
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	b2da      	uxtb	r2, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	0c1b      	lsrs	r3, r3, #16
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	0bdb      	lsrs	r3, r3, #15
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037be:	0b9b      	lsrs	r3, r3, #14
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d2:	0b5b      	lsrs	r3, r3, #13
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	0b1b      	lsrs	r3, r3, #12
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fa:	0a9b      	lsrs	r3, r3, #10
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	b2da      	uxtb	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	b2da      	uxtb	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800382a:	b2da      	uxtb	r2, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	004005ff 	.word	0x004005ff

0800384c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f970 	bl	8003b9c <SD_SendStatus>
 80038bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	0a5b      	lsrs	r3, r3, #9
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80038da:	693b      	ldr	r3, [r7, #16]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80038e4:	b5b0      	push	{r4, r5, r7, lr}
 80038e6:	b094      	sub	sp, #80	@ 0x50
 80038e8:	af04      	add	r7, sp, #16
 80038ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80038ec:	2301      	movs	r3, #1
 80038ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f9d0 	bl	8003c9a <SDIO_GetPowerState>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003900:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003904:	e0b8      	b.n	8003a78 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	2b03      	cmp	r3, #3
 800390c:	d02f      	beq.n	800396e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fbb7 	bl	8004086 <SDMMC_CmdSendCID>
 8003918:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800391a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <SD_InitCard+0x40>
    {
      return errorstate;
 8003920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003922:	e0a9      	b.n	8003a78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f9fa 	bl	8003d24 <SDIO_GetResponse>
 8003930:	4602      	mov	r2, r0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2104      	movs	r1, #4
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f9f1 	bl	8003d24 <SDIO_GetResponse>
 8003942:	4602      	mov	r2, r0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2108      	movs	r1, #8
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f9e8 	bl	8003d24 <SDIO_GetResponse>
 8003954:	4602      	mov	r2, r0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	210c      	movs	r1, #12
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f9df 	bl	8003d24 <SDIO_GetResponse>
 8003966:	4602      	mov	r2, r0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	2b03      	cmp	r3, #3
 8003974:	d00d      	beq.n	8003992 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f107 020e 	add.w	r2, r7, #14
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fbbd 	bl	8004100 <SDMMC_CmdSetRelAdd>
 8003986:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <SD_InitCard+0xae>
    {
      return errorstate;
 800398e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003990:	e072      	b.n	8003a78 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	2b03      	cmp	r3, #3
 8003998:	d036      	beq.n	8003a08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800399a:	89fb      	ldrh	r3, [r7, #14]
 800399c:	461a      	mov	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039aa:	041b      	lsls	r3, r3, #16
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 fb87 	bl	80040c2 <SDMMC_CmdSendCSD>
 80039b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80039bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039be:	e05b      	b.n	8003a78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 f9ac 	bl	8003d24 <SDIO_GetResponse>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2104      	movs	r1, #4
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 f9a3 	bl	8003d24 <SDIO_GetResponse>
 80039de:	4602      	mov	r2, r0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2108      	movs	r1, #8
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f99a 	bl	8003d24 <SDIO_GetResponse>
 80039f0:	4602      	mov	r2, r0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	210c      	movs	r1, #12
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f991 	bl	8003d24 <SDIO_GetResponse>
 8003a02:	4602      	mov	r2, r0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2104      	movs	r1, #4
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f988 	bl	8003d24 <SDIO_GetResponse>
 8003a14:	4603      	mov	r3, r0
 8003a16:	0d1a      	lsrs	r2, r3, #20
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a1c:	f107 0310 	add.w	r3, r7, #16
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fd6e 	bl	8003504 <HAL_SD_GetCardCSD>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a2e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003a32:	e021      	b.n	8003a78 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6819      	ldr	r1, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	2200      	movs	r2, #0
 8003a40:	461c      	mov	r4, r3
 8003a42:	4615      	mov	r5, r2
 8003a44:	4622      	mov	r2, r4
 8003a46:	462b      	mov	r3, r5
 8003a48:	4608      	mov	r0, r1
 8003a4a:	f000 fa77 	bl	8003f3c <SDMMC_CmdSelDesel>
 8003a4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <SD_InitCard+0x176>
  {
    return errorstate;
 8003a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a58:	e00e      	b.n	8003a78 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681d      	ldr	r5, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	466c      	mov	r4, sp
 8003a62:	f103 0210 	add.w	r2, r3, #16
 8003a66:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a70:	4628      	mov	r0, r5
 8003a72:	f000 f8bb 	bl	8003bec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3740      	adds	r7, #64	@ 0x40
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bdb0      	pop	{r4, r5, r7, pc}

08003a80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fa72 	bl	8003f82 <SDMMC_CmdGoIdleState>
 8003a9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <SD_PowerON+0x2a>
  {
    return errorstate;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	e072      	b.n	8003b90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fa85 	bl	8003fbe <SDMMC_CmdOperCond>
 8003ab4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00d      	beq.n	8003ad8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fa5b 	bl	8003f82 <SDMMC_CmdGoIdleState>
 8003acc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <SD_PowerON+0x5e>
    {
      return errorstate;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	e05b      	b.n	8003b90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d137      	bne.n	8003b56 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fa85 	bl	8003ffc <SDMMC_CmdAppCommand>
 8003af2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d02d      	beq.n	8003b56 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003afa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003afe:	e047      	b.n	8003b90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa78 	bl	8003ffc <SDMMC_CmdAppCommand>
 8003b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	e03b      	b.n	8003b90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	491e      	ldr	r1, [pc, #120]	@ (8003b98 <SD_PowerON+0x118>)
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fa8e 	bl	8004040 <SDMMC_CmdAppOperCommand>
 8003b24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003b30:	e02e      	b.n	8003b90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f8f3 	bl	8003d24 <SDIO_GetResponse>
 8003b3e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	0fdb      	lsrs	r3, r3, #31
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <SD_PowerON+0xcc>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <SD_PowerON+0xce>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]

    count++;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	3301      	adds	r3, #1
 8003b54:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d802      	bhi.n	8003b66 <SD_PowerON+0xe6>
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0cc      	beq.n	8003b00 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d902      	bls.n	8003b76 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003b70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b74:	e00c      	b.n	8003b90 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b86:	e002      	b.n	8003b8e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	c1100000 	.word	0xc1100000

08003b9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003bac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bb0:	e018      	b.n	8003be4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f000 fabf 	bl	8004142 <SDMMC_CmdSendStatus>
 8003bc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	e009      	b.n	8003be4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f8a4 	bl	8003d24 <SDIO_GetResponse>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003bec:	b084      	sub	sp, #16
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	f107 001c 	add.w	r0, r7, #28
 8003bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003c02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003c04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003c06:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8003c0a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003c0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003c12:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003c16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8003c26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	b004      	add	sp, #16
 8003c40:	4770      	bx	lr

08003c42 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cd4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003cda:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003ce0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003cf0:	f023 030f 	bic.w	r3, r3, #15
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	b2db      	uxtb	r3, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3314      	adds	r3, #20
 8003d32:	461a      	mov	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	4413      	add	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
}  
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d70:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003d76:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003d7c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d88:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0

}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b088      	sub	sp, #32
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003db0:	2310      	movs	r3, #16
 8003db2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003db4:	2340      	movs	r3, #64	@ 0x40
 8003db6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dc2:	f107 0308 	add.w	r3, r7, #8
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ff74 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd2:	2110      	movs	r1, #16
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f9d7 	bl	8004188 <SDMMC_GetCmdResp1>
 8003dda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b088      	sub	sp, #32
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003df4:	2311      	movs	r3, #17
 8003df6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003df8:	2340      	movs	r3, #64	@ 0x40
 8003dfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e06:	f107 0308 	add.w	r3, r7, #8
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff52 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e16:	2111      	movs	r1, #17
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f9b5 	bl	8004188 <SDMMC_GetCmdResp1>
 8003e1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e20:	69fb      	ldr	r3, [r7, #28]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b088      	sub	sp, #32
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003e38:	2312      	movs	r3, #18
 8003e3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e3c:	2340      	movs	r3, #64	@ 0x40
 8003e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e4a:	f107 0308 	add.w	r3, r7, #8
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff30 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5a:	2112      	movs	r1, #18
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f993 	bl	8004188 <SDMMC_GetCmdResp1>
 8003e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e64:	69fb      	ldr	r3, [r7, #28]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b088      	sub	sp, #32
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003e7c:	2318      	movs	r3, #24
 8003e7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e80:	2340      	movs	r3, #64	@ 0x40
 8003e82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e8e:	f107 0308 	add.w	r3, r7, #8
 8003e92:	4619      	mov	r1, r3
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff0e 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9e:	2118      	movs	r1, #24
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f971 	bl	8004188 <SDMMC_GetCmdResp1>
 8003ea6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b088      	sub	sp, #32
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003ec0:	2319      	movs	r3, #25
 8003ec2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ec4:	2340      	movs	r3, #64	@ 0x40
 8003ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ed0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ed2:	f107 0308 	add.w	r3, r7, #8
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff feec 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee2:	2119      	movs	r1, #25
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f94f 	bl	8004188 <SDMMC_GetCmdResp1>
 8003eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003eec:	69fb      	ldr	r3, [r7, #28]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003f04:	230c      	movs	r3, #12
 8003f06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f08:	2340      	movs	r3, #64	@ 0x40
 8003f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f16:	f107 0308 	add.w	r3, r7, #8
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff feca 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003f22:	4a05      	ldr	r2, [pc, #20]	@ (8003f38 <SDMMC_CmdStopTransfer+0x40>)
 8003f24:	210c      	movs	r1, #12
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f92e 	bl	8004188 <SDMMC_GetCmdResp1>
 8003f2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	05f5e100 	.word	0x05f5e100

08003f3c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	@ 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003f4c:	2307      	movs	r3, #7
 8003f4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f50:	2340      	movs	r3, #64	@ 0x40
 8003f52:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f5c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f5e:	f107 0310 	add.w	r3, r7, #16
 8003f62:	4619      	mov	r1, r3
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff fea6 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6e:	2107      	movs	r1, #7
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f909 	bl	8004188 <SDMMC_GetCmdResp1>
 8003f76:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3728      	adds	r7, #40	@ 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b088      	sub	sp, #32
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003f92:	2300      	movs	r3, #0
 8003f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fa0:	f107 0308 	add.w	r3, r7, #8
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fe85 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fb23 	bl	80045f8 <SDMMC_GetCmdError>
 8003fb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003fc6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8003fca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003fcc:	2308      	movs	r3, #8
 8003fce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fd0:	2340      	movs	r3, #64	@ 0x40
 8003fd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fde:	f107 0308 	add.w	r3, r7, #8
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fe66 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fab6 	bl	800455c <SDMMC_GetCmdResp7>
 8003ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800400a:	2337      	movs	r3, #55	@ 0x37
 800400c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800400e:	2340      	movs	r3, #64	@ 0x40
 8004010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800401a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800401c:	f107 0308 	add.w	r3, r7, #8
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fe47 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402c:	2137      	movs	r1, #55	@ 0x37
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8aa 	bl	8004188 <SDMMC_GetCmdResp1>
 8004034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004036:	69fb      	ldr	r3, [r7, #28]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004050:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004056:	2329      	movs	r3, #41	@ 0x29
 8004058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800405a:	2340      	movs	r3, #64	@ 0x40
 800405c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004066:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff fe21 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f9bd 	bl	80043f4 <SDMMC_GetCmdResp3>
 800407a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800407c:	69fb      	ldr	r3, [r7, #28]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b088      	sub	sp, #32
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004092:	2302      	movs	r3, #2
 8004094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004096:	23c0      	movs	r3, #192	@ 0xc0
 8004098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800409e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040a4:	f107 0308 	add.w	r3, r7, #8
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fe03 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f957 	bl	8004364 <SDMMC_GetCmdResp2>
 80040b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040b8:	69fb      	ldr	r3, [r7, #28]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b088      	sub	sp, #32
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80040d0:	2309      	movs	r3, #9
 80040d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80040d4:	23c0      	movs	r3, #192	@ 0xc0
 80040d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040e2:	f107 0308 	add.w	r3, r7, #8
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff fde4 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f938 	bl	8004364 <SDMMC_GetCmdResp2>
 80040f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040f6:	69fb      	ldr	r3, [r7, #28]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800410e:	2303      	movs	r3, #3
 8004110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004112:	2340      	movs	r3, #64	@ 0x40
 8004114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800411a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800411e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	4619      	mov	r1, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff fdc5 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	2103      	movs	r1, #3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f99d 	bl	8004470 <SDMMC_GetCmdResp6>
 8004136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004138:	69fb      	ldr	r3, [r7, #28]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b088      	sub	sp, #32
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004150:	230d      	movs	r3, #13
 8004152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004154:	2340      	movs	r3, #64	@ 0x40
 8004156:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800415c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004160:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004162:	f107 0308 	add.w	r3, r7, #8
 8004166:	4619      	mov	r1, r3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fda4 	bl	8003cb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800416e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004172:	210d      	movs	r1, #13
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f807 	bl	8004188 <SDMMC_GetCmdResp1>
 800417a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800417c:	69fb      	ldr	r3, [r7, #28]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	460b      	mov	r3, r1
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004196:	4b70      	ldr	r3, [pc, #448]	@ (8004358 <SDMMC_GetCmdResp1+0x1d0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a70      	ldr	r2, [pc, #448]	@ (800435c <SDMMC_GetCmdResp1+0x1d4>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	0a5a      	lsrs	r2, r3, #9
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	fb02 f303 	mul.w	r3, r2, r3
 80041a8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	1e5a      	subs	r2, r3, #1
 80041ae:	61fa      	str	r2, [r7, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80041b8:	e0c9      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041be:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0ef      	beq.n	80041aa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1ea      	bne.n	80041aa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2204      	movs	r2, #4
 80041e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041e6:	2304      	movs	r3, #4
 80041e8:	e0b1      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0a6      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	22c5      	movs	r2, #197	@ 0xc5
 8004204:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff fd7f 	bl	8003d0a <SDIO_GetCommandResponse>
 800420c:	4603      	mov	r3, r0
 800420e:	461a      	mov	r2, r3
 8004210:	7afb      	ldrb	r3, [r7, #11]
 8004212:	4293      	cmp	r3, r2
 8004214:	d001      	beq.n	800421a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004216:	2301      	movs	r3, #1
 8004218:	e099      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800421a:	2100      	movs	r1, #0
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff fd81 	bl	8003d24 <SDIO_GetResponse>
 8004222:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4b4e      	ldr	r3, [pc, #312]	@ (8004360 <SDMMC_GetCmdResp1+0x1d8>)
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800422e:	2300      	movs	r3, #0
 8004230:	e08d      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	da02      	bge.n	800423e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800423c:	e087      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004248:	2340      	movs	r3, #64	@ 0x40
 800424a:	e080      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004256:	2380      	movs	r3, #128	@ 0x80
 8004258:	e079      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004268:	e071      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004274:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004278:	e069      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004288:	e061      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004294:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004298:	e059      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80042a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042a8:	e051      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80042b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042b8:	e049      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80042c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80042c8:	e041      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80042d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042d8:	e039      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80042e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042e8:	e031      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80042f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80042f8:	e029      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004304:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004308:	e021      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004314:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004318:	e019      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004324:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004328:	e011      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004334:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004338:	e009      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004344:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004348:	e001      	b.n	800434e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800434a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000000 	.word	0x20000000
 800435c:	10624dd3 	.word	0x10624dd3
 8004360:	fdffe008 	.word	0xfdffe008

08004364 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800436c:	4b1f      	ldr	r3, [pc, #124]	@ (80043ec <SDMMC_GetCmdResp2+0x88>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1f      	ldr	r2, [pc, #124]	@ (80043f0 <SDMMC_GetCmdResp2+0x8c>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	0a5b      	lsrs	r3, r3, #9
 8004378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1e5a      	subs	r2, r3, #1
 8004386:	60fa      	str	r2, [r7, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800438c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004390:	e026      	b.n	80043e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004396:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0ef      	beq.n	8004382 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1ea      	bne.n	8004382 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2204      	movs	r2, #4
 80043bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043be:	2304      	movs	r3, #4
 80043c0:	e00e      	b.n	80043e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e003      	b.n	80043e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	22c5      	movs	r2, #197	@ 0xc5
 80043dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	20000000 	.word	0x20000000
 80043f0:	10624dd3 	.word	0x10624dd3

080043f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <SDMMC_GetCmdResp3+0x74>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1a      	ldr	r2, [pc, #104]	@ (800446c <SDMMC_GetCmdResp3+0x78>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0a5b      	lsrs	r3, r3, #9
 8004408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1e5a      	subs	r2, r3, #1
 8004416:	60fa      	str	r2, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800441c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004420:	e01b      	b.n	800445a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004426:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0ef      	beq.n	8004412 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ea      	bne.n	8004412 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2204      	movs	r2, #4
 800444c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800444e:	2304      	movs	r3, #4
 8004450:	e003      	b.n	800445a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	22c5      	movs	r2, #197	@ 0xc5
 8004456:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000000 	.word	0x20000000
 800446c:	10624dd3 	.word	0x10624dd3

08004470 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	460b      	mov	r3, r1
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800447e:	4b35      	ldr	r3, [pc, #212]	@ (8004554 <SDMMC_GetCmdResp6+0xe4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a35      	ldr	r2, [pc, #212]	@ (8004558 <SDMMC_GetCmdResp6+0xe8>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	0a5b      	lsrs	r3, r3, #9
 800448a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	61fa      	str	r2, [r7, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800449e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80044a2:	e052      	b.n	800454a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ef      	beq.n	8004494 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ea      	bne.n	8004494 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2204      	movs	r2, #4
 80044ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044d0:	2304      	movs	r3, #4
 80044d2:	e03a      	b.n	800454a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e02f      	b.n	800454a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f7ff fc0d 	bl	8003d0a <SDIO_GetCommandResponse>
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	7afb      	ldrb	r3, [r7, #11]
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d001      	beq.n	80044fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e025      	b.n	800454a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	22c5      	movs	r2, #197	@ 0xc5
 8004502:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004504:	2100      	movs	r1, #0
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff fc0c 	bl	8003d24 <SDIO_GetResponse>
 800450c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004522:	2300      	movs	r3, #0
 8004524:	e011      	b.n	800454a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004530:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004534:	e009      	b.n	800454a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004544:	e001      	b.n	800454a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004546:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000000 	.word	0x20000000
 8004558:	10624dd3 	.word	0x10624dd3

0800455c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004564:	4b22      	ldr	r3, [pc, #136]	@ (80045f0 <SDMMC_GetCmdResp7+0x94>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a22      	ldr	r2, [pc, #136]	@ (80045f4 <SDMMC_GetCmdResp7+0x98>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	0a5b      	lsrs	r3, r3, #9
 8004570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004574:	fb02 f303 	mul.w	r3, r2, r3
 8004578:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1e5a      	subs	r2, r3, #1
 800457e:	60fa      	str	r2, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004584:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004588:	e02c      	b.n	80045e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0ef      	beq.n	800457a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ea      	bne.n	800457a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2204      	movs	r2, #4
 80045b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045b6:	2304      	movs	r3, #4
 80045b8:	e014      	b.n	80045e4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e009      	b.n	80045e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2240      	movs	r2, #64	@ 0x40
 80045e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80045e2:	2300      	movs	r3, #0
  
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20000000 	.word	0x20000000
 80045f4:	10624dd3 	.word	0x10624dd3

080045f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004600:	4b11      	ldr	r3, [pc, #68]	@ (8004648 <SDMMC_GetCmdError+0x50>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a11      	ldr	r2, [pc, #68]	@ (800464c <SDMMC_GetCmdError+0x54>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	0a5b      	lsrs	r3, r3, #9
 800460c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1e5a      	subs	r2, r3, #1
 800461a:	60fa      	str	r2, [r7, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004620:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004624:	e009      	b.n	800463a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f1      	beq.n	8004616 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	22c5      	movs	r2, #197	@ 0xc5
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000000 	.word	0x20000000
 800464c:	10624dd3 	.word	0x10624dd3

08004650 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004654:	4904      	ldr	r1, [pc, #16]	@ (8004668 <MX_FATFS_Init+0x18>)
 8004656:	4805      	ldr	r0, [pc, #20]	@ (800466c <MX_FATFS_Init+0x1c>)
 8004658:	f003 f9a8 	bl	80079ac <FATFS_LinkDriver>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	4b03      	ldr	r3, [pc, #12]	@ (8004670 <MX_FATFS_Init+0x20>)
 8004662:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004664:	bf00      	nop
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20002240 	.word	0x20002240
 800466c:	08008d14 	.word	0x08008d14
 8004670:	2000223c 	.word	0x2000223c

08004674 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004678:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800467a:	4618      	mov	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800468e:	f000 f86b 	bl	8004768 <BSP_SD_IsDetected>
 8004692:	4603      	mov	r3, r0
 8004694:	2b01      	cmp	r3, #1
 8004696:	d001      	beq.n	800469c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e005      	b.n	80046a8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800469c:	4804      	ldr	r0, [pc, #16]	@ (80046b0 <BSP_SD_Init+0x2c>)
 800469e:	f7fe fb1d 	bl	8002cdc <HAL_SD_Init>
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80046a6:	79fb      	ldrb	r3, [r7, #7]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000084 	.word	0x20000084

080046b4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	4806      	ldr	r0, [pc, #24]	@ (80046ec <BSP_SD_ReadBlocks+0x38>)
 80046d2:	f7fe fbb3 	bl	8002e3c <HAL_SD_ReadBlocks>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000084 	.word	0x20000084

080046f0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	4806      	ldr	r0, [pc, #24]	@ (8004728 <BSP_SD_WriteBlocks+0x38>)
 800470e:	f7fe fd73 	bl	80031f8 <HAL_SD_WriteBlocks>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800471c:	7dfb      	ldrb	r3, [r7, #23]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000084 	.word	0x20000084

0800472c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004730:	4805      	ldr	r0, [pc, #20]	@ (8004748 <BSP_SD_GetCardState+0x1c>)
 8004732:	f7ff f8b7 	bl	80038a4 <HAL_SD_GetCardState>
 8004736:	4603      	mov	r3, r0
 8004738:	2b04      	cmp	r3, #4
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
}
 8004742:	4618      	mov	r0, r3
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000084 	.word	0x20000084

0800474c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4803      	ldr	r0, [pc, #12]	@ (8004764 <BSP_SD_GetCardInfo+0x18>)
 8004758:	f7ff f878 	bl	800384c <HAL_SD_GetCardInfo>
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000084 	.word	0x20000084

08004768 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800476e:	2301      	movs	r3, #1
 8004770:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004772:	f000 f80b 	bl	800478c <BSP_PlatformIsDetected>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800477c:	2300      	movs	r3, #0
 800477e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	b2db      	uxtb	r3, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004792:	2301      	movs	r3, #1
 8004794:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004796:	2140      	movs	r1, #64	@ 0x40
 8004798:	4806      	ldr	r0, [pc, #24]	@ (80047b4 <BSP_PlatformIsDetected+0x28>)
 800479a:	f7fd f9df 	bl	8001b5c <HAL_GPIO_ReadPin>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80047a4:	2300      	movs	r3, #0
 80047a6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80047a8:	79fb      	ldrb	r3, [r7, #7]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40020800 	.word	0x40020800

080047b8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <SD_CheckStatus+0x38>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80047c8:	f7ff ffb0 	bl	800472c <BSP_SD_GetCardState>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80047d2:	4b07      	ldr	r3, [pc, #28]	@ (80047f0 <SD_CheckStatus+0x38>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4b04      	ldr	r3, [pc, #16]	@ (80047f0 <SD_CheckStatus+0x38>)
 80047e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80047e2:	4b03      	ldr	r3, [pc, #12]	@ (80047f0 <SD_CheckStatus+0x38>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	b2db      	uxtb	r3, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000009 	.word	0x20000009

080047f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80047fe:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <SD_initialize+0x38>)
 8004800:	2201      	movs	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004804:	f7ff ff3e 	bl	8004684 <BSP_SD_Init>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d107      	bne.n	800481e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff ffd1 	bl	80047b8 <SD_CheckStatus>
 8004816:	4603      	mov	r3, r0
 8004818:	461a      	mov	r2, r3
 800481a:	4b04      	ldr	r3, [pc, #16]	@ (800482c <SD_initialize+0x38>)
 800481c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800481e:	4b03      	ldr	r3, [pc, #12]	@ (800482c <SD_initialize+0x38>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	b2db      	uxtb	r3, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000009 	.word	0x20000009

08004830 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ffbb 	bl	80047b8 <SD_CheckStatus>
 8004842:	4603      	mov	r3, r0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4603      	mov	r3, r0
 800485a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004860:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	68b8      	ldr	r0, [r7, #8]
 800486a:	f7ff ff23 	bl	80046b4 <BSP_SD_ReadBlocks>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004874:	bf00      	nop
 8004876:	f7ff ff59 	bl	800472c <BSP_SD_GetCardState>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1fa      	bne.n	8004876 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	4603      	mov	r3, r0
 800489c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	68b8      	ldr	r0, [r7, #8]
 80048ac:	f7ff ff20 	bl	80046f0 <BSP_SD_WriteBlocks>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80048b6:	bf00      	nop
 80048b8:	f7ff ff38 	bl	800472c <BSP_SD_GetCardState>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1fa      	bne.n	80048b8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	@ 0x30
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	603a      	str	r2, [r7, #0]
 80048da:	71fb      	strb	r3, [r7, #7]
 80048dc:	460b      	mov	r3, r1
 80048de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80048e6:	4b25      	ldr	r3, [pc, #148]	@ (800497c <SD_ioctl+0xac>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <SD_ioctl+0x28>
 80048f4:	2303      	movs	r3, #3
 80048f6:	e03c      	b.n	8004972 <SD_ioctl+0xa2>

  switch (cmd)
 80048f8:	79bb      	ldrb	r3, [r7, #6]
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d834      	bhi.n	8004968 <SD_ioctl+0x98>
 80048fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004904 <SD_ioctl+0x34>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004915 	.word	0x08004915
 8004908:	0800491d 	.word	0x0800491d
 800490c:	08004935 	.word	0x08004935
 8004910:	0800494f 	.word	0x0800494f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800491a:	e028      	b.n	800496e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800491c:	f107 030c 	add.w	r3, r7, #12
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff13 	bl	800474c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004932:	e01c      	b.n	800496e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004934:	f107 030c 	add.w	r3, r7, #12
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff07 	bl	800474c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800493e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004940:	b29a      	uxth	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800494c:	e00f      	b.n	800496e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800494e:	f107 030c 	add.w	r3, r7, #12
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fefa 	bl	800474c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495a:	0a5a      	lsrs	r2, r3, #9
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004966:	e002      	b.n	800496e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004968:	2304      	movs	r3, #4
 800496a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800496e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004972:	4618      	mov	r0, r3
 8004974:	3730      	adds	r7, #48	@ 0x30
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000009 	.word	0x20000009

08004980 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	4a08      	ldr	r2, [pc, #32]	@ (80049b0 <disk_status+0x30>)
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	79fa      	ldrb	r2, [r7, #7]
 8004998:	4905      	ldr	r1, [pc, #20]	@ (80049b0 <disk_status+0x30>)
 800499a:	440a      	add	r2, r1
 800499c:	7a12      	ldrb	r2, [r2, #8]
 800499e:	4610      	mov	r0, r2
 80049a0:	4798      	blx	r3
 80049a2:	4603      	mov	r3, r0
 80049a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	2000226c 	.word	0x2000226c

080049b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004a00 <disk_initialize+0x4c>)
 80049c6:	5cd3      	ldrb	r3, [r2, r3]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d114      	bne.n	80049f6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004a00 <disk_initialize+0x4c>)
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	79fa      	ldrb	r2, [r7, #7]
 80049da:	4909      	ldr	r1, [pc, #36]	@ (8004a00 <disk_initialize+0x4c>)
 80049dc:	440a      	add	r2, r1
 80049de:	7a12      	ldrb	r2, [r2, #8]
 80049e0:	4610      	mov	r0, r2
 80049e2:	4798      	blx	r3
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	4a03      	ldr	r2, [pc, #12]	@ (8004a00 <disk_initialize+0x4c>)
 80049f2:	2101      	movs	r1, #1
 80049f4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	2000226c 	.word	0x2000226c

08004a04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	4a0a      	ldr	r2, [pc, #40]	@ (8004a40 <disk_read+0x3c>)
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	689c      	ldr	r4, [r3, #8]
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	4a07      	ldr	r2, [pc, #28]	@ (8004a40 <disk_read+0x3c>)
 8004a24:	4413      	add	r3, r2
 8004a26:	7a18      	ldrb	r0, [r3, #8]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	47a0      	blx	r4
 8004a30:	4603      	mov	r3, r0
 8004a32:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2000226c 	.word	0x2000226c

08004a44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	4603      	mov	r3, r0
 8004a52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	4a0a      	ldr	r2, [pc, #40]	@ (8004a80 <disk_write+0x3c>)
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	68dc      	ldr	r4, [r3, #12]
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	4a07      	ldr	r2, [pc, #28]	@ (8004a80 <disk_write+0x3c>)
 8004a64:	4413      	add	r3, r2
 8004a66:	7a18      	ldrb	r0, [r3, #8]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	47a0      	blx	r4
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd90      	pop	{r4, r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	2000226c 	.word	0x2000226c

08004a84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	603a      	str	r2, [r7, #0]
 8004a8e:	71fb      	strb	r3, [r7, #7]
 8004a90:	460b      	mov	r3, r1
 8004a92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	4a09      	ldr	r2, [pc, #36]	@ (8004abc <disk_ioctl+0x38>)
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	79fa      	ldrb	r2, [r7, #7]
 8004aa2:	4906      	ldr	r1, [pc, #24]	@ (8004abc <disk_ioctl+0x38>)
 8004aa4:	440a      	add	r2, r1
 8004aa6:	7a10      	ldrb	r0, [r2, #8]
 8004aa8:	79b9      	ldrb	r1, [r7, #6]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	4798      	blx	r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  return res;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	2000226c 	.word	0x2000226c

08004ac0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3301      	adds	r3, #1
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ad0:	89fb      	ldrh	r3, [r7, #14]
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	b21a      	sxth	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b21b      	sxth	r3, r3
 8004ae0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004ae2:	89fb      	ldrh	r3, [r7, #14]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3303      	adds	r3, #3
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	3202      	adds	r2, #2
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	3201      	adds	r2, #1
 8004b16:	7812      	ldrb	r2, [r2, #0]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
	return rv;
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	887a      	ldrh	r2, [r7, #2]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	887b      	ldrh	r3, [r7, #2]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	887a      	ldrh	r2, [r7, #2]
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	607a      	str	r2, [r7, #4]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	1c53      	adds	r3, r2, #1
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	6179      	str	r1, [r7, #20]
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	607b      	str	r3, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f1      	bne.n	8004bde <mem_cpy+0x1a>
	}
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004c06:	b480      	push	{r7}
 8004c08:	b087      	sub	sp, #28
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	617a      	str	r2, [r7, #20]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f3      	bne.n	8004c16 <mem_set+0x10>
}
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	@ 0x24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	61fb      	str	r3, [r7, #28]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	61fa      	str	r2, [r7, #28]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	61ba      	str	r2, [r7, #24]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	1acb      	subs	r3, r1, r3
 8004c68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	607b      	str	r3, [r7, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <mem_cmp+0x40>
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0eb      	beq.n	8004c54 <mem_cmp+0x18>

	return r;
 8004c7c:	697b      	ldr	r3, [r7, #20]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004c94:	e002      	b.n	8004c9c <chk_chr+0x12>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <chk_chr+0x26>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d1f2      	bne.n	8004c96 <chk_chr+0xc>
	return *str;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e029      	b.n	8004d28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004cd4:	4a27      	ldr	r2, [pc, #156]	@ (8004d74 <chk_lock+0xb4>)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	4413      	add	r3, r2
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01d      	beq.n	8004d1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ce2:	4a24      	ldr	r2, [pc, #144]	@ (8004d74 <chk_lock+0xb4>)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	4413      	add	r3, r2
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d116      	bne.n	8004d22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d74 <chk_lock+0xb4>)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d10c      	bne.n	8004d22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d08:	4a1a      	ldr	r2, [pc, #104]	@ (8004d74 <chk_lock+0xb4>)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	4413      	add	r3, r2
 8004d10:	3308      	adds	r3, #8
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d102      	bne.n	8004d22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d1c:	e007      	b.n	8004d2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3301      	adds	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d9d2      	bls.n	8004cd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d109      	bne.n	8004d48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <chk_lock+0x80>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d101      	bne.n	8004d44 <chk_lock+0x84>
 8004d40:	2300      	movs	r3, #0
 8004d42:	e010      	b.n	8004d66 <chk_lock+0xa6>
 8004d44:	2312      	movs	r3, #18
 8004d46:	e00e      	b.n	8004d66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d108      	bne.n	8004d60 <chk_lock+0xa0>
 8004d4e:	4a09      	ldr	r2, [pc, #36]	@ (8004d74 <chk_lock+0xb4>)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	4413      	add	r3, r2
 8004d56:	330c      	adds	r3, #12
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d5e:	d101      	bne.n	8004d64 <chk_lock+0xa4>
 8004d60:	2310      	movs	r3, #16
 8004d62:	e000      	b.n	8004d66 <chk_lock+0xa6>
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000224c 	.word	0x2000224c

08004d78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	e002      	b.n	8004d8a <enq_lock+0x12>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3301      	adds	r3, #1
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d806      	bhi.n	8004d9e <enq_lock+0x26>
 8004d90:	4a09      	ldr	r2, [pc, #36]	@ (8004db8 <enq_lock+0x40>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	4413      	add	r3, r2
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f2      	bne.n	8004d84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	2000224c 	.word	0x2000224c

08004dbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	e01f      	b.n	8004e0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004dcc:	4a41      	ldr	r2, [pc, #260]	@ (8004ed4 <inc_lock+0x118>)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	4413      	add	r3, r2
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d113      	bne.n	8004e06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004dde:	4a3d      	ldr	r2, [pc, #244]	@ (8004ed4 <inc_lock+0x118>)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	4413      	add	r3, r2
 8004de6:	3304      	adds	r3, #4
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d109      	bne.n	8004e06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004df2:	4a38      	ldr	r2, [pc, #224]	@ (8004ed4 <inc_lock+0x118>)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	4413      	add	r3, r2
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d006      	beq.n	8004e14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d9dc      	bls.n	8004dcc <inc_lock+0x10>
 8004e12:	e000      	b.n	8004e16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004e14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d132      	bne.n	8004e82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e002      	b.n	8004e28 <inc_lock+0x6c>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d806      	bhi.n	8004e3c <inc_lock+0x80>
 8004e2e:	4a29      	ldr	r2, [pc, #164]	@ (8004ed4 <inc_lock+0x118>)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	4413      	add	r3, r2
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f2      	bne.n	8004e22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d101      	bne.n	8004e46 <inc_lock+0x8a>
 8004e42:	2300      	movs	r3, #0
 8004e44:	e040      	b.n	8004ec8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4922      	ldr	r1, [pc, #136]	@ (8004ed4 <inc_lock+0x118>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	440b      	add	r3, r1
 8004e52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	491e      	ldr	r1, [pc, #120]	@ (8004ed4 <inc_lock+0x118>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	440b      	add	r3, r1
 8004e60:	3304      	adds	r3, #4
 8004e62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	491a      	ldr	r1, [pc, #104]	@ (8004ed4 <inc_lock+0x118>)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	440b      	add	r3, r1
 8004e70:	3308      	adds	r3, #8
 8004e72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004e74:	4a17      	ldr	r2, [pc, #92]	@ (8004ed4 <inc_lock+0x118>)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	4413      	add	r3, r2
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	2200      	movs	r2, #0
 8004e80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d009      	beq.n	8004e9c <inc_lock+0xe0>
 8004e88:	4a12      	ldr	r2, [pc, #72]	@ (8004ed4 <inc_lock+0x118>)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	4413      	add	r3, r2
 8004e90:	330c      	adds	r3, #12
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <inc_lock+0xe0>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e015      	b.n	8004ec8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d108      	bne.n	8004eb4 <inc_lock+0xf8>
 8004ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ed4 <inc_lock+0x118>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	4413      	add	r3, r2
 8004eaa:	330c      	adds	r3, #12
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	e001      	b.n	8004eb8 <inc_lock+0xfc>
 8004eb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004eb8:	4906      	ldr	r1, [pc, #24]	@ (8004ed4 <inc_lock+0x118>)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	440b      	add	r3, r1
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3301      	adds	r3, #1
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	2000224c 	.word	0x2000224c

08004ed8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d825      	bhi.n	8004f38 <dec_lock+0x60>
		n = Files[i].ctr;
 8004eec:	4a17      	ldr	r2, [pc, #92]	@ (8004f4c <dec_lock+0x74>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	4413      	add	r3, r2
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004efa:	89fb      	ldrh	r3, [r7, #14]
 8004efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f00:	d101      	bne.n	8004f06 <dec_lock+0x2e>
 8004f02:	2300      	movs	r3, #0
 8004f04:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004f06:	89fb      	ldrh	r3, [r7, #14]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <dec_lock+0x3a>
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004f12:	4a0e      	ldr	r2, [pc, #56]	@ (8004f4c <dec_lock+0x74>)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	4413      	add	r3, r2
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	89fa      	ldrh	r2, [r7, #14]
 8004f1e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004f20:	89fb      	ldrh	r3, [r7, #14]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d105      	bne.n	8004f32 <dec_lock+0x5a>
 8004f26:	4a09      	ldr	r2, [pc, #36]	@ (8004f4c <dec_lock+0x74>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	4413      	add	r3, r2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	737b      	strb	r3, [r7, #13]
 8004f36:	e001      	b.n	8004f3c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004f38:	2302      	movs	r3, #2
 8004f3a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004f3c:	7b7b      	ldrb	r3, [r7, #13]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	2000224c 	.word	0x2000224c

08004f50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e010      	b.n	8004f80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f94 <clear_lock+0x44>)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	4413      	add	r3, r2
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d105      	bne.n	8004f7a <clear_lock+0x2a>
 8004f6e:	4a09      	ldr	r2, [pc, #36]	@ (8004f94 <clear_lock+0x44>)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	4413      	add	r3, r2
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d9eb      	bls.n	8004f5e <clear_lock+0xe>
	}
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	2000224c 	.word	0x2000224c

08004f98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	78db      	ldrb	r3, [r3, #3]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d034      	beq.n	8005016 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	7858      	ldrb	r0, [r3, #1]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	f7ff fd40 	bl	8004a44 <disk_write>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	e022      	b.n	8005016 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	1ad2      	subs	r2, r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d217      	bcs.n	8005016 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	789b      	ldrb	r3, [r3, #2]
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	e010      	b.n	8005010 <sync_window+0x78>
					wsect += fs->fsize;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	7858      	ldrb	r0, [r3, #1]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005002:	2301      	movs	r3, #1
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	f7ff fd1d 	bl	8004a44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	3b01      	subs	r3, #1
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d8eb      	bhi.n	8004fee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005016:	7bfb      	ldrb	r3, [r7, #15]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d01b      	beq.n	8005070 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff ffad 	bl	8004f98 <sync_window>
 800503e:	4603      	mov	r3, r0
 8005040:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d113      	bne.n	8005070 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	7858      	ldrb	r0, [r3, #1]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005052:	2301      	movs	r3, #1
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	f7ff fcd5 	bl	8004a04 <disk_read>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005064:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ff87 	bl	8004f98 <sync_window>
 800508a:	4603      	mov	r3, r0
 800508c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d159      	bne.n	8005148 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d149      	bne.n	8005130 <sync_fs+0xb4>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	791b      	ldrb	r3, [r3, #4]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d145      	bne.n	8005130 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	899b      	ldrh	r3, [r3, #12]
 80050ae:	461a      	mov	r2, r3
 80050b0:	2100      	movs	r1, #0
 80050b2:	f7ff fda8 	bl	8004c06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3338      	adds	r3, #56	@ 0x38
 80050ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80050be:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fd37 	bl	8004b36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3338      	adds	r3, #56	@ 0x38
 80050cc:	4921      	ldr	r1, [pc, #132]	@ (8005154 <sync_fs+0xd8>)
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fd4c 	bl	8004b6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3338      	adds	r3, #56	@ 0x38
 80050d8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80050dc:	491e      	ldr	r1, [pc, #120]	@ (8005158 <sync_fs+0xdc>)
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fd44 	bl	8004b6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3338      	adds	r3, #56	@ 0x38
 80050e8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7ff fd3a 	bl	8004b6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3338      	adds	r3, #56	@ 0x38
 80050fc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	4619      	mov	r1, r3
 8005106:	4610      	mov	r0, r2
 8005108:	f7ff fd30 	bl	8004b6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7858      	ldrb	r0, [r3, #1]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005124:	2301      	movs	r3, #1
 8005126:	f7ff fc8d 	bl	8004a44 <disk_write>
			fs->fsi_flag = 0;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	2200      	movs	r2, #0
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fca3 	bl	8004a84 <disk_ioctl>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <sync_fs+0xcc>
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	41615252 	.word	0x41615252
 8005158:	61417272 	.word	0x61417272

0800515c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	3b02      	subs	r3, #2
 800516a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	3b02      	subs	r3, #2
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d301      	bcc.n	800517c <clust2sect+0x20>
 8005178:	2300      	movs	r3, #0
 800517a:	e008      	b.n	800518e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	895b      	ldrh	r3, [r3, #10]
 8005180:	461a      	mov	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	fb03 f202 	mul.w	r2, r3, r2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518c:	4413      	add	r3, r2
}
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b086      	sub	sp, #24
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d904      	bls.n	80051ba <get_fat+0x20>
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d302      	bcc.n	80051c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80051ba:	2301      	movs	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e0ba      	b.n	8005336 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80051c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	f000 8082 	beq.w	80052d4 <get_fat+0x13a>
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	f300 80a6 	bgt.w	8005322 <get_fat+0x188>
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d002      	beq.n	80051e0 <get_fat+0x46>
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d055      	beq.n	800528a <get_fat+0xf0>
 80051de:	e0a0      	b.n	8005322 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	899b      	ldrh	r3, [r3, #12]
 80051f6:	4619      	mov	r1, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80051fe:	4413      	add	r3, r2
 8005200:	4619      	mov	r1, r3
 8005202:	6938      	ldr	r0, [r7, #16]
 8005204:	f7ff ff0c 	bl	8005020 <move_window>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	f040 808c 	bne.w	8005328 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	60fa      	str	r2, [r7, #12]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	8992      	ldrh	r2, [r2, #12]
 800521a:	fbb3 f1f2 	udiv	r1, r3, r2
 800521e:	fb01 f202 	mul.w	r2, r1, r2
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4413      	add	r3, r2
 8005228:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800522c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	899b      	ldrh	r3, [r3, #12]
 8005236:	4619      	mov	r1, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	fbb3 f3f1 	udiv	r3, r3, r1
 800523e:	4413      	add	r3, r2
 8005240:	4619      	mov	r1, r3
 8005242:	6938      	ldr	r0, [r7, #16]
 8005244:	f7ff feec 	bl	8005020 <move_window>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d16e      	bne.n	800532c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	899b      	ldrh	r3, [r3, #12]
 8005252:	461a      	mov	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	fbb3 f1f2 	udiv	r1, r3, r2
 800525a:	fb01 f202 	mul.w	r2, r1, r2
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	4313      	orrs	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <get_fat+0xe6>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	e002      	b.n	8005286 <get_fat+0xec>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005286:	617b      	str	r3, [r7, #20]
			break;
 8005288:	e055      	b.n	8005336 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	899b      	ldrh	r3, [r3, #12]
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	4619      	mov	r1, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	fbb3 f3f1 	udiv	r3, r3, r1
 800529e:	4413      	add	r3, r2
 80052a0:	4619      	mov	r1, r3
 80052a2:	6938      	ldr	r0, [r7, #16]
 80052a4:	f7ff febc 	bl	8005020 <move_window>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d140      	bne.n	8005330 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	8992      	ldrh	r2, [r2, #12]
 80052bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80052c0:	fb00 f202 	mul.w	r2, r0, r2
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	440b      	add	r3, r1
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fbf9 	bl	8004ac0 <ld_word>
 80052ce:	4603      	mov	r3, r0
 80052d0:	617b      	str	r3, [r7, #20]
			break;
 80052d2:	e030      	b.n	8005336 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	899b      	ldrh	r3, [r3, #12]
 80052dc:	089b      	lsrs	r3, r3, #2
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4619      	mov	r1, r3
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80052e8:	4413      	add	r3, r2
 80052ea:	4619      	mov	r1, r3
 80052ec:	6938      	ldr	r0, [r7, #16]
 80052ee:	f7ff fe97 	bl	8005020 <move_window>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d11d      	bne.n	8005334 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	8992      	ldrh	r2, [r2, #12]
 8005306:	fbb3 f0f2 	udiv	r0, r3, r2
 800530a:	fb00 f202 	mul.w	r2, r0, r2
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	440b      	add	r3, r1
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fbec 	bl	8004af0 <ld_dword>
 8005318:	4603      	mov	r3, r0
 800531a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800531e:	617b      	str	r3, [r7, #20]
			break;
 8005320:	e009      	b.n	8005336 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005322:	2301      	movs	r3, #1
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	e006      	b.n	8005336 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005328:	bf00      	nop
 800532a:	e004      	b.n	8005336 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800532c:	bf00      	nop
 800532e:	e002      	b.n	8005336 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005330:	bf00      	nop
 8005332:	e000      	b.n	8005336 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005334:	bf00      	nop
		}
	}

	return val;
 8005336:	697b      	ldr	r3, [r7, #20]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005340:	b590      	push	{r4, r7, lr}
 8005342:	b089      	sub	sp, #36	@ 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800534c:	2302      	movs	r3, #2
 800534e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b01      	cmp	r3, #1
 8005354:	f240 8109 	bls.w	800556a <put_fat+0x22a>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	f080 8103 	bcs.w	800556a <put_fat+0x22a>
		switch (fs->fs_type) {
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b03      	cmp	r3, #3
 800536a:	f000 80b6 	beq.w	80054da <put_fat+0x19a>
 800536e:	2b03      	cmp	r3, #3
 8005370:	f300 80fb 	bgt.w	800556a <put_fat+0x22a>
 8005374:	2b01      	cmp	r3, #1
 8005376:	d003      	beq.n	8005380 <put_fat+0x40>
 8005378:	2b02      	cmp	r3, #2
 800537a:	f000 8083 	beq.w	8005484 <put_fat+0x144>
 800537e:	e0f4      	b.n	800556a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4413      	add	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	899b      	ldrh	r3, [r3, #12]
 8005396:	4619      	mov	r1, r3
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	fbb3 f3f1 	udiv	r3, r3, r1
 800539e:	4413      	add	r3, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff fe3c 	bl	8005020 <move_window>
 80053a8:	4603      	mov	r3, r0
 80053aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053ac:	7ffb      	ldrb	r3, [r7, #31]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f040 80d4 	bne.w	800555c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	61ba      	str	r2, [r7, #24]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	8992      	ldrh	r2, [r2, #12]
 80053c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80053c8:	fb00 f202 	mul.w	r2, r0, r2
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	440b      	add	r3, r1
 80053d0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00d      	beq.n	80053f8 <put_fat+0xb8>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	b25b      	sxtb	r3, r3
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	b25a      	sxtb	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	b25b      	sxtb	r3, r3
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b25b      	sxtb	r3, r3
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e001      	b.n	80053fc <put_fat+0xbc>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	899b      	ldrh	r3, [r3, #12]
 800540e:	4619      	mov	r1, r3
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	fbb3 f3f1 	udiv	r3, r3, r1
 8005416:	4413      	add	r3, r2
 8005418:	4619      	mov	r1, r3
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff fe00 	bl	8005020 <move_window>
 8005420:	4603      	mov	r3, r0
 8005422:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005424:	7ffb      	ldrb	r3, [r7, #31]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 809a 	bne.w	8005560 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	899b      	ldrh	r3, [r3, #12]
 8005436:	461a      	mov	r2, r3
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	fbb3 f0f2 	udiv	r0, r3, r2
 800543e:	fb00 f202 	mul.w	r2, r0, r2
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	440b      	add	r3, r1
 8005446:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <put_fat+0x11a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	b2db      	uxtb	r3, r3
 8005458:	e00e      	b.n	8005478 <put_fat+0x138>
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	b25b      	sxtb	r3, r3
 8005460:	f023 030f 	bic.w	r3, r3, #15
 8005464:	b25a      	sxtb	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	0a1b      	lsrs	r3, r3, #8
 800546a:	b25b      	sxtb	r3, r3
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	b25b      	sxtb	r3, r3
 8005472:	4313      	orrs	r3, r2
 8005474:	b25b      	sxtb	r3, r3
 8005476:	b2db      	uxtb	r3, r3
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	70da      	strb	r2, [r3, #3]
			break;
 8005482:	e072      	b.n	800556a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	899b      	ldrh	r3, [r3, #12]
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	b29b      	uxth	r3, r3
 8005490:	4619      	mov	r1, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	fbb3 f3f1 	udiv	r3, r3, r1
 8005498:	4413      	add	r3, r2
 800549a:	4619      	mov	r1, r3
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7ff fdbf 	bl	8005020 <move_window>
 80054a2:	4603      	mov	r3, r0
 80054a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054a6:	7ffb      	ldrb	r3, [r7, #31]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d15b      	bne.n	8005564 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	8992      	ldrh	r2, [r2, #12]
 80054ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80054be:	fb00 f202 	mul.w	r2, r0, r2
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	440b      	add	r3, r1
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	b292      	uxth	r2, r2
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fb32 	bl	8004b36 <st_word>
			fs->wflag = 1;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	70da      	strb	r2, [r3, #3]
			break;
 80054d8:	e047      	b.n	800556a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	899b      	ldrh	r3, [r3, #12]
 80054e2:	089b      	lsrs	r3, r3, #2
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	4619      	mov	r1, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ee:	4413      	add	r3, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff fd94 	bl	8005020 <move_window>
 80054f8:	4603      	mov	r3, r0
 80054fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054fc:	7ffb      	ldrb	r3, [r7, #31]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d132      	bne.n	8005568 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	8992      	ldrh	r2, [r2, #12]
 8005516:	fbb3 f0f2 	udiv	r0, r3, r2
 800551a:	fb00 f202 	mul.w	r2, r0, r2
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	440b      	add	r3, r1
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fae4 	bl	8004af0 <ld_dword>
 8005528:	4603      	mov	r3, r0
 800552a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800552e:	4323      	orrs	r3, r4
 8005530:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	8992      	ldrh	r2, [r2, #12]
 8005540:	fbb3 f0f2 	udiv	r0, r3, r2
 8005544:	fb00 f202 	mul.w	r2, r0, r2
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	440b      	add	r3, r1
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fb0c 	bl	8004b6c <st_dword>
			fs->wflag = 1;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	70da      	strb	r2, [r3, #3]
			break;
 800555a:	e006      	b.n	800556a <put_fat+0x22a>
			if (res != FR_OK) break;
 800555c:	bf00      	nop
 800555e:	e004      	b.n	800556a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005560:	bf00      	nop
 8005562:	e002      	b.n	800556a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005564:	bf00      	nop
 8005566:	e000      	b.n	800556a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005568:	bf00      	nop
		}
	}
	return res;
 800556a:	7ffb      	ldrb	r3, [r7, #31]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3724      	adds	r7, #36	@ 0x24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd90      	pop	{r4, r7, pc}

08005574 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d904      	bls.n	800559a <remove_chain+0x26>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	d301      	bcc.n	800559e <remove_chain+0x2a>
 800559a:	2302      	movs	r3, #2
 800559c:	e04b      	b.n	8005636 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00c      	beq.n	80055be <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	69b8      	ldr	r0, [r7, #24]
 80055ac:	f7ff fec8 	bl	8005340 <put_fat>
 80055b0:	4603      	mov	r3, r0
 80055b2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80055b4:	7ffb      	ldrb	r3, [r7, #31]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <remove_chain+0x4a>
 80055ba:	7ffb      	ldrb	r3, [r7, #31]
 80055bc:	e03b      	b.n	8005636 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff fdea 	bl	800519a <get_fat>
 80055c6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d031      	beq.n	8005632 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <remove_chain+0x64>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e02e      	b.n	8005636 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055de:	d101      	bne.n	80055e4 <remove_chain+0x70>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e028      	b.n	8005636 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80055e4:	2200      	movs	r2, #0
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	69b8      	ldr	r0, [r7, #24]
 80055ea:	f7ff fea9 	bl	8005340 <put_fat>
 80055ee:	4603      	mov	r3, r0
 80055f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80055f2:	7ffb      	ldrb	r3, [r7, #31]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <remove_chain+0x88>
 80055f8:	7ffb      	ldrb	r3, [r7, #31]
 80055fa:	e01c      	b.n	8005636 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	3b02      	subs	r3, #2
 8005606:	429a      	cmp	r2, r3
 8005608:	d20b      	bcs.n	8005622 <remove_chain+0xae>
			fs->free_clst++;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	791b      	ldrb	r3, [r3, #4]
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	b2da      	uxtb	r2, r3
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	d3c6      	bcc.n	80055be <remove_chain+0x4a>
 8005630:	e000      	b.n	8005634 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005632:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10d      	bne.n	8005670 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <create_chain+0x2c>
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	429a      	cmp	r2, r3
 8005668:	d31b      	bcc.n	80056a2 <create_chain+0x64>
 800566a:	2301      	movs	r3, #1
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	e018      	b.n	80056a2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fd91 	bl	800519a <get_fat>
 8005678:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d801      	bhi.n	8005684 <create_chain+0x46>
 8005680:	2301      	movs	r3, #1
 8005682:	e070      	b.n	8005766 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800568a:	d101      	bne.n	8005690 <create_chain+0x52>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	e06a      	b.n	8005766 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	429a      	cmp	r2, r3
 8005698:	d201      	bcs.n	800569e <create_chain+0x60>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	e063      	b.n	8005766 <create_chain+0x128>
		scl = clst;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d307      	bcc.n	80056c6 <create_chain+0x88>
				ncl = 2;
 80056b6:	2302      	movs	r3, #2
 80056b8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d901      	bls.n	80056c6 <create_chain+0x88>
 80056c2:	2300      	movs	r3, #0
 80056c4:	e04f      	b.n	8005766 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80056c6:	69f9      	ldr	r1, [r7, #28]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff fd66 	bl	800519a <get_fat>
 80056ce:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00e      	beq.n	80056f4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d003      	beq.n	80056e4 <create_chain+0xa6>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056e2:	d101      	bne.n	80056e8 <create_chain+0xaa>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	e03e      	b.n	8005766 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d1da      	bne.n	80056a6 <create_chain+0x68>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e038      	b.n	8005766 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80056f4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80056f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056fa:	69f9      	ldr	r1, [r7, #28]
 80056fc:	6938      	ldr	r0, [r7, #16]
 80056fe:	f7ff fe1f 	bl	8005340 <put_fat>
 8005702:	4603      	mov	r3, r0
 8005704:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005706:	7dfb      	ldrb	r3, [r7, #23]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <create_chain+0xe2>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d006      	beq.n	8005720 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	6938      	ldr	r0, [r7, #16]
 8005718:	f7ff fe12 	bl	8005340 <put_fat>
 800571c:	4603      	mov	r3, r0
 800571e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d116      	bne.n	8005754 <create_chain+0x116>
		fs->last_clst = ncl;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	699a      	ldr	r2, [r3, #24]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	3b02      	subs	r3, #2
 8005736:	429a      	cmp	r2, r3
 8005738:	d804      	bhi.n	8005744 <create_chain+0x106>
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	1e5a      	subs	r2, r3, #1
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	791b      	ldrb	r3, [r3, #4]
 8005748:	f043 0301 	orr.w	r3, r3, #1
 800574c:	b2da      	uxtb	r2, r3
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	711a      	strb	r2, [r3, #4]
 8005752:	e007      	b.n	8005764 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005754:	7dfb      	ldrb	r3, [r7, #23]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d102      	bne.n	8005760 <create_chain+0x122>
 800575a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800575e:	e000      	b.n	8005762 <create_chain+0x124>
 8005760:	2301      	movs	r3, #1
 8005762:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005764:	69fb      	ldr	r3, [r7, #28]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800576e:	b480      	push	{r7}
 8005770:	b087      	sub	sp, #28
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	3304      	adds	r3, #4
 8005784:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	899b      	ldrh	r3, [r3, #12]
 800578a:	461a      	mov	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	8952      	ldrh	r2, [r2, #10]
 8005796:	fbb3 f3f2 	udiv	r3, r3, r2
 800579a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1d1a      	adds	r2, r3, #4
 80057a0:	613a      	str	r2, [r7, #16]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <clmt_clust+0x42>
 80057ac:	2300      	movs	r3, #0
 80057ae:	e010      	b.n	80057d2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d307      	bcc.n	80057c8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	3304      	adds	r3, #4
 80057c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80057c6:	e7e9      	b.n	800579c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80057c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	4413      	add	r3, r2
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057f4:	d204      	bcs.n	8005800 <dir_sdi+0x22>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005800:	2302      	movs	r3, #2
 8005802:	e071      	b.n	80058e8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <dir_sdi+0x46>
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d902      	bls.n	8005824 <dir_sdi+0x46>
		clst = fs->dirbase;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10c      	bne.n	8005844 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	8912      	ldrh	r2, [r2, #8]
 8005832:	4293      	cmp	r3, r2
 8005834:	d301      	bcc.n	800583a <dir_sdi+0x5c>
 8005836:	2302      	movs	r3, #2
 8005838:	e056      	b.n	80058e8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	61da      	str	r2, [r3, #28]
 8005842:	e02d      	b.n	80058a0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	895b      	ldrh	r3, [r3, #10]
 8005848:	461a      	mov	r2, r3
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	899b      	ldrh	r3, [r3, #12]
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005854:	e019      	b.n	800588a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fc9d 	bl	800519a <get_fat>
 8005860:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005868:	d101      	bne.n	800586e <dir_sdi+0x90>
 800586a:	2301      	movs	r3, #1
 800586c:	e03c      	b.n	80058e8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d904      	bls.n	800587e <dir_sdi+0xa0>
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	429a      	cmp	r2, r3
 800587c:	d301      	bcc.n	8005882 <dir_sdi+0xa4>
 800587e:	2302      	movs	r3, #2
 8005880:	e032      	b.n	80058e8 <dir_sdi+0x10a>
			ofs -= csz;
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	429a      	cmp	r2, r3
 8005890:	d2e1      	bcs.n	8005856 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005892:	6979      	ldr	r1, [r7, #20]
 8005894:	6938      	ldr	r0, [r7, #16]
 8005896:	f7ff fc61 	bl	800515c <clust2sect>
 800589a:	4602      	mov	r2, r0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <dir_sdi+0xd4>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e01a      	b.n	80058e8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	899b      	ldrh	r3, [r3, #12]
 80058ba:	4619      	mov	r1, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	fbb3 f3f1 	udiv	r3, r3, r1
 80058c2:	441a      	add	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	899b      	ldrh	r3, [r3, #12]
 80058d2:	461a      	mov	r2, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80058da:	fb00 f202 	mul.w	r2, r0, r2
 80058de:	1a9b      	subs	r3, r3, r2
 80058e0:	18ca      	adds	r2, r1, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	3320      	adds	r3, #32
 8005906:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <dir_next+0x28>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005916:	d301      	bcc.n	800591c <dir_next+0x2c>
 8005918:	2304      	movs	r3, #4
 800591a:	e0bb      	b.n	8005a94 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	899b      	ldrh	r3, [r3, #12]
 8005920:	461a      	mov	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	fbb3 f1f2 	udiv	r1, r3, r2
 8005928:	fb01 f202 	mul.w	r2, r1, r2
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 809d 	bne.w	8005a6e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10b      	bne.n	800595e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	8912      	ldrh	r2, [r2, #8]
 800594e:	4293      	cmp	r3, r2
 8005950:	f0c0 808d 	bcc.w	8005a6e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	61da      	str	r2, [r3, #28]
 800595a:	2304      	movs	r3, #4
 800595c:	e09a      	b.n	8005a94 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	899b      	ldrh	r3, [r3, #12]
 8005962:	461a      	mov	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	fbb3 f3f2 	udiv	r3, r3, r2
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	8952      	ldrh	r2, [r2, #10]
 800596e:	3a01      	subs	r2, #1
 8005970:	4013      	ands	r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d17b      	bne.n	8005a6e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f7ff fc0b 	bl	800519a <get_fat>
 8005984:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d801      	bhi.n	8005990 <dir_next+0xa0>
 800598c:	2302      	movs	r3, #2
 800598e:	e081      	b.n	8005a94 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005996:	d101      	bne.n	800599c <dir_next+0xac>
 8005998:	2301      	movs	r3, #1
 800599a:	e07b      	b.n	8005a94 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d359      	bcc.n	8005a5a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	61da      	str	r2, [r3, #28]
 80059b2:	2304      	movs	r3, #4
 80059b4:	e06e      	b.n	8005a94 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f7ff fe3d 	bl	800563e <create_chain>
 80059c4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <dir_next+0xe0>
 80059cc:	2307      	movs	r3, #7
 80059ce:	e061      	b.n	8005a94 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <dir_next+0xea>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e05c      	b.n	8005a94 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059e0:	d101      	bne.n	80059e6 <dir_next+0xf6>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e056      	b.n	8005a94 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fad6 	bl	8004f98 <sync_window>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <dir_next+0x106>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e04e      	b.n	8005a94 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	899b      	ldrh	r3, [r3, #12]
 8005a00:	461a      	mov	r2, r3
 8005a02:	2100      	movs	r1, #0
 8005a04:	f7ff f8ff 	bl	8004c06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	6979      	ldr	r1, [r7, #20]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f7ff fba4 	bl	800515c <clust2sect>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a1a:	e012      	b.n	8005a42 <dir_next+0x152>
						fs->wflag = 1;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff fab8 	bl	8004f98 <sync_window>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <dir_next+0x142>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e030      	b.n	8005a94 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	3301      	adds	r3, #1
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	895b      	ldrh	r3, [r3, #10]
 8005a46:	461a      	mov	r2, r3
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d3e6      	bcc.n	8005a1c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad2      	subs	r2, r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005a60:	6979      	ldr	r1, [r7, #20]
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f7ff fb7a 	bl	800515c <clust2sect>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	899b      	ldrh	r3, [r3, #12]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a86:	fb00 f202 	mul.w	r2, r0, r2
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	18ca      	adds	r2, r1, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005aac:	2100      	movs	r1, #0
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff fe95 	bl	80057de <dir_sdi>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d12b      	bne.n	8005b16 <dir_alloc+0x7a>
		n = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff faa9 	bl	8005020 <move_window>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005ad2:	7dfb      	ldrb	r3, [r7, #23]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d11d      	bne.n	8005b14 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2be5      	cmp	r3, #229	@ 0xe5
 8005ae0:	d004      	beq.n	8005aec <dir_alloc+0x50>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d107      	bne.n	8005afc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	3301      	adds	r3, #1
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d102      	bne.n	8005b00 <dir_alloc+0x64>
 8005afa:	e00c      	b.n	8005b16 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005afc:	2300      	movs	r3, #0
 8005afe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005b00:	2101      	movs	r1, #1
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff fef4 	bl	80058f0 <dir_next>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0d7      	beq.n	8005ac2 <dir_alloc+0x26>
 8005b12:	e000      	b.n	8005b16 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005b14:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d101      	bne.n	8005b20 <dir_alloc+0x84>
 8005b1c:	2307      	movs	r3, #7
 8005b1e:	75fb      	strb	r3, [r7, #23]
	return res;
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	331a      	adds	r3, #26
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe ffc1 	bl	8004ac0 <ld_word>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d109      	bne.n	8005b5e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	3314      	adds	r3, #20
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe ffb6 	bl	8004ac0 <ld_word>
 8005b54:	4603      	mov	r3, r0
 8005b56:	041b      	lsls	r3, r3, #16
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	331a      	adds	r3, #26
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe ffd9 	bl	8004b36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d109      	bne.n	8005ba0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f103 0214 	add.w	r2, r3, #20
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f7fe ffcb 	bl	8004b36 <st_word>
	}
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	331a      	adds	r3, #26
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe ff82 	bl	8004ac0 <ld_word>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <cmp_lfn+0x1e>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e059      	b.n	8005c7a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bce:	1e5a      	subs	r2, r3, #1
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005bdc:	2301      	movs	r3, #1
 8005bde:	81fb      	strh	r3, [r7, #14]
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	e033      	b.n	8005c4e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005be6:	4a27      	ldr	r2, [pc, #156]	@ (8005c84 <cmp_lfn+0xdc>)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe ff63 	bl	8004ac0 <ld_word>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005bfe:	89fb      	ldrh	r3, [r7, #14]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01a      	beq.n	8005c3a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c08:	d812      	bhi.n	8005c30 <cmp_lfn+0x88>
 8005c0a:	89bb      	ldrh	r3, [r7, #12]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 ff19 	bl	8007a44 <ff_wtoupper>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461c      	mov	r4, r3
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	617a      	str	r2, [r7, #20]
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	4413      	add	r3, r2
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 ff0d 	bl	8007a44 <ff_wtoupper>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	429c      	cmp	r4, r3
 8005c2e:	d001      	beq.n	8005c34 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005c30:	2300      	movs	r3, #0
 8005c32:	e022      	b.n	8005c7a <cmp_lfn+0xd2>
			}
			wc = uc;
 8005c34:	89bb      	ldrh	r3, [r7, #12]
 8005c36:	81fb      	strh	r3, [r7, #14]
 8005c38:	e006      	b.n	8005c48 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005c3a:	89bb      	ldrh	r3, [r7, #12]
 8005c3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d001      	beq.n	8005c48 <cmp_lfn+0xa0>
 8005c44:	2300      	movs	r3, #0
 8005c46:	e018      	b.n	8005c7a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b0c      	cmp	r3, #12
 8005c52:	d9c8      	bls.n	8005be6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <cmp_lfn+0xd0>
 8005c60:	89fb      	ldrh	r3, [r7, #14]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d008      	beq.n	8005c78 <cmp_lfn+0xd0>
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <cmp_lfn+0xd0>
 8005c74:	2300      	movs	r3, #0
 8005c76:	e000      	b.n	8005c7a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005c78:	2301      	movs	r3, #1
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd90      	pop	{r4, r7, pc}
 8005c82:	bf00      	nop
 8005c84:	08008da8 	.word	0x08008da8

08005c88 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	4611      	mov	r1, r2
 8005c94:	461a      	mov	r2, r3
 8005c96:	460b      	mov	r3, r1
 8005c98:	71fb      	strb	r3, [r7, #7]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	330d      	adds	r3, #13
 8005ca2:	79ba      	ldrb	r2, [r7, #6]
 8005ca4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	330b      	adds	r3, #11
 8005caa:	220f      	movs	r2, #15
 8005cac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	331a      	adds	r3, #26
 8005cba:	2100      	movs	r1, #0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe ff3a 	bl	8004b36 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	1e5a      	subs	r2, r3, #1
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	82fb      	strh	r3, [r7, #22]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005cda:	8afb      	ldrh	r3, [r7, #22]
 8005cdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <put_lfn+0x6c>
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	61fa      	str	r2, [r7, #28]
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005cf4:	4a17      	ldr	r2, [pc, #92]	@ (8005d54 <put_lfn+0xcc>)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	4413      	add	r3, r2
 8005d02:	8afa      	ldrh	r2, [r7, #22]
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe ff15 	bl	8004b36 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005d0c:	8afb      	ldrh	r3, [r7, #22]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <put_lfn+0x90>
 8005d12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d16:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b0c      	cmp	r3, #12
 8005d22:	d9da      	bls.n	8005cda <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005d24:	8afb      	ldrh	r3, [r7, #22]
 8005d26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d006      	beq.n	8005d3c <put_lfn+0xb4>
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d103      	bne.n	8005d44 <put_lfn+0xbc>
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d42:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	79fa      	ldrb	r2, [r7, #7]
 8005d48:	701a      	strb	r2, [r3, #0]
}
 8005d4a:	bf00      	nop
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	08008da8 	.word	0x08008da8

08005d58 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08c      	sub	sp, #48	@ 0x30
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005d66:	220b      	movs	r2, #11
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7fe ff2a 	bl	8004bc4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b05      	cmp	r3, #5
 8005d74:	d92b      	bls.n	8005dce <gen_numname+0x76>
		sr = seq;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005d7a:	e022      	b.n	8005dc2 <gen_numname+0x6a>
			wc = *lfn++;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1c9a      	adds	r2, r3, #2
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005d86:	2300      	movs	r3, #0
 8005d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d8a:	e017      	b.n	8005dbc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	005a      	lsls	r2, r3, #1
 8005d90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	4413      	add	r3, r2
 8005d98:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005d9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <gen_numname+0x5e>
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005db0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005db4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db8:	3301      	adds	r3, #1
 8005dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	2b0f      	cmp	r3, #15
 8005dc0:	d9e4      	bls.n	8005d8c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1d8      	bne.n	8005d7c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005dce:	2307      	movs	r3, #7
 8005dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	3330      	adds	r3, #48	@ 0x30
 8005dde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005de2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005de6:	2b39      	cmp	r3, #57	@ 0x39
 8005de8:	d904      	bls.n	8005df4 <gen_numname+0x9c>
 8005dea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005dee:	3307      	adds	r3, #7
 8005df0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	1e5a      	subs	r2, r3, #1
 8005df8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005dfa:	3330      	adds	r3, #48	@ 0x30
 8005dfc:	443b      	add	r3, r7
 8005dfe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005e02:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1df      	bne.n	8005dd2 <gen_numname+0x7a>
	ns[i] = '~';
 8005e12:	f107 0214 	add.w	r2, r7, #20
 8005e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e18:	4413      	add	r3, r2
 8005e1a:	227e      	movs	r2, #126	@ 0x7e
 8005e1c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005e1e:	2300      	movs	r3, #0
 8005e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e22:	e002      	b.n	8005e2a <gen_numname+0xd2>
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	3301      	adds	r3, #1
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d205      	bcs.n	8005e3e <gen_numname+0xe6>
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e36:	4413      	add	r3, r2
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d1f2      	bne.n	8005e24 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e40:	2b07      	cmp	r3, #7
 8005e42:	d807      	bhi.n	8005e54 <gen_numname+0xfc>
 8005e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e4a:	3330      	adds	r3, #48	@ 0x30
 8005e4c:	443b      	add	r3, r7
 8005e4e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005e52:	e000      	b.n	8005e56 <gen_numname+0xfe>
 8005e54:	2120      	movs	r1, #32
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	460a      	mov	r2, r1
 8005e62:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	2b07      	cmp	r3, #7
 8005e68:	d9e9      	bls.n	8005e3e <gen_numname+0xe6>
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	3730      	adds	r7, #48	@ 0x30
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005e80:	230b      	movs	r3, #11
 8005e82:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	0852      	lsrs	r2, r2, #1
 8005e8a:	01db      	lsls	r3, r3, #7
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	1c59      	adds	r1, r3, #1
 8005e94:	6079      	str	r1, [r7, #4]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	4413      	add	r3, r2
 8005e9a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1ed      	bne.n	8005e84 <sum_sfn+0x10>
	return sum;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b086      	sub	sp, #24
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff fc89 	bl	80057de <dir_sdi>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <dir_find+0x24>
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
 8005ed8:	e0a9      	b.n	800602e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005eda:	23ff      	movs	r3, #255	@ 0xff
 8005edc:	753b      	strb	r3, [r7, #20]
 8005ede:	7d3b      	ldrb	r3, [r7, #20]
 8005ee0:	757b      	strb	r3, [r7, #21]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ee8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6938      	ldr	r0, [r7, #16]
 8005ef2:	f7ff f895 	bl	8005020 <move_window>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 8090 	bne.w	8006022 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005f0a:	7dbb      	ldrb	r3, [r7, #22]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <dir_find+0x60>
 8005f10:	2304      	movs	r3, #4
 8005f12:	75fb      	strb	r3, [r7, #23]
 8005f14:	e08a      	b.n	800602c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	330b      	adds	r3, #11
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f22:	73fb      	strb	r3, [r7, #15]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7bfa      	ldrb	r2, [r7, #15]
 8005f28:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005f2a:	7dbb      	ldrb	r3, [r7, #22]
 8005f2c:	2be5      	cmp	r3, #229	@ 0xe5
 8005f2e:	d007      	beq.n	8005f40 <dir_find+0x8a>
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d009      	beq.n	8005f4e <dir_find+0x98>
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	2b0f      	cmp	r3, #15
 8005f3e:	d006      	beq.n	8005f4e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f40:	23ff      	movs	r3, #255	@ 0xff
 8005f42:	757b      	strb	r3, [r7, #21]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f4c:	e05e      	b.n	800600c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b0f      	cmp	r3, #15
 8005f52:	d136      	bne.n	8005fc2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d154      	bne.n	800600c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005f62:	7dbb      	ldrb	r3, [r7, #22]
 8005f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00d      	beq.n	8005f88 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	7b5b      	ldrb	r3, [r3, #13]
 8005f72:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005f74:	7dbb      	ldrb	r3, [r7, #22]
 8005f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f7a:	75bb      	strb	r3, [r7, #22]
 8005f7c:	7dbb      	ldrb	r3, [r7, #22]
 8005f7e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	695a      	ldr	r2, [r3, #20]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005f88:	7dba      	ldrb	r2, [r7, #22]
 8005f8a:	7d7b      	ldrb	r3, [r7, #21]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d115      	bne.n	8005fbc <dir_find+0x106>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	330d      	adds	r3, #13
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	7d3a      	ldrb	r2, [r7, #20]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d10e      	bne.n	8005fbc <dir_find+0x106>
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f7ff fdfd 	bl	8005ba8 <cmp_lfn>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <dir_find+0x106>
 8005fb4:	7d7b      	ldrb	r3, [r7, #21]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	e000      	b.n	8005fbe <dir_find+0x108>
 8005fbc:	23ff      	movs	r3, #255	@ 0xff
 8005fbe:	757b      	strb	r3, [r7, #21]
 8005fc0:	e024      	b.n	800600c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005fc2:	7d7b      	ldrb	r3, [r7, #21]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d109      	bne.n	8005fdc <dir_find+0x126>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff ff51 	bl	8005e74 <sum_sfn>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	7d3b      	ldrb	r3, [r7, #20]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d024      	beq.n	8006026 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <dir_find+0x14a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a18      	ldr	r0, [r3, #32]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3324      	adds	r3, #36	@ 0x24
 8005ff2:	220b      	movs	r2, #11
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f7fe fe21 	bl	8004c3c <mem_cmp>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d014      	beq.n	800602a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006000:	23ff      	movs	r3, #255	@ 0xff
 8006002:	757b      	strb	r3, [r7, #21]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800600a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800600c:	2100      	movs	r1, #0
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff fc6e 	bl	80058f0 <dir_next>
 8006014:	4603      	mov	r3, r0
 8006016:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006018:	7dfb      	ldrb	r3, [r7, #23]
 800601a:	2b00      	cmp	r3, #0
 800601c:	f43f af65 	beq.w	8005eea <dir_find+0x34>
 8006020:	e004      	b.n	800602c <dir_find+0x176>
		if (res != FR_OK) break;
 8006022:	bf00      	nop
 8006024:	e002      	b.n	800602c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006026:	bf00      	nop
 8006028:	e000      	b.n	800602c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800602a:	bf00      	nop

	return res;
 800602c:	7dfb      	ldrb	r3, [r7, #23]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08c      	sub	sp, #48	@ 0x30
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800604c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <dir_register+0x20>
 8006054:	2306      	movs	r3, #6
 8006056:	e0e0      	b.n	800621a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006058:	2300      	movs	r3, #0
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
 800605c:	e002      	b.n	8006064 <dir_register+0x2c>
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	3301      	adds	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	4413      	add	r3, r2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1f4      	bne.n	800605e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800607a:	f107 030c 	add.w	r3, r7, #12
 800607e:	220c      	movs	r2, #12
 8006080:	4618      	mov	r0, r3
 8006082:	f7fe fd9f 	bl	8004bc4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d032      	beq.n	80060f6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2240      	movs	r2, #64	@ 0x40
 8006094:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006098:	2301      	movs	r3, #1
 800609a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800609c:	e016      	b.n	80060cc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	f107 010c 	add.w	r1, r7, #12
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	f7ff fe53 	bl	8005d58 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff feff 	bl	8005eb6 <dir_find>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80060be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	3301      	adds	r3, #1
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ce:	2b63      	cmp	r3, #99	@ 0x63
 80060d0:	d9e5      	bls.n	800609e <dir_register+0x66>
 80060d2:	e000      	b.n	80060d6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80060d4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	2b64      	cmp	r3, #100	@ 0x64
 80060da:	d101      	bne.n	80060e0 <dir_register+0xa8>
 80060dc:	2307      	movs	r3, #7
 80060de:	e09c      	b.n	800621a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80060e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d002      	beq.n	80060ee <dir_register+0xb6>
 80060e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060ec:	e095      	b.n	800621a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80060ee:	7dfa      	ldrb	r2, [r7, #23]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <dir_register+0xd8>
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	330c      	adds	r3, #12
 8006104:	4a47      	ldr	r2, [pc, #284]	@ (8006224 <dir_register+0x1ec>)
 8006106:	fba2 2303 	umull	r2, r3, r2, r3
 800610a:	089b      	lsrs	r3, r3, #2
 800610c:	3301      	adds	r3, #1
 800610e:	e000      	b.n	8006112 <dir_register+0xda>
 8006110:	2301      	movs	r3, #1
 8006112:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006114:	6a39      	ldr	r1, [r7, #32]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fcc0 	bl	8005a9c <dir_alloc>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006122:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006126:	2b00      	cmp	r3, #0
 8006128:	d148      	bne.n	80061bc <dir_register+0x184>
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	3b01      	subs	r3, #1
 800612e:	623b      	str	r3, [r7, #32]
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d042      	beq.n	80061bc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695a      	ldr	r2, [r3, #20]
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	015b      	lsls	r3, r3, #5
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff fb4b 	bl	80057de <dir_sdi>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800614e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006152:	2b00      	cmp	r3, #0
 8006154:	d132      	bne.n	80061bc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3324      	adds	r3, #36	@ 0x24
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fe8a 	bl	8005e74 <sum_sfn>
 8006160:	4603      	mov	r3, r0
 8006162:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	4619      	mov	r1, r3
 800616a:	69f8      	ldr	r0, [r7, #28]
 800616c:	f7fe ff58 	bl	8005020 <move_window>
 8006170:	4603      	mov	r3, r0
 8006172:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006176:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800617a:	2b00      	cmp	r3, #0
 800617c:	d11d      	bne.n	80061ba <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	6918      	ldr	r0, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a19      	ldr	r1, [r3, #32]
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	7efb      	ldrb	r3, [r7, #27]
 800618c:	f7ff fd7c 	bl	8005c88 <put_lfn>
				fs->wflag = 1;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2201      	movs	r2, #1
 8006194:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006196:	2100      	movs	r1, #0
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff fba9 	bl	80058f0 <dir_next>
 800619e:	4603      	mov	r3, r0
 80061a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80061a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d107      	bne.n	80061bc <dir_register+0x184>
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1d5      	bne.n	8006164 <dir_register+0x12c>
 80061b8:	e000      	b.n	80061bc <dir_register+0x184>
				if (res != FR_OK) break;
 80061ba:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80061bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d128      	bne.n	8006216 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	4619      	mov	r1, r3
 80061ca:	69f8      	ldr	r0, [r7, #28]
 80061cc:	f7fe ff28 	bl	8005020 <move_window>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80061d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d11b      	bne.n	8006216 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	2220      	movs	r2, #32
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fd0d 	bl	8004c06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a18      	ldr	r0, [r3, #32]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3324      	adds	r3, #36	@ 0x24
 80061f4:	220b      	movs	r2, #11
 80061f6:	4619      	mov	r1, r3
 80061f8:	f7fe fce4 	bl	8004bc4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	330c      	adds	r3, #12
 8006208:	f002 0218 	and.w	r2, r2, #24
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2201      	movs	r2, #1
 8006214:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006216:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800621a:	4618      	mov	r0, r3
 800621c:	3730      	adds	r7, #48	@ 0x30
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	4ec4ec4f 	.word	0x4ec4ec4f

08006228 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	@ 0x28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	61ba      	str	r2, [r7, #24]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4413      	add	r3, r2
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006256:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006258:	2b1f      	cmp	r3, #31
 800625a:	d940      	bls.n	80062de <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800625c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800625e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006260:	d006      	beq.n	8006270 <create_name+0x48>
 8006262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006264:	2b5c      	cmp	r3, #92	@ 0x5c
 8006266:	d110      	bne.n	800628a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006268:	e002      	b.n	8006270 <create_name+0x48>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	3301      	adds	r3, #1
 800626e:	61bb      	str	r3, [r7, #24]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	4413      	add	r3, r2
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b2f      	cmp	r3, #47	@ 0x2f
 800627a:	d0f6      	beq.n	800626a <create_name+0x42>
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	4413      	add	r3, r2
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b5c      	cmp	r3, #92	@ 0x5c
 8006286:	d0f0      	beq.n	800626a <create_name+0x42>
			break;
 8006288:	e02a      	b.n	80062e0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2bfe      	cmp	r3, #254	@ 0xfe
 800628e:	d901      	bls.n	8006294 <create_name+0x6c>
 8006290:	2306      	movs	r3, #6
 8006292:	e17d      	b.n	8006590 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006294:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006296:	b2db      	uxtb	r3, r3
 8006298:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800629a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800629c:	2101      	movs	r1, #1
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 fb94 	bl	80079cc <ff_convert>
 80062a4:	4603      	mov	r3, r0
 80062a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80062a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <create_name+0x8a>
 80062ae:	2306      	movs	r3, #6
 80062b0:	e16e      	b.n	8006590 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80062b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80062b6:	d809      	bhi.n	80062cc <create_name+0xa4>
 80062b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062ba:	4619      	mov	r1, r3
 80062bc:	488d      	ldr	r0, [pc, #564]	@ (80064f4 <create_name+0x2cc>)
 80062be:	f7fe fce4 	bl	8004c8a <chk_chr>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <create_name+0xa4>
 80062c8:	2306      	movs	r3, #6
 80062ca:	e161      	b.n	8006590 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	617a      	str	r2, [r7, #20]
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80062da:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80062dc:	e7b4      	b.n	8006248 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80062de:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	441a      	add	r2, r3
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80062ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062ec:	2b1f      	cmp	r3, #31
 80062ee:	d801      	bhi.n	80062f4 <create_name+0xcc>
 80062f0:	2304      	movs	r3, #4
 80062f2:	e000      	b.n	80062f6 <create_name+0xce>
 80062f4:	2300      	movs	r3, #0
 80062f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80062fa:	e011      	b.n	8006320 <create_name+0xf8>
		w = lfn[di - 1];
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006302:	3b01      	subs	r3, #1
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800630e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006310:	2b20      	cmp	r3, #32
 8006312:	d002      	beq.n	800631a <create_name+0xf2>
 8006314:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006316:	2b2e      	cmp	r3, #46	@ 0x2e
 8006318:	d106      	bne.n	8006328 <create_name+0x100>
		di--;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	3b01      	subs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1ea      	bne.n	80062fc <create_name+0xd4>
 8006326:	e000      	b.n	800632a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006328:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	2200      	movs	r2, #0
 8006334:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <create_name+0x118>
 800633c:	2306      	movs	r3, #6
 800633e:	e127      	b.n	8006590 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3324      	adds	r3, #36	@ 0x24
 8006344:	220b      	movs	r2, #11
 8006346:	2120      	movs	r1, #32
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe fc5c 	bl	8004c06 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800634e:	2300      	movs	r3, #0
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	e002      	b.n	800635a <create_name+0x132>
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	3301      	adds	r3, #1
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	2b20      	cmp	r3, #32
 8006366:	d0f5      	beq.n	8006354 <create_name+0x12c>
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	2b2e      	cmp	r3, #46	@ 0x2e
 8006374:	d0ee      	beq.n	8006354 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d009      	beq.n	8006390 <create_name+0x168>
 800637c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006380:	f043 0303 	orr.w	r3, r3, #3
 8006384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006388:	e002      	b.n	8006390 <create_name+0x168>
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	3b01      	subs	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <create_name+0x182>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800639c:	3b01      	subs	r3, #1
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80063a8:	d1ef      	bne.n	800638a <create_name+0x162>

	i = b = 0; ni = 8;
 80063aa:	2300      	movs	r3, #0
 80063ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063b0:	2300      	movs	r3, #0
 80063b2:	623b      	str	r3, [r7, #32]
 80063b4:	2308      	movs	r3, #8
 80063b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	61ba      	str	r2, [r7, #24]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80063c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 8090 	beq.w	80064f0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80063d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d006      	beq.n	80063e4 <create_name+0x1bc>
 80063d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80063da:	d10a      	bne.n	80063f2 <create_name+0x1ca>
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d006      	beq.n	80063f2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80063e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063e8:	f043 0303 	orr.w	r3, r3, #3
 80063ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063f0:	e07d      	b.n	80064ee <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80063f2:	6a3a      	ldr	r2, [r7, #32]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d203      	bcs.n	8006402 <create_name+0x1da>
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d123      	bne.n	800644a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	2b0b      	cmp	r3, #11
 8006406:	d106      	bne.n	8006416 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800640c:	f043 0303 	orr.w	r3, r3, #3
 8006410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006414:	e075      	b.n	8006502 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	429a      	cmp	r2, r3
 800641c:	d005      	beq.n	800642a <create_name+0x202>
 800641e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006422:	f043 0303 	orr.w	r3, r3, #3
 8006426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	429a      	cmp	r2, r3
 8006430:	d866      	bhi.n	8006500 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	2308      	movs	r3, #8
 8006438:	623b      	str	r3, [r7, #32]
 800643a:	230b      	movs	r3, #11
 800643c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800643e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006448:	e051      	b.n	80064ee <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800644a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800644c:	2b7f      	cmp	r3, #127	@ 0x7f
 800644e:	d914      	bls.n	800647a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006452:	2100      	movs	r1, #0
 8006454:	4618      	mov	r0, r3
 8006456:	f001 fab9 	bl	80079cc <ff_convert>
 800645a:	4603      	mov	r3, r0
 800645c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800645e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <create_name+0x246>
 8006464:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006466:	3b80      	subs	r3, #128	@ 0x80
 8006468:	4a23      	ldr	r2, [pc, #140]	@ (80064f8 <create_name+0x2d0>)
 800646a:	5cd3      	ldrb	r3, [r2, r3]
 800646c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800646e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006472:	f043 0302 	orr.w	r3, r3, #2
 8006476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800647a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <create_name+0x268>
 8006480:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006482:	4619      	mov	r1, r3
 8006484:	481d      	ldr	r0, [pc, #116]	@ (80064fc <create_name+0x2d4>)
 8006486:	f7fe fc00 	bl	8004c8a <chk_chr>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006490:	235f      	movs	r3, #95	@ 0x5f
 8006492:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006498:	f043 0303 	orr.w	r3, r3, #3
 800649c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80064a0:	e01b      	b.n	80064da <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80064a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064a4:	2b40      	cmp	r3, #64	@ 0x40
 80064a6:	d909      	bls.n	80064bc <create_name+0x294>
 80064a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064aa:	2b5a      	cmp	r3, #90	@ 0x5a
 80064ac:	d806      	bhi.n	80064bc <create_name+0x294>
					b |= 2;
 80064ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064b2:	f043 0302 	orr.w	r3, r3, #2
 80064b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80064ba:	e00e      	b.n	80064da <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80064bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064be:	2b60      	cmp	r3, #96	@ 0x60
 80064c0:	d90b      	bls.n	80064da <create_name+0x2b2>
 80064c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064c4:	2b7a      	cmp	r3, #122	@ 0x7a
 80064c6:	d808      	bhi.n	80064da <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80064c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064cc:	f043 0301 	orr.w	r3, r3, #1
 80064d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80064d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064d6:	3b20      	subs	r3, #32
 80064d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	623a      	str	r2, [r7, #32]
 80064e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80064e2:	b2d1      	uxtb	r1, r2
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4413      	add	r3, r2
 80064e8:	460a      	mov	r2, r1
 80064ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80064ee:	e763      	b.n	80063b8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80064f0:	bf00      	nop
 80064f2:	e006      	b.n	8006502 <create_name+0x2da>
 80064f4:	08008cb4 	.word	0x08008cb4
 80064f8:	08008d28 	.word	0x08008d28
 80064fc:	08008cc0 	.word	0x08008cc0
			if (si > di) break;			/* No extension */
 8006500:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006508:	2be5      	cmp	r3, #229	@ 0xe5
 800650a:	d103      	bne.n	8006514 <create_name+0x2ec>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2205      	movs	r2, #5
 8006510:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b08      	cmp	r3, #8
 8006518:	d104      	bne.n	8006524 <create_name+0x2fc>
 800651a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006524:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006528:	f003 030c 	and.w	r3, r3, #12
 800652c:	2b0c      	cmp	r3, #12
 800652e:	d005      	beq.n	800653c <create_name+0x314>
 8006530:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	2b03      	cmp	r3, #3
 800653a:	d105      	bne.n	8006548 <create_name+0x320>
 800653c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006540:	f043 0302 	orr.w	r3, r3, #2
 8006544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d117      	bne.n	8006584 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006554:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	2b01      	cmp	r3, #1
 800655e:	d105      	bne.n	800656c <create_name+0x344>
 8006560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006564:	f043 0310 	orr.w	r3, r3, #16
 8006568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800656c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006570:	f003 030c 	and.w	r3, r3, #12
 8006574:	2b04      	cmp	r3, #4
 8006576:	d105      	bne.n	8006584 <create_name+0x35c>
 8006578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800657c:	f043 0308 	orr.w	r3, r3, #8
 8006580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800658a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800658e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006590:	4618      	mov	r0, r3
 8006592:	3728      	adds	r7, #40	@ 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80065ac:	e002      	b.n	80065b4 <follow_path+0x1c>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	3301      	adds	r3, #1
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80065ba:	d0f8      	beq.n	80065ae <follow_path+0x16>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80065c2:	d0f4      	beq.n	80065ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b1f      	cmp	r3, #31
 80065d0:	d80a      	bhi.n	80065e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2280      	movs	r2, #128	@ 0x80
 80065d6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80065da:	2100      	movs	r1, #0
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff f8fe 	bl	80057de <dir_sdi>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]
 80065e6:	e048      	b.n	800667a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065e8:	463b      	mov	r3, r7
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fe1b 	bl	8006228 <create_name>
 80065f2:	4603      	mov	r3, r0
 80065f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d139      	bne.n	8006670 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff fc5a 	bl	8005eb6 <dir_find>
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800660c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b04      	cmp	r3, #4
 8006618:	d12c      	bne.n	8006674 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d127      	bne.n	8006674 <follow_path+0xdc>
 8006624:	2305      	movs	r3, #5
 8006626:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006628:	e024      	b.n	8006674 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800662a:	7afb      	ldrb	r3, [r7, #11]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d121      	bne.n	8006678 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	799b      	ldrb	r3, [r3, #6]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006640:	2305      	movs	r3, #5
 8006642:	75fb      	strb	r3, [r7, #23]
 8006644:	e019      	b.n	800667a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	8992      	ldrh	r2, [r2, #12]
 8006654:	fbb3 f0f2 	udiv	r0, r3, r2
 8006658:	fb00 f202 	mul.w	r2, r0, r2
 800665c:	1a9b      	subs	r3, r3, r2
 800665e:	440b      	add	r3, r1
 8006660:	4619      	mov	r1, r3
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff fa61 	bl	8005b2a <ld_clust>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800666e:	e7bb      	b.n	80065e8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006670:	bf00      	nop
 8006672:	e002      	b.n	800667a <follow_path+0xe2>
				break;
 8006674:	bf00      	nop
 8006676:	e000      	b.n	800667a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006678:	bf00      	nop
			}
		}
	}

	return res;
 800667a:	7dfb      	ldrb	r3, [r7, #23]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800668c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006690:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d031      	beq.n	80066fe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	e002      	b.n	80066a8 <get_ldnumber+0x24>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	3301      	adds	r3, #1
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b1f      	cmp	r3, #31
 80066ae:	d903      	bls.n	80066b8 <get_ldnumber+0x34>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b3a      	cmp	r3, #58	@ 0x3a
 80066b6:	d1f4      	bne.n	80066a2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80066be:	d11c      	bne.n	80066fa <get_ldnumber+0x76>
			tp = *path;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	60fa      	str	r2, [r7, #12]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	3b30      	subs	r3, #48	@ 0x30
 80066d0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b09      	cmp	r3, #9
 80066d6:	d80e      	bhi.n	80066f6 <get_ldnumber+0x72>
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d10a      	bne.n	80066f6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d107      	bne.n	80066f6 <get_ldnumber+0x72>
					vol = (int)i;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	3301      	adds	r3, #1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	e002      	b.n	8006700 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80066fe:	693b      	ldr	r3, [r7, #16]
}
 8006700:	4618      	mov	r0, r3
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	70da      	strb	r2, [r3, #3]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006722:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fe fc7a 	bl	8005020 <move_window>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <check_fs+0x2a>
 8006732:	2304      	movs	r3, #4
 8006734:	e038      	b.n	80067a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3338      	adds	r3, #56	@ 0x38
 800673a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe f9be 	bl	8004ac0 <ld_word>
 8006744:	4603      	mov	r3, r0
 8006746:	461a      	mov	r2, r3
 8006748:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800674c:	429a      	cmp	r2, r3
 800674e:	d001      	beq.n	8006754 <check_fs+0x48>
 8006750:	2303      	movs	r3, #3
 8006752:	e029      	b.n	80067a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800675a:	2be9      	cmp	r3, #233	@ 0xe9
 800675c:	d009      	beq.n	8006772 <check_fs+0x66>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006764:	2beb      	cmp	r3, #235	@ 0xeb
 8006766:	d11e      	bne.n	80067a6 <check_fs+0x9a>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800676e:	2b90      	cmp	r3, #144	@ 0x90
 8006770:	d119      	bne.n	80067a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3338      	adds	r3, #56	@ 0x38
 8006776:	3336      	adds	r3, #54	@ 0x36
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe f9b9 	bl	8004af0 <ld_dword>
 800677e:	4603      	mov	r3, r0
 8006780:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006784:	4a0a      	ldr	r2, [pc, #40]	@ (80067b0 <check_fs+0xa4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <check_fs+0x82>
 800678a:	2300      	movs	r3, #0
 800678c:	e00c      	b.n	80067a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3338      	adds	r3, #56	@ 0x38
 8006792:	3352      	adds	r3, #82	@ 0x52
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe f9ab 	bl	8004af0 <ld_dword>
 800679a:	4603      	mov	r3, r0
 800679c:	4a05      	ldr	r2, [pc, #20]	@ (80067b4 <check_fs+0xa8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d101      	bne.n	80067a6 <check_fs+0x9a>
 80067a2:	2300      	movs	r3, #0
 80067a4:	e000      	b.n	80067a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80067a6:	2302      	movs	r3, #2
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	00544146 	.word	0x00544146
 80067b4:	33544146 	.word	0x33544146

080067b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b096      	sub	sp, #88	@ 0x58
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff ff59 	bl	8006684 <get_ldnumber>
 80067d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80067d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da01      	bge.n	80067de <find_volume+0x26>
 80067da:	230b      	movs	r3, #11
 80067dc:	e262      	b.n	8006ca4 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80067de:	4a9f      	ldr	r2, [pc, #636]	@ (8006a5c <find_volume+0x2a4>)
 80067e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80067e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <find_volume+0x3a>
 80067ee:	230c      	movs	r3, #12
 80067f0:	e258      	b.n	8006ca4 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01a      	beq.n	800683e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe f8b7 	bl	8004980 <disk_status>
 8006812:	4603      	mov	r3, r0
 8006814:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006818:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10c      	bne.n	800683e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <find_volume+0x82>
 800682a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006836:	230a      	movs	r3, #10
 8006838:	e234      	b.n	8006ca4 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800683a:	2300      	movs	r3, #0
 800683c:	e232      	b.n	8006ca4 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006846:	b2da      	uxtb	r2, r3
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f8af 	bl	80049b4 <disk_initialize>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800685c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006868:	2303      	movs	r3, #3
 800686a:	e21b      	b.n	8006ca4 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <find_volume+0xca>
 8006872:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800687e:	230a      	movs	r3, #10
 8006880:	e210      	b.n	8006ca4 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006884:	7858      	ldrb	r0, [r3, #1]
 8006886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006888:	330c      	adds	r3, #12
 800688a:	461a      	mov	r2, r3
 800688c:	2102      	movs	r1, #2
 800688e:	f7fe f8f9 	bl	8004a84 <disk_ioctl>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <find_volume+0xe4>
 8006898:	2301      	movs	r3, #1
 800689a:	e203      	b.n	8006ca4 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800689c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689e:	899b      	ldrh	r3, [r3, #12]
 80068a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a4:	d80d      	bhi.n	80068c2 <find_volume+0x10a>
 80068a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a8:	899b      	ldrh	r3, [r3, #12]
 80068aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ae:	d308      	bcc.n	80068c2 <find_volume+0x10a>
 80068b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b2:	899b      	ldrh	r3, [r3, #12]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b8:	899b      	ldrh	r3, [r3, #12]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	4013      	ands	r3, r2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <find_volume+0x10e>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e1ee      	b.n	8006ca4 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80068ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80068ce:	f7ff ff1d 	bl	800670c <check_fs>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80068d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d149      	bne.n	8006974 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80068e0:	2300      	movs	r3, #0
 80068e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80068e4:	e01e      	b.n	8006924 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80068e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80068ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80068f4:	4413      	add	r3, r2
 80068f6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80068f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fa:	3304      	adds	r3, #4
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d006      	beq.n	8006910 <find_volume+0x158>
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	3308      	adds	r3, #8
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe f8f2 	bl	8004af0 <ld_dword>
 800690c:	4602      	mov	r2, r0
 800690e:	e000      	b.n	8006912 <find_volume+0x15a>
 8006910:	2200      	movs	r2, #0
 8006912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	3358      	adds	r3, #88	@ 0x58
 8006918:	443b      	add	r3, r7
 800691a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800691e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006920:	3301      	adds	r3, #1
 8006922:	643b      	str	r3, [r7, #64]	@ 0x40
 8006924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006926:	2b03      	cmp	r3, #3
 8006928:	d9dd      	bls.n	80068e6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800692a:	2300      	movs	r3, #0
 800692c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800692e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <find_volume+0x182>
 8006934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006936:	3b01      	subs	r3, #1
 8006938:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800693a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	3358      	adds	r3, #88	@ 0x58
 8006940:	443b      	add	r3, r7
 8006942:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006946:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <find_volume+0x1a2>
 800694e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006950:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006952:	f7ff fedb 	bl	800670c <check_fs>
 8006956:	4603      	mov	r3, r0
 8006958:	e000      	b.n	800695c <find_volume+0x1a4>
 800695a:	2303      	movs	r3, #3
 800695c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006960:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006964:	2b01      	cmp	r3, #1
 8006966:	d905      	bls.n	8006974 <find_volume+0x1bc>
 8006968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800696a:	3301      	adds	r3, #1
 800696c:	643b      	str	r3, [r7, #64]	@ 0x40
 800696e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006970:	2b03      	cmp	r3, #3
 8006972:	d9e2      	bls.n	800693a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006974:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006978:	2b04      	cmp	r3, #4
 800697a:	d101      	bne.n	8006980 <find_volume+0x1c8>
 800697c:	2301      	movs	r3, #1
 800697e:	e191      	b.n	8006ca4 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006980:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006984:	2b01      	cmp	r3, #1
 8006986:	d901      	bls.n	800698c <find_volume+0x1d4>
 8006988:	230d      	movs	r3, #13
 800698a:	e18b      	b.n	8006ca4 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800698c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698e:	3338      	adds	r3, #56	@ 0x38
 8006990:	330b      	adds	r3, #11
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe f894 	bl	8004ac0 <ld_word>
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699e:	899b      	ldrh	r3, [r3, #12]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d001      	beq.n	80069a8 <find_volume+0x1f0>
 80069a4:	230d      	movs	r3, #13
 80069a6:	e17d      	b.n	8006ca4 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	3338      	adds	r3, #56	@ 0x38
 80069ac:	3316      	adds	r3, #22
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe f886 	bl	8004ac0 <ld_word>
 80069b4:	4603      	mov	r3, r0
 80069b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80069b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <find_volume+0x214>
 80069be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c0:	3338      	adds	r3, #56	@ 0x38
 80069c2:	3324      	adds	r3, #36	@ 0x24
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fe f893 	bl	8004af0 <ld_dword>
 80069ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80069cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069d0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80069d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80069d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80069dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069de:	789b      	ldrb	r3, [r3, #2]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d005      	beq.n	80069f0 <find_volume+0x238>
 80069e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e6:	789b      	ldrb	r3, [r3, #2]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d001      	beq.n	80069f0 <find_volume+0x238>
 80069ec:	230d      	movs	r3, #13
 80069ee:	e159      	b.n	8006ca4 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	789b      	ldrb	r3, [r3, #2]
 80069f4:	461a      	mov	r2, r3
 80069f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f8:	fb02 f303 	mul.w	r3, r2, r3
 80069fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80069fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a04:	461a      	mov	r2, r3
 8006a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a08:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	895b      	ldrh	r3, [r3, #10]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <find_volume+0x26c>
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	895b      	ldrh	r3, [r3, #10]
 8006a16:	461a      	mov	r2, r3
 8006a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1a:	895b      	ldrh	r3, [r3, #10]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <find_volume+0x270>
 8006a24:	230d      	movs	r3, #13
 8006a26:	e13d      	b.n	8006ca4 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2a:	3338      	adds	r3, #56	@ 0x38
 8006a2c:	3311      	adds	r3, #17
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe f846 	bl	8004ac0 <ld_word>
 8006a34:	4603      	mov	r3, r0
 8006a36:	461a      	mov	r2, r3
 8006a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3e:	891b      	ldrh	r3, [r3, #8]
 8006a40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a42:	8992      	ldrh	r2, [r2, #12]
 8006a44:	0952      	lsrs	r2, r2, #5
 8006a46:	b292      	uxth	r2, r2
 8006a48:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a4c:	fb01 f202 	mul.w	r2, r1, r2
 8006a50:	1a9b      	subs	r3, r3, r2
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <find_volume+0x2a8>
 8006a58:	230d      	movs	r3, #13
 8006a5a:	e123      	b.n	8006ca4 <find_volume+0x4ec>
 8006a5c:	20002244 	.word	0x20002244

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a62:	3338      	adds	r3, #56	@ 0x38
 8006a64:	3313      	adds	r3, #19
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe f82a 	bl	8004ac0 <ld_word>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <find_volume+0x2cc>
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	3338      	adds	r3, #56	@ 0x38
 8006a7a:	3320      	adds	r3, #32
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe f837 	bl	8004af0 <ld_dword>
 8006a82:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	3338      	adds	r3, #56	@ 0x38
 8006a88:	330e      	adds	r3, #14
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe f818 	bl	8004ac0 <ld_word>
 8006a90:	4603      	mov	r3, r0
 8006a92:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006a94:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <find_volume+0x2e6>
 8006a9a:	230d      	movs	r3, #13
 8006a9c:	e102      	b.n	8006ca4 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006a9e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aa2:	4413      	add	r3, r2
 8006aa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aa6:	8911      	ldrh	r1, [r2, #8]
 8006aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aaa:	8992      	ldrh	r2, [r2, #12]
 8006aac:	0952      	lsrs	r2, r2, #5
 8006aae:	b292      	uxth	r2, r2
 8006ab0:	fbb1 f2f2 	udiv	r2, r1, r2
 8006ab4:	b292      	uxth	r2, r2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d201      	bcs.n	8006ac6 <find_volume+0x30e>
 8006ac2:	230d      	movs	r3, #13
 8006ac4:	e0ee      	b.n	8006ca4 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006ac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ace:	8952      	ldrh	r2, [r2, #10]
 8006ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ad4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <find_volume+0x328>
 8006adc:	230d      	movs	r3, #13
 8006ade:	e0e1      	b.n	8006ca4 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d802      	bhi.n	8006af6 <find_volume+0x33e>
 8006af0:	2302      	movs	r3, #2
 8006af2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d802      	bhi.n	8006b06 <find_volume+0x34e>
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	1c9a      	adds	r2, r3, #2
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b12:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006b14:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b18:	441a      	add	r2, r3
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006b1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b22:	441a      	add	r2, r3
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006b28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d11e      	bne.n	8006b6e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b32:	3338      	adds	r3, #56	@ 0x38
 8006b34:	332a      	adds	r3, #42	@ 0x2a
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fd ffc2 	bl	8004ac0 <ld_word>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <find_volume+0x38e>
 8006b42:	230d      	movs	r3, #13
 8006b44:	e0ae      	b.n	8006ca4 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b48:	891b      	ldrh	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <find_volume+0x39a>
 8006b4e:	230d      	movs	r3, #13
 8006b50:	e0a8      	b.n	8006ca4 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b54:	3338      	adds	r3, #56	@ 0x38
 8006b56:	332c      	adds	r3, #44	@ 0x2c
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fd ffc9 	bl	8004af0 <ld_dword>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b62:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b6c:	e01f      	b.n	8006bae <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b70:	891b      	ldrh	r3, [r3, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <find_volume+0x3c2>
 8006b76:	230d      	movs	r3, #13
 8006b78:	e094      	b.n	8006ca4 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b80:	441a      	add	r2, r3
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006b86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d103      	bne.n	8006b96 <find_volume+0x3de>
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	e00a      	b.n	8006bac <find_volume+0x3f4>
 8006b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b98:	69da      	ldr	r2, [r3, #28]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4413      	add	r3, r2
 8006ba0:	085a      	lsrs	r2, r3, #1
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006bac:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb0:	6a1a      	ldr	r2, [r3, #32]
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	899b      	ldrh	r3, [r3, #12]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bba:	440b      	add	r3, r1
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006bc0:	8989      	ldrh	r1, [r1, #12]
 8006bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d201      	bcs.n	8006bce <find_volume+0x416>
 8006bca:	230d      	movs	r3, #13
 8006bcc:	e06a      	b.n	8006ca4 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bd4:	619a      	str	r2, [r3, #24]
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be0:	2280      	movs	r2, #128	@ 0x80
 8006be2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006be4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d149      	bne.n	8006c80 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bee:	3338      	adds	r3, #56	@ 0x38
 8006bf0:	3330      	adds	r3, #48	@ 0x30
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fd ff64 	bl	8004ac0 <ld_word>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d140      	bne.n	8006c80 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c00:	3301      	adds	r3, #1
 8006c02:	4619      	mov	r1, r3
 8006c04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c06:	f7fe fa0b 	bl	8005020 <move_window>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d137      	bne.n	8006c80 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c12:	2200      	movs	r2, #0
 8006c14:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c18:	3338      	adds	r3, #56	@ 0x38
 8006c1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fd ff4e 	bl	8004ac0 <ld_word>
 8006c24:	4603      	mov	r3, r0
 8006c26:	461a      	mov	r2, r3
 8006c28:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d127      	bne.n	8006c80 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	3338      	adds	r3, #56	@ 0x38
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fd ff5b 	bl	8004af0 <ld_dword>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cac <find_volume+0x4f4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d11e      	bne.n	8006c80 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	3338      	adds	r3, #56	@ 0x38
 8006c46:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fd ff50 	bl	8004af0 <ld_dword>
 8006c50:	4603      	mov	r3, r0
 8006c52:	4a17      	ldr	r2, [pc, #92]	@ (8006cb0 <find_volume+0x4f8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d113      	bne.n	8006c80 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	3338      	adds	r3, #56	@ 0x38
 8006c5c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd ff45 	bl	8004af0 <ld_dword>
 8006c66:	4602      	mov	r2, r0
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6e:	3338      	adds	r3, #56	@ 0x38
 8006c70:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fd ff3b 	bl	8004af0 <ld_dword>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c82:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006c86:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006c88:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb4 <find_volume+0x4fc>)
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	4b08      	ldr	r3, [pc, #32]	@ (8006cb4 <find_volume+0x4fc>)
 8006c92:	801a      	strh	r2, [r3, #0]
 8006c94:	4b07      	ldr	r3, [pc, #28]	@ (8006cb4 <find_volume+0x4fc>)
 8006c96:	881a      	ldrh	r2, [r3, #0]
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006c9c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c9e:	f7fe f957 	bl	8004f50 <clear_lock>
#endif
	return FR_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3758      	adds	r7, #88	@ 0x58
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	41615252 	.word	0x41615252
 8006cb0:	61417272 	.word	0x61417272
 8006cb4:	20002248 	.word	0x20002248

08006cb8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006cc2:	2309      	movs	r3, #9
 8006cc4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01c      	beq.n	8006d06 <validate+0x4e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d018      	beq.n	8006d06 <validate+0x4e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d013      	beq.n	8006d06 <validate+0x4e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	889a      	ldrh	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	88db      	ldrh	r3, [r3, #6]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d10c      	bne.n	8006d06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fd fe44 	bl	8004980 <disk_status>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <validate+0x4e>
			res = FR_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d102      	bne.n	8006d12 <validate+0x5a>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	e000      	b.n	8006d14 <validate+0x5c>
 8006d12:	2300      	movs	r3, #0
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	6013      	str	r3, [r2, #0]
	return res;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006d36:	f107 0310 	add.w	r3, r7, #16
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff fca2 	bl	8006684 <get_ldnumber>
 8006d40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	da01      	bge.n	8006d4c <f_mount+0x28>
 8006d48:	230b      	movs	r3, #11
 8006d4a:	e02b      	b.n	8006da4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006d4c:	4a17      	ldr	r2, [pc, #92]	@ (8006dac <f_mount+0x88>)
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006d5c:	69b8      	ldr	r0, [r7, #24]
 8006d5e:	f7fe f8f7 	bl	8004f50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	490d      	ldr	r1, [pc, #52]	@ (8006dac <f_mount+0x88>)
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <f_mount+0x66>
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d001      	beq.n	8006d8e <f_mount+0x6a>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e00a      	b.n	8006da4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006d8e:	f107 010c 	add.w	r1, r7, #12
 8006d92:	f107 0308 	add.w	r3, r7, #8
 8006d96:	2200      	movs	r2, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fd0d 	bl	80067b8 <find_volume>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3720      	adds	r7, #32
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20002244 	.word	0x20002244

08006db0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b09a      	sub	sp, #104	@ 0x68
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <f_open+0x18>
 8006dc4:	2309      	movs	r3, #9
 8006dc6:	e1c7      	b.n	8007158 <f_open+0x3a8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006dd0:	79fa      	ldrb	r2, [r7, #7]
 8006dd2:	f107 0110 	add.w	r1, r7, #16
 8006dd6:	f107 0308 	add.w	r3, r7, #8
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff fcec 	bl	80067b8 <find_volume>
 8006de0:	4603      	mov	r3, r0
 8006de2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006de6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f040 81ab 	bne.w	8007146 <f_open+0x396>
		dj.obj.fs = fs;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8006df4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006df8:	f000 feae 	bl	8007b58 <ff_memalloc>
 8006dfc:	65b8      	str	r0, [r7, #88]	@ 0x58
 8006dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <f_open+0x58>
 8006e04:	2311      	movs	r3, #17
 8006e06:	e1a7      	b.n	8007158 <f_open+0x3a8>
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e0c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	f107 0314 	add.w	r3, r7, #20
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fbbe 	bl	8006598 <follow_path>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006e22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d118      	bne.n	8006e5c <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006e2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e2e:	b25b      	sxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	da03      	bge.n	8006e3c <f_open+0x8c>
				res = FR_INVALID_NAME;
 8006e34:	2306      	movs	r3, #6
 8006e36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006e3a:	e00f      	b.n	8006e5c <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	bf8c      	ite	hi
 8006e42:	2301      	movhi	r3, #1
 8006e44:	2300      	movls	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f107 0314 	add.w	r3, r7, #20
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fd ff35 	bl	8004cc0 <chk_lock>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006e5c:	79fb      	ldrb	r3, [r7, #7]
 8006e5e:	f003 031c 	and.w	r3, r3, #28
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d07f      	beq.n	8006f66 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 8006e66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d017      	beq.n	8006e9e <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006e6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d10e      	bne.n	8006e94 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006e76:	f7fd ff7f 	bl	8004d78 <enq_lock>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <f_open+0xde>
 8006e80:	f107 0314 	add.w	r3, r7, #20
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff f8d7 	bl	8006038 <dir_register>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	e000      	b.n	8006e90 <f_open+0xe0>
 8006e8e:	2312      	movs	r3, #18
 8006e90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	f043 0308 	orr.w	r3, r3, #8
 8006e9a:	71fb      	strb	r3, [r7, #7]
 8006e9c:	e010      	b.n	8006ec0 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006e9e:	7ebb      	ldrb	r3, [r7, #26]
 8006ea0:	f003 0311 	and.w	r3, r3, #17
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <f_open+0x100>
					res = FR_DENIED;
 8006ea8:	2307      	movs	r3, #7
 8006eaa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006eae:	e007      	b.n	8006ec0 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <f_open+0x110>
 8006eba:	2308      	movs	r3, #8
 8006ebc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006ec0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d168      	bne.n	8006f9a <f_open+0x1ea>
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d063      	beq.n	8006f9a <f_open+0x1ea>
				dw = GET_FATTIME();
 8006ed2:	f7fd fbcf 	bl	8004674 <get_fattime>
 8006ed6:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eda:	330e      	adds	r3, #14
 8006edc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fd fe44 	bl	8004b6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee6:	3316      	adds	r3, #22
 8006ee8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fd fe3e 	bl	8004b6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef2:	330b      	adds	r3, #11
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fe13 	bl	8005b2a <ld_clust>
 8006f04:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe fe2b 	bl	8005b68 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f14:	331c      	adds	r3, #28
 8006f16:	2100      	movs	r1, #0
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fd fe27 	bl	8004b6c <st_dword>
					fs->wflag = 1;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	2201      	movs	r2, #1
 8006f22:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d037      	beq.n	8006f9a <f_open+0x1ea>
						dw = fs->winsect;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f2e:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	2200      	movs	r2, #0
 8006f36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fb1b 	bl	8005574 <remove_chain>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006f44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d126      	bne.n	8006f9a <f_open+0x1ea>
							res = move_window(fs, dw);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe f865 	bl	8005020 <move_window>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f60:	3a01      	subs	r2, #1
 8006f62:	615a      	str	r2, [r3, #20]
 8006f64:	e019      	b.n	8006f9a <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006f66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d115      	bne.n	8006f9a <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006f6e:	7ebb      	ldrb	r3, [r7, #26]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <f_open+0x1d0>
					res = FR_NO_FILE;
 8006f78:	2304      	movs	r3, #4
 8006f7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006f7e:	e00c      	b.n	8006f9a <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <f_open+0x1ea>
 8006f8a:	7ebb      	ldrb	r3, [r7, #26]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <f_open+0x1ea>
						res = FR_DENIED;
 8006f94:	2307      	movs	r3, #7
 8006f96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006f9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d126      	bne.n	8006ff0 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <f_open+0x204>
				mode |= FA_MODIFIED;
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fb2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006fbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	bf8c      	ite	hi
 8006fc8:	2301      	movhi	r3, #1
 8006fca:	2300      	movls	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f107 0314 	add.w	r3, r7, #20
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fd fef0 	bl	8004dbc <inc_lock>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <f_open+0x240>
 8006fea:	2302      	movs	r3, #2
 8006fec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f040 80a3 	bne.w	8007140 <f_open+0x390>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fd92 	bl	8005b2a <ld_clust>
 8007006:	4602      	mov	r2, r0
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800700c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700e:	331c      	adds	r3, #28
 8007010:	4618      	mov	r0, r3
 8007012:	f7fd fd6d 	bl	8004af0 <ld_dword>
 8007016:	4602      	mov	r2, r0
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	88da      	ldrh	r2, [r3, #6]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	79fa      	ldrb	r2, [r7, #7]
 8007034:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3330      	adds	r3, #48	@ 0x30
 800704c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f7fd fdd7 	bl	8004c06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b00      	cmp	r3, #0
 8007060:	d06e      	beq.n	8007140 <f_open+0x390>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d06a      	beq.n	8007140 <f_open+0x390>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	895b      	ldrh	r3, [r3, #10]
 8007076:	461a      	mov	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	899b      	ldrh	r3, [r3, #12]
 800707c:	fb02 f303 	mul.w	r3, r2, r3
 8007080:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800708e:	e016      	b.n	80070be <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007094:	4618      	mov	r0, r3
 8007096:	f7fe f880 	bl	800519a <get_fat>
 800709a:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800709c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d802      	bhi.n	80070a8 <f_open+0x2f8>
 80070a2:	2302      	movs	r3, #2
 80070a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80070a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070ae:	d102      	bne.n	80070b6 <f_open+0x306>
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80070b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d103      	bne.n	80070ce <f_open+0x31e>
 80070c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80070c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d8e0      	bhi.n	8007090 <f_open+0x2e0>
				}
				fp->clust = clst;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070d2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80070d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d131      	bne.n	8007140 <f_open+0x390>
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	899b      	ldrh	r3, [r3, #12]
 80070e0:	461a      	mov	r2, r3
 80070e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80070e8:	fb01 f202 	mul.w	r2, r1, r2
 80070ec:	1a9b      	subs	r3, r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d026      	beq.n	8007140 <f_open+0x390>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe f830 	bl	800515c <clust2sect>
 80070fc:	64b8      	str	r0, [r7, #72]	@ 0x48
 80070fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <f_open+0x35c>
						res = FR_INT_ERR;
 8007104:	2302      	movs	r3, #2
 8007106:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800710a:	e019      	b.n	8007140 <f_open+0x390>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	899b      	ldrh	r3, [r3, #12]
 8007110:	461a      	mov	r2, r3
 8007112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007114:	fbb3 f2f2 	udiv	r2, r3, r2
 8007118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800711a:	441a      	add	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	7858      	ldrb	r0, [r3, #1]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1a      	ldr	r2, [r3, #32]
 800712e:	2301      	movs	r3, #1
 8007130:	f7fd fc68 	bl	8004a04 <disk_read>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <f_open+0x390>
 800713a:	2301      	movs	r3, #1
 800713c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8007140:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007142:	f000 fd15 	bl	8007b70 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007146:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <f_open+0x3a4>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007154:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007158:	4618      	mov	r0, r3
 800715a:	3768      	adds	r7, #104	@ 0x68
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08e      	sub	sp, #56	@ 0x38
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f107 0214 	add.w	r2, r7, #20
 800717e:	4611      	mov	r1, r2
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff fd99 	bl	8006cb8 <validate>
 8007186:	4603      	mov	r3, r0
 8007188:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800718c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007190:	2b00      	cmp	r3, #0
 8007192:	d107      	bne.n	80071a4 <f_read+0x44>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	7d5b      	ldrb	r3, [r3, #21]
 8007198:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800719c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <f_read+0x4a>
 80071a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80071a8:	e135      	b.n	8007416 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	7d1b      	ldrb	r3, [r3, #20]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <f_read+0x5a>
 80071b6:	2307      	movs	r3, #7
 80071b8:	e12d      	b.n	8007416 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	f240 811e 	bls.w	800740c <f_read+0x2ac>
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80071d4:	e11a      	b.n	800740c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	8992      	ldrh	r2, [r2, #12]
 80071de:	fbb3 f1f2 	udiv	r1, r3, r2
 80071e2:	fb01 f202 	mul.w	r2, r1, r2
 80071e6:	1a9b      	subs	r3, r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f040 80d5 	bne.w	8007398 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	8992      	ldrh	r2, [r2, #12]
 80071f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	8952      	ldrh	r2, [r2, #10]
 80071fe:	3a01      	subs	r2, #1
 8007200:	4013      	ands	r3, r2
 8007202:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d12f      	bne.n	800726a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	633b      	str	r3, [r7, #48]	@ 0x30
 8007218:	e013      	b.n	8007242 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	4619      	mov	r1, r3
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f7fe faa0 	bl	800576e <clmt_clust>
 800722e:	6338      	str	r0, [r7, #48]	@ 0x30
 8007230:	e007      	b.n	8007242 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7fd ffad 	bl	800519a <get_fat>
 8007240:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	2b01      	cmp	r3, #1
 8007246:	d804      	bhi.n	8007252 <f_read+0xf2>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2202      	movs	r2, #2
 800724c:	755a      	strb	r2, [r3, #21]
 800724e:	2302      	movs	r3, #2
 8007250:	e0e1      	b.n	8007416 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007258:	d104      	bne.n	8007264 <f_read+0x104>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	755a      	strb	r2, [r3, #21]
 8007260:	2301      	movs	r3, #1
 8007262:	e0d8      	b.n	8007416 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007268:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f7fd ff72 	bl	800515c <clust2sect>
 8007278:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <f_read+0x12a>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2202      	movs	r2, #2
 8007284:	755a      	strb	r2, [r3, #21]
 8007286:	2302      	movs	r3, #2
 8007288:	e0c5      	b.n	8007416 <f_read+0x2b6>
			sect += csect;
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4413      	add	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	899b      	ldrh	r3, [r3, #12]
 8007296:	461a      	mov	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	fbb3 f3f2 	udiv	r3, r3, r2
 800729e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d041      	beq.n	800732a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072aa:	4413      	add	r3, r2
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	8952      	ldrh	r2, [r2, #10]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d905      	bls.n	80072c0 <f_read+0x160>
					cc = fs->csize - csect;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	895b      	ldrh	r3, [r3, #10]
 80072b8:	461a      	mov	r2, r3
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	7858      	ldrb	r0, [r3, #1]
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072ca:	f7fd fb9b 	bl	8004a04 <disk_read>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <f_read+0x17e>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2201      	movs	r2, #1
 80072d8:	755a      	strb	r2, [r3, #21]
 80072da:	2301      	movs	r3, #1
 80072dc:	e09b      	b.n	8007416 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	7d1b      	ldrb	r3, [r3, #20]
 80072e2:	b25b      	sxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da18      	bge.n	800731a <f_read+0x1ba>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d911      	bls.n	800731a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1a      	ldr	r2, [r3, #32]
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	8992      	ldrh	r2, [r2, #12]
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007308:	18d0      	adds	r0, r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	899b      	ldrh	r3, [r3, #12]
 8007314:	461a      	mov	r2, r3
 8007316:	f7fd fc55 	bl	8004bc4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	899b      	ldrh	r3, [r3, #12]
 800731e:	461a      	mov	r2, r3
 8007320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007322:	fb02 f303 	mul.w	r3, r2, r3
 8007326:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007328:	e05c      	b.n	80073e4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	429a      	cmp	r2, r3
 8007332:	d02e      	beq.n	8007392 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	7d1b      	ldrb	r3, [r3, #20]
 8007338:	b25b      	sxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	da18      	bge.n	8007370 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	7858      	ldrb	r0, [r3, #1]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1a      	ldr	r2, [r3, #32]
 800734c:	2301      	movs	r3, #1
 800734e:	f7fd fb79 	bl	8004a44 <disk_write>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <f_read+0x202>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	755a      	strb	r2, [r3, #21]
 800735e:	2301      	movs	r3, #1
 8007360:	e059      	b.n	8007416 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	7d1b      	ldrb	r3, [r3, #20]
 8007366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800736a:	b2da      	uxtb	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	7858      	ldrb	r0, [r3, #1]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800737a:	2301      	movs	r3, #1
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	f7fd fb41 	bl	8004a04 <disk_read>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d004      	beq.n	8007392 <f_read+0x232>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	755a      	strb	r2, [r3, #21]
 800738e:	2301      	movs	r3, #1
 8007390:	e041      	b.n	8007416 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	899b      	ldrh	r3, [r3, #12]
 800739c:	4618      	mov	r0, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	8992      	ldrh	r2, [r2, #12]
 80073a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80073aa:	fb01 f202 	mul.w	r2, r1, r2
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	1ac3      	subs	r3, r0, r3
 80073b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80073b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d901      	bls.n	80073c0 <f_read+0x260>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	8992      	ldrh	r2, [r2, #12]
 80073ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80073d2:	fb00 f202 	mul.w	r2, r0, r2
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	440b      	add	r3, r1
 80073da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073dc:	4619      	mov	r1, r3
 80073de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80073e0:	f7fd fbf0 	bl	8004bc4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80073e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	4413      	add	r3, r2
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f2:	441a      	add	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	619a      	str	r2, [r3, #24]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fe:	441a      	add	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f47f aee1 	bne.w	80071d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3738      	adds	r7, #56	@ 0x38
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b08c      	sub	sp, #48	@ 0x30
 8007422:	af00      	add	r7, sp, #0
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f107 0210 	add.w	r2, r7, #16
 800743c:	4611      	mov	r1, r2
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fc3a 	bl	8006cb8 <validate>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800744a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <f_write+0x44>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	7d5b      	ldrb	r3, [r3, #21]
 8007456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800745a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <f_write+0x4a>
 8007462:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007466:	e16a      	b.n	800773e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	7d1b      	ldrb	r3, [r3, #20]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <f_write+0x5a>
 8007474:	2307      	movs	r3, #7
 8007476:	e162      	b.n	800773e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	699a      	ldr	r2, [r3, #24]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	441a      	add	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	429a      	cmp	r2, r3
 8007486:	f080 814c 	bcs.w	8007722 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	43db      	mvns	r3, r3
 8007490:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007492:	e146      	b.n	8007722 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	8992      	ldrh	r2, [r2, #12]
 800749c:	fbb3 f1f2 	udiv	r1, r3, r2
 80074a0:	fb01 f202 	mul.w	r2, r1, r2
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f040 80f1 	bne.w	800768e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	8992      	ldrh	r2, [r2, #12]
 80074b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	8952      	ldrh	r2, [r2, #10]
 80074bc:	3a01      	subs	r2, #1
 80074be:	4013      	ands	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d143      	bne.n	8007550 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10c      	bne.n	80074ea <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d11a      	bne.n	8007512 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2100      	movs	r1, #0
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe f8ac 	bl	800563e <create_chain>
 80074e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80074e8:	e013      	b.n	8007512 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	4619      	mov	r1, r3
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7fe f938 	bl	800576e <clmt_clust>
 80074fe:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007500:	e007      	b.n	8007512 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f7fe f897 	bl	800563e <create_chain>
 8007510:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8109 	beq.w	800772c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800751a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751c:	2b01      	cmp	r3, #1
 800751e:	d104      	bne.n	800752a <f_write+0x10c>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2202      	movs	r2, #2
 8007524:	755a      	strb	r2, [r3, #21]
 8007526:	2302      	movs	r3, #2
 8007528:	e109      	b.n	800773e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007530:	d104      	bne.n	800753c <f_write+0x11e>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	755a      	strb	r2, [r3, #21]
 8007538:	2301      	movs	r3, #1
 800753a:	e100      	b.n	800773e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007540:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <f_write+0x132>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800754e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	7d1b      	ldrb	r3, [r3, #20]
 8007554:	b25b      	sxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	da18      	bge.n	800758c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	7858      	ldrb	r0, [r3, #1]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1a      	ldr	r2, [r3, #32]
 8007568:	2301      	movs	r3, #1
 800756a:	f7fd fa6b 	bl	8004a44 <disk_write>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <f_write+0x160>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	755a      	strb	r2, [r3, #21]
 800757a:	2301      	movs	r3, #1
 800757c:	e0df      	b.n	800773e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	7d1b      	ldrb	r3, [r3, #20]
 8007582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007586:	b2da      	uxtb	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4619      	mov	r1, r3
 8007594:	4610      	mov	r0, r2
 8007596:	f7fd fde1 	bl	800515c <clust2sect>
 800759a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d104      	bne.n	80075ac <f_write+0x18e>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2202      	movs	r2, #2
 80075a6:	755a      	strb	r2, [r3, #21]
 80075a8:	2302      	movs	r3, #2
 80075aa:	e0c8      	b.n	800773e <f_write+0x320>
			sect += csect;
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	4413      	add	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	899b      	ldrh	r3, [r3, #12]
 80075b8:	461a      	mov	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80075c0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d043      	beq.n	8007650 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	4413      	add	r3, r2
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	8952      	ldrh	r2, [r2, #10]
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d905      	bls.n	80075e2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	895b      	ldrh	r3, [r3, #10]
 80075da:	461a      	mov	r2, r3
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	7858      	ldrb	r0, [r3, #1]
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	69f9      	ldr	r1, [r7, #28]
 80075ec:	f7fd fa2a 	bl	8004a44 <disk_write>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <f_write+0x1e2>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	755a      	strb	r2, [r3, #21]
 80075fc:	2301      	movs	r3, #1
 80075fe:	e09e      	b.n	800773e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	6a3a      	ldr	r2, [r7, #32]
 800760a:	429a      	cmp	r2, r3
 800760c:	d918      	bls.n	8007640 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	8992      	ldrh	r2, [r2, #12]
 8007620:	fb02 f303 	mul.w	r3, r2, r3
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	18d1      	adds	r1, r2, r3
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	899b      	ldrh	r3, [r3, #12]
 800762c:	461a      	mov	r2, r3
 800762e:	f7fd fac9 	bl	8004bc4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	7d1b      	ldrb	r3, [r3, #20]
 8007636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	899b      	ldrh	r3, [r3, #12]
 8007644:	461a      	mov	r2, r3
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	fb02 f303 	mul.w	r3, r2, r3
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800764e:	e04b      	b.n	80076e8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	429a      	cmp	r2, r3
 8007658:	d016      	beq.n	8007688 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007662:	429a      	cmp	r2, r3
 8007664:	d210      	bcs.n	8007688 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	7858      	ldrb	r0, [r3, #1]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007670:	2301      	movs	r3, #1
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	f7fd f9c6 	bl	8004a04 <disk_read>
 8007678:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	755a      	strb	r2, [r3, #21]
 8007684:	2301      	movs	r3, #1
 8007686:	e05a      	b.n	800773e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	899b      	ldrh	r3, [r3, #12]
 8007692:	4618      	mov	r0, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	8992      	ldrh	r2, [r2, #12]
 800769c:	fbb3 f1f2 	udiv	r1, r3, r2
 80076a0:	fb01 f202 	mul.w	r2, r1, r2
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	1ac3      	subs	r3, r0, r3
 80076a8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80076aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d901      	bls.n	80076b6 <f_write+0x298>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	8992      	ldrh	r2, [r2, #12]
 80076c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80076c8:	fb00 f202 	mul.w	r2, r0, r2
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	440b      	add	r3, r1
 80076d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076d2:	69f9      	ldr	r1, [r7, #28]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fd fa75 	bl	8004bc4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	7d1b      	ldrb	r3, [r3, #20]
 80076de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	4413      	add	r3, r2
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	441a      	add	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	619a      	str	r2, [r3, #24]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	429a      	cmp	r2, r3
 8007706:	bf38      	it	cc
 8007708:	461a      	movcc	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	60da      	str	r2, [r3, #12]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	441a      	add	r2, r3
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	f47f aeb5 	bne.w	8007494 <f_write+0x76>
 800772a:	e000      	b.n	800772e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800772c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	7d1b      	ldrb	r3, [r3, #20]
 8007732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007736:	b2da      	uxtb	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3730      	adds	r7, #48	@ 0x30
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f107 0208 	add.w	r2, r7, #8
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff faae 	bl	8006cb8 <validate>
 800775c:	4603      	mov	r3, r0
 800775e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d168      	bne.n	8007838 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7d1b      	ldrb	r3, [r3, #20]
 800776a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d062      	beq.n	8007838 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	7d1b      	ldrb	r3, [r3, #20]
 8007776:	b25b      	sxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	da15      	bge.n	80077a8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	7858      	ldrb	r0, [r3, #1]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1a      	ldr	r2, [r3, #32]
 800778a:	2301      	movs	r3, #1
 800778c:	f7fd f95a 	bl	8004a44 <disk_write>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <f_sync+0x54>
 8007796:	2301      	movs	r3, #1
 8007798:	e04f      	b.n	800783a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	7d1b      	ldrb	r3, [r3, #20]
 800779e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80077a8:	f7fc ff64 	bl	8004674 <get_fattime>
 80077ac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f7fd fc32 	bl	8005020 <move_window>
 80077bc:	4603      	mov	r3, r0
 80077be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d138      	bne.n	8007838 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	330b      	adds	r3, #11
 80077d0:	781a      	ldrb	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	330b      	adds	r3, #11
 80077d6:	f042 0220 	orr.w	r2, r2, #32
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	461a      	mov	r2, r3
 80077e8:	68f9      	ldr	r1, [r7, #12]
 80077ea:	f7fe f9bd 	bl	8005b68 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f103 021c 	add.w	r2, r3, #28
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f7fd f9b6 	bl	8004b6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3316      	adds	r3, #22
 8007804:	6939      	ldr	r1, [r7, #16]
 8007806:	4618      	mov	r0, r3
 8007808:	f7fd f9b0 	bl	8004b6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3312      	adds	r3, #18
 8007810:	2100      	movs	r1, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f7fd f98f 	bl	8004b36 <st_word>
					fs->wflag = 1;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2201      	movs	r2, #1
 800781c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4618      	mov	r0, r3
 8007822:	f7fd fc2b 	bl	800507c <sync_fs>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7d1b      	ldrb	r3, [r3, #20]
 800782e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007832:	b2da      	uxtb	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007838:	7dfb      	ldrb	r3, [r7, #23]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff ff7b 	bl	8007746 <f_sync>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d118      	bne.n	800788c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f107 0208 	add.w	r2, r7, #8
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff fa28 	bl	8006cb8 <validate>
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10c      	bne.n	800788c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	4618      	mov	r0, r3
 8007878:	f7fd fb2e 	bl	8004ed8 <dec_lock>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b088      	sub	sp, #32
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
	int n = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80078aa:	e01c      	b.n	80078e6 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80078ac:	f107 0310 	add.w	r3, r7, #16
 80078b0:	f107 0114 	add.w	r1, r7, #20
 80078b4:	2201      	movs	r2, #1
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fc52 	bl	8007160 <f_read>
		if (rc != 1) break;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d117      	bne.n	80078f2 <f_gets+0x5c>
		c = s[0];
 80078c2:	7d3b      	ldrb	r3, [r7, #20]
 80078c4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	2b0d      	cmp	r3, #13
 80078ca:	d00b      	beq.n	80078e4 <f_gets+0x4e>
		*p++ = c;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	61ba      	str	r2, [r7, #24]
 80078d2:	7dfa      	ldrb	r2, [r7, #23]
 80078d4:	701a      	strb	r2, [r3, #0]
		n++;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	3301      	adds	r3, #1
 80078da:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
 80078de:	2b0a      	cmp	r3, #10
 80078e0:	d009      	beq.n	80078f6 <f_gets+0x60>
 80078e2:	e000      	b.n	80078e6 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80078e4:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	dbdd      	blt.n	80078ac <f_gets+0x16>
 80078f0:	e002      	b.n	80078f8 <f_gets+0x62>
		if (rc != 1) break;
 80078f2:	bf00      	nop
 80078f4:	e000      	b.n	80078f8 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80078f6:	bf00      	nop
	}
	*p = 0;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	2200      	movs	r2, #0
 80078fc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <f_gets+0x72>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	e000      	b.n	800790a <f_gets+0x74>
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3720      	adds	r7, #32
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007922:	2301      	movs	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800792a:	4b1f      	ldr	r3, [pc, #124]	@ (80079a8 <FATFS_LinkDriverEx+0x94>)
 800792c:	7a5b      	ldrb	r3, [r3, #9]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d131      	bne.n	8007998 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007934:	4b1c      	ldr	r3, [pc, #112]	@ (80079a8 <FATFS_LinkDriverEx+0x94>)
 8007936:	7a5b      	ldrb	r3, [r3, #9]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	4b1a      	ldr	r3, [pc, #104]	@ (80079a8 <FATFS_LinkDriverEx+0x94>)
 800793e:	2100      	movs	r1, #0
 8007940:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007942:	4b19      	ldr	r3, [pc, #100]	@ (80079a8 <FATFS_LinkDriverEx+0x94>)
 8007944:	7a5b      	ldrb	r3, [r3, #9]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	4a17      	ldr	r2, [pc, #92]	@ (80079a8 <FATFS_LinkDriverEx+0x94>)
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007952:	4b15      	ldr	r3, [pc, #84]	@ (80079a8 <FATFS_LinkDriverEx+0x94>)
 8007954:	7a5b      	ldrb	r3, [r3, #9]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	4b13      	ldr	r3, [pc, #76]	@ (80079a8 <FATFS_LinkDriverEx+0x94>)
 800795c:	4413      	add	r3, r2
 800795e:	79fa      	ldrb	r2, [r7, #7]
 8007960:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007962:	4b11      	ldr	r3, [pc, #68]	@ (80079a8 <FATFS_LinkDriverEx+0x94>)
 8007964:	7a5b      	ldrb	r3, [r3, #9]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	b2d1      	uxtb	r1, r2
 800796c:	4a0e      	ldr	r2, [pc, #56]	@ (80079a8 <FATFS_LinkDriverEx+0x94>)
 800796e:	7251      	strb	r1, [r2, #9]
 8007970:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007972:	7dbb      	ldrb	r3, [r7, #22]
 8007974:	3330      	adds	r3, #48	@ 0x30
 8007976:	b2da      	uxtb	r2, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	3301      	adds	r3, #1
 8007980:	223a      	movs	r2, #58	@ 0x3a
 8007982:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	3302      	adds	r3, #2
 8007988:	222f      	movs	r2, #47	@ 0x2f
 800798a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	3303      	adds	r3, #3
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007998:	7dfb      	ldrb	r3, [r7, #23]
}
 800799a:	4618      	mov	r0, r3
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	2000226c 	.word	0x2000226c

080079ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80079b6:	2200      	movs	r2, #0
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff ffaa 	bl	8007914 <FATFS_LinkDriverEx>
 80079c0:	4603      	mov	r3, r0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	6039      	str	r1, [r7, #0]
 80079d6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80079d8:	88fb      	ldrh	r3, [r7, #6]
 80079da:	2b7f      	cmp	r3, #127	@ 0x7f
 80079dc:	d802      	bhi.n	80079e4 <ff_convert+0x18>
		c = chr;
 80079de:	88fb      	ldrh	r3, [r7, #6]
 80079e0:	81fb      	strh	r3, [r7, #14]
 80079e2:	e025      	b.n	8007a30 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80079ea:	88fb      	ldrh	r3, [r7, #6]
 80079ec:	2bff      	cmp	r3, #255	@ 0xff
 80079ee:	d805      	bhi.n	80079fc <ff_convert+0x30>
 80079f0:	88fb      	ldrh	r3, [r7, #6]
 80079f2:	3b80      	subs	r3, #128	@ 0x80
 80079f4:	4a12      	ldr	r2, [pc, #72]	@ (8007a40 <ff_convert+0x74>)
 80079f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079fa:	e000      	b.n	80079fe <ff_convert+0x32>
 80079fc:	2300      	movs	r3, #0
 80079fe:	81fb      	strh	r3, [r7, #14]
 8007a00:	e016      	b.n	8007a30 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007a02:	2300      	movs	r3, #0
 8007a04:	81fb      	strh	r3, [r7, #14]
 8007a06:	e009      	b.n	8007a1c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007a08:	89fb      	ldrh	r3, [r7, #14]
 8007a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8007a40 <ff_convert+0x74>)
 8007a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a10:	88fa      	ldrh	r2, [r7, #6]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d006      	beq.n	8007a24 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007a16:	89fb      	ldrh	r3, [r7, #14]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	81fb      	strh	r3, [r7, #14]
 8007a1c:	89fb      	ldrh	r3, [r7, #14]
 8007a1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a20:	d9f2      	bls.n	8007a08 <ff_convert+0x3c>
 8007a22:	e000      	b.n	8007a26 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007a24:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007a26:	89fb      	ldrh	r3, [r7, #14]
 8007a28:	3380      	adds	r3, #128	@ 0x80
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007a30:	89fb      	ldrh	r3, [r7, #14]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	08008db8 	.word	0x08008db8

08007a44 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a54:	d201      	bcs.n	8007a5a <ff_wtoupper+0x16>
 8007a56:	4b3e      	ldr	r3, [pc, #248]	@ (8007b50 <ff_wtoupper+0x10c>)
 8007a58:	e000      	b.n	8007a5c <ff_wtoupper+0x18>
 8007a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b54 <ff_wtoupper+0x110>)
 8007a5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	1c9a      	adds	r2, r3, #2
 8007a62:	617a      	str	r2, [r7, #20]
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007a68:	8a7b      	ldrh	r3, [r7, #18]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d068      	beq.n	8007b40 <ff_wtoupper+0xfc>
 8007a6e:	88fa      	ldrh	r2, [r7, #6]
 8007a70:	8a7b      	ldrh	r3, [r7, #18]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d364      	bcc.n	8007b40 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	1c9a      	adds	r2, r3, #2
 8007a7a:	617a      	str	r2, [r7, #20]
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	823b      	strh	r3, [r7, #16]
 8007a80:	8a3b      	ldrh	r3, [r7, #16]
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	81fb      	strh	r3, [r7, #14]
 8007a86:	8a3b      	ldrh	r3, [r7, #16]
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007a8c:	88fa      	ldrh	r2, [r7, #6]
 8007a8e:	8a79      	ldrh	r1, [r7, #18]
 8007a90:	8a3b      	ldrh	r3, [r7, #16]
 8007a92:	440b      	add	r3, r1
 8007a94:	429a      	cmp	r2, r3
 8007a96:	da49      	bge.n	8007b2c <ff_wtoupper+0xe8>
			switch (cmd) {
 8007a98:	89fb      	ldrh	r3, [r7, #14]
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d84f      	bhi.n	8007b3e <ff_wtoupper+0xfa>
 8007a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <ff_wtoupper+0x60>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ac9 	.word	0x08007ac9
 8007aa8:	08007adb 	.word	0x08007adb
 8007aac:	08007af1 	.word	0x08007af1
 8007ab0:	08007af9 	.word	0x08007af9
 8007ab4:	08007b01 	.word	0x08007b01
 8007ab8:	08007b09 	.word	0x08007b09
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007b19 	.word	0x08007b19
 8007ac4:	08007b21 	.word	0x08007b21
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007ac8:	88fa      	ldrh	r2, [r7, #6]
 8007aca:	8a7b      	ldrh	r3, [r7, #18]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	80fb      	strh	r3, [r7, #6]
 8007ad8:	e027      	b.n	8007b2a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007ada:	88fa      	ldrh	r2, [r7, #6]
 8007adc:	8a7b      	ldrh	r3, [r7, #18]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	88fa      	ldrh	r2, [r7, #6]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	80fb      	strh	r3, [r7, #6]
 8007aee:	e01c      	b.n	8007b2a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	3b10      	subs	r3, #16
 8007af4:	80fb      	strh	r3, [r7, #6]
 8007af6:	e018      	b.n	8007b2a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007af8:	88fb      	ldrh	r3, [r7, #6]
 8007afa:	3b20      	subs	r3, #32
 8007afc:	80fb      	strh	r3, [r7, #6]
 8007afe:	e014      	b.n	8007b2a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	3b30      	subs	r3, #48	@ 0x30
 8007b04:	80fb      	strh	r3, [r7, #6]
 8007b06:	e010      	b.n	8007b2a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007b08:	88fb      	ldrh	r3, [r7, #6]
 8007b0a:	3b1a      	subs	r3, #26
 8007b0c:	80fb      	strh	r3, [r7, #6]
 8007b0e:	e00c      	b.n	8007b2a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007b10:	88fb      	ldrh	r3, [r7, #6]
 8007b12:	3308      	adds	r3, #8
 8007b14:	80fb      	strh	r3, [r7, #6]
 8007b16:	e008      	b.n	8007b2a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	3b50      	subs	r3, #80	@ 0x50
 8007b1c:	80fb      	strh	r3, [r7, #6]
 8007b1e:	e004      	b.n	8007b2a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007b26:	80fb      	strh	r3, [r7, #6]
 8007b28:	bf00      	nop
			}
			break;
 8007b2a:	e008      	b.n	8007b3e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007b2c:	89fb      	ldrh	r3, [r7, #14]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d195      	bne.n	8007a5e <ff_wtoupper+0x1a>
 8007b32:	8a3b      	ldrh	r3, [r7, #16]
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4413      	add	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007b3c:	e78f      	b.n	8007a5e <ff_wtoupper+0x1a>
			break;
 8007b3e:	bf00      	nop
	}

	return chr;
 8007b40:	88fb      	ldrh	r3, [r7, #6]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	08008eb8 	.word	0x08008eb8
 8007b54:	080090ac 	.word	0x080090ac

08007b58 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f811 	bl	8007b88 <malloc>
 8007b66:	4603      	mov	r3, r0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f80d 	bl	8007b98 <free>
}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <malloc>:
 8007b88:	4b02      	ldr	r3, [pc, #8]	@ (8007b94 <malloc+0xc>)
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	f000 b82d 	b.w	8007bec <_malloc_r>
 8007b92:	bf00      	nop
 8007b94:	20000018 	.word	0x20000018

08007b98 <free>:
 8007b98:	4b02      	ldr	r3, [pc, #8]	@ (8007ba4 <free+0xc>)
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	f000 bb47 	b.w	8008230 <_free_r>
 8007ba2:	bf00      	nop
 8007ba4:	20000018 	.word	0x20000018

08007ba8 <sbrk_aligned>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4e0f      	ldr	r6, [pc, #60]	@ (8007be8 <sbrk_aligned+0x40>)
 8007bac:	460c      	mov	r4, r1
 8007bae:	6831      	ldr	r1, [r6, #0]
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	b911      	cbnz	r1, 8007bba <sbrk_aligned+0x12>
 8007bb4:	f000 faec 	bl	8008190 <_sbrk_r>
 8007bb8:	6030      	str	r0, [r6, #0]
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 fae7 	bl	8008190 <_sbrk_r>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d103      	bne.n	8007bce <sbrk_aligned+0x26>
 8007bc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007bca:	4620      	mov	r0, r4
 8007bcc:	bd70      	pop	{r4, r5, r6, pc}
 8007bce:	1cc4      	adds	r4, r0, #3
 8007bd0:	f024 0403 	bic.w	r4, r4, #3
 8007bd4:	42a0      	cmp	r0, r4
 8007bd6:	d0f8      	beq.n	8007bca <sbrk_aligned+0x22>
 8007bd8:	1a21      	subs	r1, r4, r0
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 fad8 	bl	8008190 <_sbrk_r>
 8007be0:	3001      	adds	r0, #1
 8007be2:	d1f2      	bne.n	8007bca <sbrk_aligned+0x22>
 8007be4:	e7ef      	b.n	8007bc6 <sbrk_aligned+0x1e>
 8007be6:	bf00      	nop
 8007be8:	20002278 	.word	0x20002278

08007bec <_malloc_r>:
 8007bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf0:	1ccd      	adds	r5, r1, #3
 8007bf2:	f025 0503 	bic.w	r5, r5, #3
 8007bf6:	3508      	adds	r5, #8
 8007bf8:	2d0c      	cmp	r5, #12
 8007bfa:	bf38      	it	cc
 8007bfc:	250c      	movcc	r5, #12
 8007bfe:	2d00      	cmp	r5, #0
 8007c00:	4606      	mov	r6, r0
 8007c02:	db01      	blt.n	8007c08 <_malloc_r+0x1c>
 8007c04:	42a9      	cmp	r1, r5
 8007c06:	d904      	bls.n	8007c12 <_malloc_r+0x26>
 8007c08:	230c      	movs	r3, #12
 8007c0a:	6033      	str	r3, [r6, #0]
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ce8 <_malloc_r+0xfc>
 8007c16:	f000 f869 	bl	8007cec <__malloc_lock>
 8007c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c1e:	461c      	mov	r4, r3
 8007c20:	bb44      	cbnz	r4, 8007c74 <_malloc_r+0x88>
 8007c22:	4629      	mov	r1, r5
 8007c24:	4630      	mov	r0, r6
 8007c26:	f7ff ffbf 	bl	8007ba8 <sbrk_aligned>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	d158      	bne.n	8007ce2 <_malloc_r+0xf6>
 8007c30:	f8d8 4000 	ldr.w	r4, [r8]
 8007c34:	4627      	mov	r7, r4
 8007c36:	2f00      	cmp	r7, #0
 8007c38:	d143      	bne.n	8007cc2 <_malloc_r+0xd6>
 8007c3a:	2c00      	cmp	r4, #0
 8007c3c:	d04b      	beq.n	8007cd6 <_malloc_r+0xea>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	4639      	mov	r1, r7
 8007c42:	4630      	mov	r0, r6
 8007c44:	eb04 0903 	add.w	r9, r4, r3
 8007c48:	f000 faa2 	bl	8008190 <_sbrk_r>
 8007c4c:	4581      	cmp	r9, r0
 8007c4e:	d142      	bne.n	8007cd6 <_malloc_r+0xea>
 8007c50:	6821      	ldr	r1, [r4, #0]
 8007c52:	1a6d      	subs	r5, r5, r1
 8007c54:	4629      	mov	r1, r5
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff ffa6 	bl	8007ba8 <sbrk_aligned>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d03a      	beq.n	8007cd6 <_malloc_r+0xea>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	442b      	add	r3, r5
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	f8d8 3000 	ldr.w	r3, [r8]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	bb62      	cbnz	r2, 8007cc8 <_malloc_r+0xdc>
 8007c6e:	f8c8 7000 	str.w	r7, [r8]
 8007c72:	e00f      	b.n	8007c94 <_malloc_r+0xa8>
 8007c74:	6822      	ldr	r2, [r4, #0]
 8007c76:	1b52      	subs	r2, r2, r5
 8007c78:	d420      	bmi.n	8007cbc <_malloc_r+0xd0>
 8007c7a:	2a0b      	cmp	r2, #11
 8007c7c:	d917      	bls.n	8007cae <_malloc_r+0xc2>
 8007c7e:	1961      	adds	r1, r4, r5
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	6025      	str	r5, [r4, #0]
 8007c84:	bf18      	it	ne
 8007c86:	6059      	strne	r1, [r3, #4]
 8007c88:	6863      	ldr	r3, [r4, #4]
 8007c8a:	bf08      	it	eq
 8007c8c:	f8c8 1000 	streq.w	r1, [r8]
 8007c90:	5162      	str	r2, [r4, r5]
 8007c92:	604b      	str	r3, [r1, #4]
 8007c94:	4630      	mov	r0, r6
 8007c96:	f000 f82f 	bl	8007cf8 <__malloc_unlock>
 8007c9a:	f104 000b 	add.w	r0, r4, #11
 8007c9e:	1d23      	adds	r3, r4, #4
 8007ca0:	f020 0007 	bic.w	r0, r0, #7
 8007ca4:	1ac2      	subs	r2, r0, r3
 8007ca6:	bf1c      	itt	ne
 8007ca8:	1a1b      	subne	r3, r3, r0
 8007caa:	50a3      	strne	r3, [r4, r2]
 8007cac:	e7af      	b.n	8007c0e <_malloc_r+0x22>
 8007cae:	6862      	ldr	r2, [r4, #4]
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	bf0c      	ite	eq
 8007cb4:	f8c8 2000 	streq.w	r2, [r8]
 8007cb8:	605a      	strne	r2, [r3, #4]
 8007cba:	e7eb      	b.n	8007c94 <_malloc_r+0xa8>
 8007cbc:	4623      	mov	r3, r4
 8007cbe:	6864      	ldr	r4, [r4, #4]
 8007cc0:	e7ae      	b.n	8007c20 <_malloc_r+0x34>
 8007cc2:	463c      	mov	r4, r7
 8007cc4:	687f      	ldr	r7, [r7, #4]
 8007cc6:	e7b6      	b.n	8007c36 <_malloc_r+0x4a>
 8007cc8:	461a      	mov	r2, r3
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	d1fb      	bne.n	8007cc8 <_malloc_r+0xdc>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6053      	str	r3, [r2, #4]
 8007cd4:	e7de      	b.n	8007c94 <_malloc_r+0xa8>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	6033      	str	r3, [r6, #0]
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f000 f80c 	bl	8007cf8 <__malloc_unlock>
 8007ce0:	e794      	b.n	8007c0c <_malloc_r+0x20>
 8007ce2:	6005      	str	r5, [r0, #0]
 8007ce4:	e7d6      	b.n	8007c94 <_malloc_r+0xa8>
 8007ce6:	bf00      	nop
 8007ce8:	2000227c 	.word	0x2000227c

08007cec <__malloc_lock>:
 8007cec:	4801      	ldr	r0, [pc, #4]	@ (8007cf4 <__malloc_lock+0x8>)
 8007cee:	f000 ba9c 	b.w	800822a <__retarget_lock_acquire_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	200023c0 	.word	0x200023c0

08007cf8 <__malloc_unlock>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	@ (8007d00 <__malloc_unlock+0x8>)
 8007cfa:	f000 ba97 	b.w	800822c <__retarget_lock_release_recursive>
 8007cfe:	bf00      	nop
 8007d00:	200023c0 	.word	0x200023c0

08007d04 <std>:
 8007d04:	2300      	movs	r3, #0
 8007d06:	b510      	push	{r4, lr}
 8007d08:	4604      	mov	r4, r0
 8007d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d12:	6083      	str	r3, [r0, #8]
 8007d14:	8181      	strh	r1, [r0, #12]
 8007d16:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d18:	81c2      	strh	r2, [r0, #14]
 8007d1a:	6183      	str	r3, [r0, #24]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	2208      	movs	r2, #8
 8007d20:	305c      	adds	r0, #92	@ 0x5c
 8007d22:	f000 f9f9 	bl	8008118 <memset>
 8007d26:	4b0d      	ldr	r3, [pc, #52]	@ (8007d5c <std+0x58>)
 8007d28:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d60 <std+0x5c>)
 8007d2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d64 <std+0x60>)
 8007d30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d32:	4b0d      	ldr	r3, [pc, #52]	@ (8007d68 <std+0x64>)
 8007d34:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d36:	4b0d      	ldr	r3, [pc, #52]	@ (8007d6c <std+0x68>)
 8007d38:	6224      	str	r4, [r4, #32]
 8007d3a:	429c      	cmp	r4, r3
 8007d3c:	d006      	beq.n	8007d4c <std+0x48>
 8007d3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d42:	4294      	cmp	r4, r2
 8007d44:	d002      	beq.n	8007d4c <std+0x48>
 8007d46:	33d0      	adds	r3, #208	@ 0xd0
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	d105      	bne.n	8007d58 <std+0x54>
 8007d4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d54:	f000 ba68 	b.w	8008228 <__retarget_lock_init_recursive>
 8007d58:	bd10      	pop	{r4, pc}
 8007d5a:	bf00      	nop
 8007d5c:	08007f69 	.word	0x08007f69
 8007d60:	08007f8b 	.word	0x08007f8b
 8007d64:	08007fc3 	.word	0x08007fc3
 8007d68:	08007fe7 	.word	0x08007fe7
 8007d6c:	20002280 	.word	0x20002280

08007d70 <stdio_exit_handler>:
 8007d70:	4a02      	ldr	r2, [pc, #8]	@ (8007d7c <stdio_exit_handler+0xc>)
 8007d72:	4903      	ldr	r1, [pc, #12]	@ (8007d80 <stdio_exit_handler+0x10>)
 8007d74:	4803      	ldr	r0, [pc, #12]	@ (8007d84 <stdio_exit_handler+0x14>)
 8007d76:	f000 b869 	b.w	8007e4c <_fwalk_sglue>
 8007d7a:	bf00      	nop
 8007d7c:	2000000c 	.word	0x2000000c
 8007d80:	0800896d 	.word	0x0800896d
 8007d84:	2000001c 	.word	0x2000001c

08007d88 <cleanup_stdio>:
 8007d88:	6841      	ldr	r1, [r0, #4]
 8007d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007dbc <cleanup_stdio+0x34>)
 8007d8c:	4299      	cmp	r1, r3
 8007d8e:	b510      	push	{r4, lr}
 8007d90:	4604      	mov	r4, r0
 8007d92:	d001      	beq.n	8007d98 <cleanup_stdio+0x10>
 8007d94:	f000 fdea 	bl	800896c <_fflush_r>
 8007d98:	68a1      	ldr	r1, [r4, #8]
 8007d9a:	4b09      	ldr	r3, [pc, #36]	@ (8007dc0 <cleanup_stdio+0x38>)
 8007d9c:	4299      	cmp	r1, r3
 8007d9e:	d002      	beq.n	8007da6 <cleanup_stdio+0x1e>
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 fde3 	bl	800896c <_fflush_r>
 8007da6:	68e1      	ldr	r1, [r4, #12]
 8007da8:	4b06      	ldr	r3, [pc, #24]	@ (8007dc4 <cleanup_stdio+0x3c>)
 8007daa:	4299      	cmp	r1, r3
 8007dac:	d004      	beq.n	8007db8 <cleanup_stdio+0x30>
 8007dae:	4620      	mov	r0, r4
 8007db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db4:	f000 bdda 	b.w	800896c <_fflush_r>
 8007db8:	bd10      	pop	{r4, pc}
 8007dba:	bf00      	nop
 8007dbc:	20002280 	.word	0x20002280
 8007dc0:	200022e8 	.word	0x200022e8
 8007dc4:	20002350 	.word	0x20002350

08007dc8 <global_stdio_init.part.0>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4b0b      	ldr	r3, [pc, #44]	@ (8007df8 <global_stdio_init.part.0+0x30>)
 8007dcc:	4c0b      	ldr	r4, [pc, #44]	@ (8007dfc <global_stdio_init.part.0+0x34>)
 8007dce:	4a0c      	ldr	r2, [pc, #48]	@ (8007e00 <global_stdio_init.part.0+0x38>)
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2104      	movs	r1, #4
 8007dd8:	f7ff ff94 	bl	8007d04 <std>
 8007ddc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007de0:	2201      	movs	r2, #1
 8007de2:	2109      	movs	r1, #9
 8007de4:	f7ff ff8e 	bl	8007d04 <std>
 8007de8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007dec:	2202      	movs	r2, #2
 8007dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df2:	2112      	movs	r1, #18
 8007df4:	f7ff bf86 	b.w	8007d04 <std>
 8007df8:	200023b8 	.word	0x200023b8
 8007dfc:	20002280 	.word	0x20002280
 8007e00:	08007d71 	.word	0x08007d71

08007e04 <__sfp_lock_acquire>:
 8007e04:	4801      	ldr	r0, [pc, #4]	@ (8007e0c <__sfp_lock_acquire+0x8>)
 8007e06:	f000 ba10 	b.w	800822a <__retarget_lock_acquire_recursive>
 8007e0a:	bf00      	nop
 8007e0c:	200023c1 	.word	0x200023c1

08007e10 <__sfp_lock_release>:
 8007e10:	4801      	ldr	r0, [pc, #4]	@ (8007e18 <__sfp_lock_release+0x8>)
 8007e12:	f000 ba0b 	b.w	800822c <__retarget_lock_release_recursive>
 8007e16:	bf00      	nop
 8007e18:	200023c1 	.word	0x200023c1

08007e1c <__sinit>:
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	4604      	mov	r4, r0
 8007e20:	f7ff fff0 	bl	8007e04 <__sfp_lock_acquire>
 8007e24:	6a23      	ldr	r3, [r4, #32]
 8007e26:	b11b      	cbz	r3, 8007e30 <__sinit+0x14>
 8007e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e2c:	f7ff bff0 	b.w	8007e10 <__sfp_lock_release>
 8007e30:	4b04      	ldr	r3, [pc, #16]	@ (8007e44 <__sinit+0x28>)
 8007e32:	6223      	str	r3, [r4, #32]
 8007e34:	4b04      	ldr	r3, [pc, #16]	@ (8007e48 <__sinit+0x2c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f5      	bne.n	8007e28 <__sinit+0xc>
 8007e3c:	f7ff ffc4 	bl	8007dc8 <global_stdio_init.part.0>
 8007e40:	e7f2      	b.n	8007e28 <__sinit+0xc>
 8007e42:	bf00      	nop
 8007e44:	08007d89 	.word	0x08007d89
 8007e48:	200023b8 	.word	0x200023b8

08007e4c <_fwalk_sglue>:
 8007e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e50:	4607      	mov	r7, r0
 8007e52:	4688      	mov	r8, r1
 8007e54:	4614      	mov	r4, r2
 8007e56:	2600      	movs	r6, #0
 8007e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8007e60:	d505      	bpl.n	8007e6e <_fwalk_sglue+0x22>
 8007e62:	6824      	ldr	r4, [r4, #0]
 8007e64:	2c00      	cmp	r4, #0
 8007e66:	d1f7      	bne.n	8007e58 <_fwalk_sglue+0xc>
 8007e68:	4630      	mov	r0, r6
 8007e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6e:	89ab      	ldrh	r3, [r5, #12]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d907      	bls.n	8007e84 <_fwalk_sglue+0x38>
 8007e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	d003      	beq.n	8007e84 <_fwalk_sglue+0x38>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4638      	mov	r0, r7
 8007e80:	47c0      	blx	r8
 8007e82:	4306      	orrs	r6, r0
 8007e84:	3568      	adds	r5, #104	@ 0x68
 8007e86:	e7e9      	b.n	8007e5c <_fwalk_sglue+0x10>

08007e88 <iprintf>:
 8007e88:	b40f      	push	{r0, r1, r2, r3}
 8007e8a:	b507      	push	{r0, r1, r2, lr}
 8007e8c:	4906      	ldr	r1, [pc, #24]	@ (8007ea8 <iprintf+0x20>)
 8007e8e:	ab04      	add	r3, sp, #16
 8007e90:	6808      	ldr	r0, [r1, #0]
 8007e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e96:	6881      	ldr	r1, [r0, #8]
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	f000 fa3d 	bl	8008318 <_vfiprintf_r>
 8007e9e:	b003      	add	sp, #12
 8007ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea4:	b004      	add	sp, #16
 8007ea6:	4770      	bx	lr
 8007ea8:	20000018 	.word	0x20000018

08007eac <_puts_r>:
 8007eac:	6a03      	ldr	r3, [r0, #32]
 8007eae:	b570      	push	{r4, r5, r6, lr}
 8007eb0:	6884      	ldr	r4, [r0, #8]
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	460e      	mov	r6, r1
 8007eb6:	b90b      	cbnz	r3, 8007ebc <_puts_r+0x10>
 8007eb8:	f7ff ffb0 	bl	8007e1c <__sinit>
 8007ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ebe:	07db      	lsls	r3, r3, #31
 8007ec0:	d405      	bmi.n	8007ece <_puts_r+0x22>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	0598      	lsls	r0, r3, #22
 8007ec6:	d402      	bmi.n	8007ece <_puts_r+0x22>
 8007ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eca:	f000 f9ae 	bl	800822a <__retarget_lock_acquire_recursive>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	0719      	lsls	r1, r3, #28
 8007ed2:	d502      	bpl.n	8007eda <_puts_r+0x2e>
 8007ed4:	6923      	ldr	r3, [r4, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d135      	bne.n	8007f46 <_puts_r+0x9a>
 8007eda:	4621      	mov	r1, r4
 8007edc:	4628      	mov	r0, r5
 8007ede:	f000 f8c5 	bl	800806c <__swsetup_r>
 8007ee2:	b380      	cbz	r0, 8007f46 <_puts_r+0x9a>
 8007ee4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007ee8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eea:	07da      	lsls	r2, r3, #31
 8007eec:	d405      	bmi.n	8007efa <_puts_r+0x4e>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	059b      	lsls	r3, r3, #22
 8007ef2:	d402      	bmi.n	8007efa <_puts_r+0x4e>
 8007ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ef6:	f000 f999 	bl	800822c <__retarget_lock_release_recursive>
 8007efa:	4628      	mov	r0, r5
 8007efc:	bd70      	pop	{r4, r5, r6, pc}
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da04      	bge.n	8007f0c <_puts_r+0x60>
 8007f02:	69a2      	ldr	r2, [r4, #24]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	dc17      	bgt.n	8007f38 <_puts_r+0x8c>
 8007f08:	290a      	cmp	r1, #10
 8007f0a:	d015      	beq.n	8007f38 <_puts_r+0x8c>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	6022      	str	r2, [r4, #0]
 8007f12:	7019      	strb	r1, [r3, #0]
 8007f14:	68a3      	ldr	r3, [r4, #8]
 8007f16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	60a3      	str	r3, [r4, #8]
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	d1ed      	bne.n	8007efe <_puts_r+0x52>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	da11      	bge.n	8007f4a <_puts_r+0x9e>
 8007f26:	4622      	mov	r2, r4
 8007f28:	210a      	movs	r1, #10
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 f85f 	bl	8007fee <__swbuf_r>
 8007f30:	3001      	adds	r0, #1
 8007f32:	d0d7      	beq.n	8007ee4 <_puts_r+0x38>
 8007f34:	250a      	movs	r5, #10
 8007f36:	e7d7      	b.n	8007ee8 <_puts_r+0x3c>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f000 f857 	bl	8007fee <__swbuf_r>
 8007f40:	3001      	adds	r0, #1
 8007f42:	d1e7      	bne.n	8007f14 <_puts_r+0x68>
 8007f44:	e7ce      	b.n	8007ee4 <_puts_r+0x38>
 8007f46:	3e01      	subs	r6, #1
 8007f48:	e7e4      	b.n	8007f14 <_puts_r+0x68>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	6022      	str	r2, [r4, #0]
 8007f50:	220a      	movs	r2, #10
 8007f52:	701a      	strb	r2, [r3, #0]
 8007f54:	e7ee      	b.n	8007f34 <_puts_r+0x88>
	...

08007f58 <puts>:
 8007f58:	4b02      	ldr	r3, [pc, #8]	@ (8007f64 <puts+0xc>)
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	f7ff bfa5 	b.w	8007eac <_puts_r>
 8007f62:	bf00      	nop
 8007f64:	20000018 	.word	0x20000018

08007f68 <__sread>:
 8007f68:	b510      	push	{r4, lr}
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f70:	f000 f8fc 	bl	800816c <_read_r>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	bfab      	itete	ge
 8007f78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f7c:	181b      	addge	r3, r3, r0
 8007f7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f82:	bfac      	ite	ge
 8007f84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f86:	81a3      	strhlt	r3, [r4, #12]
 8007f88:	bd10      	pop	{r4, pc}

08007f8a <__swrite>:
 8007f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8e:	461f      	mov	r7, r3
 8007f90:	898b      	ldrh	r3, [r1, #12]
 8007f92:	05db      	lsls	r3, r3, #23
 8007f94:	4605      	mov	r5, r0
 8007f96:	460c      	mov	r4, r1
 8007f98:	4616      	mov	r6, r2
 8007f9a:	d505      	bpl.n	8007fa8 <__swrite+0x1e>
 8007f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f000 f8d0 	bl	8008148 <_lseek_r>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	4628      	mov	r0, r5
 8007fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fbe:	f000 b8f7 	b.w	80081b0 <_write_r>

08007fc2 <__sseek>:
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fca:	f000 f8bd 	bl	8008148 <_lseek_r>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	bf15      	itete	ne
 8007fd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fde:	81a3      	strheq	r3, [r4, #12]
 8007fe0:	bf18      	it	ne
 8007fe2:	81a3      	strhne	r3, [r4, #12]
 8007fe4:	bd10      	pop	{r4, pc}

08007fe6 <__sclose>:
 8007fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fea:	f000 b89d 	b.w	8008128 <_close_r>

08007fee <__swbuf_r>:
 8007fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff0:	460e      	mov	r6, r1
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	b118      	cbz	r0, 8008000 <__swbuf_r+0x12>
 8007ff8:	6a03      	ldr	r3, [r0, #32]
 8007ffa:	b90b      	cbnz	r3, 8008000 <__swbuf_r+0x12>
 8007ffc:	f7ff ff0e 	bl	8007e1c <__sinit>
 8008000:	69a3      	ldr	r3, [r4, #24]
 8008002:	60a3      	str	r3, [r4, #8]
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	071a      	lsls	r2, r3, #28
 8008008:	d501      	bpl.n	800800e <__swbuf_r+0x20>
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	b943      	cbnz	r3, 8008020 <__swbuf_r+0x32>
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f000 f82b 	bl	800806c <__swsetup_r>
 8008016:	b118      	cbz	r0, 8008020 <__swbuf_r+0x32>
 8008018:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800801c:	4638      	mov	r0, r7
 800801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	6922      	ldr	r2, [r4, #16]
 8008024:	1a98      	subs	r0, r3, r2
 8008026:	6963      	ldr	r3, [r4, #20]
 8008028:	b2f6      	uxtb	r6, r6
 800802a:	4283      	cmp	r3, r0
 800802c:	4637      	mov	r7, r6
 800802e:	dc05      	bgt.n	800803c <__swbuf_r+0x4e>
 8008030:	4621      	mov	r1, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f000 fc9a 	bl	800896c <_fflush_r>
 8008038:	2800      	cmp	r0, #0
 800803a:	d1ed      	bne.n	8008018 <__swbuf_r+0x2a>
 800803c:	68a3      	ldr	r3, [r4, #8]
 800803e:	3b01      	subs	r3, #1
 8008040:	60a3      	str	r3, [r4, #8]
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	6022      	str	r2, [r4, #0]
 8008048:	701e      	strb	r6, [r3, #0]
 800804a:	6962      	ldr	r2, [r4, #20]
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	429a      	cmp	r2, r3
 8008050:	d004      	beq.n	800805c <__swbuf_r+0x6e>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	07db      	lsls	r3, r3, #31
 8008056:	d5e1      	bpl.n	800801c <__swbuf_r+0x2e>
 8008058:	2e0a      	cmp	r6, #10
 800805a:	d1df      	bne.n	800801c <__swbuf_r+0x2e>
 800805c:	4621      	mov	r1, r4
 800805e:	4628      	mov	r0, r5
 8008060:	f000 fc84 	bl	800896c <_fflush_r>
 8008064:	2800      	cmp	r0, #0
 8008066:	d0d9      	beq.n	800801c <__swbuf_r+0x2e>
 8008068:	e7d6      	b.n	8008018 <__swbuf_r+0x2a>
	...

0800806c <__swsetup_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4b29      	ldr	r3, [pc, #164]	@ (8008114 <__swsetup_r+0xa8>)
 8008070:	4605      	mov	r5, r0
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	460c      	mov	r4, r1
 8008076:	b118      	cbz	r0, 8008080 <__swsetup_r+0x14>
 8008078:	6a03      	ldr	r3, [r0, #32]
 800807a:	b90b      	cbnz	r3, 8008080 <__swsetup_r+0x14>
 800807c:	f7ff fece 	bl	8007e1c <__sinit>
 8008080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008084:	0719      	lsls	r1, r3, #28
 8008086:	d422      	bmi.n	80080ce <__swsetup_r+0x62>
 8008088:	06da      	lsls	r2, r3, #27
 800808a:	d407      	bmi.n	800809c <__swsetup_r+0x30>
 800808c:	2209      	movs	r2, #9
 800808e:	602a      	str	r2, [r5, #0]
 8008090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800809a:	e033      	b.n	8008104 <__swsetup_r+0x98>
 800809c:	0758      	lsls	r0, r3, #29
 800809e:	d512      	bpl.n	80080c6 <__swsetup_r+0x5a>
 80080a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080a2:	b141      	cbz	r1, 80080b6 <__swsetup_r+0x4a>
 80080a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080a8:	4299      	cmp	r1, r3
 80080aa:	d002      	beq.n	80080b2 <__swsetup_r+0x46>
 80080ac:	4628      	mov	r0, r5
 80080ae:	f000 f8bf 	bl	8008230 <_free_r>
 80080b2:	2300      	movs	r3, #0
 80080b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	2300      	movs	r3, #0
 80080c0:	6063      	str	r3, [r4, #4]
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f043 0308 	orr.w	r3, r3, #8
 80080cc:	81a3      	strh	r3, [r4, #12]
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	b94b      	cbnz	r3, 80080e6 <__swsetup_r+0x7a>
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080dc:	d003      	beq.n	80080e6 <__swsetup_r+0x7a>
 80080de:	4621      	mov	r1, r4
 80080e0:	4628      	mov	r0, r5
 80080e2:	f000 fc91 	bl	8008a08 <__smakebuf_r>
 80080e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ea:	f013 0201 	ands.w	r2, r3, #1
 80080ee:	d00a      	beq.n	8008106 <__swsetup_r+0x9a>
 80080f0:	2200      	movs	r2, #0
 80080f2:	60a2      	str	r2, [r4, #8]
 80080f4:	6962      	ldr	r2, [r4, #20]
 80080f6:	4252      	negs	r2, r2
 80080f8:	61a2      	str	r2, [r4, #24]
 80080fa:	6922      	ldr	r2, [r4, #16]
 80080fc:	b942      	cbnz	r2, 8008110 <__swsetup_r+0xa4>
 80080fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008102:	d1c5      	bne.n	8008090 <__swsetup_r+0x24>
 8008104:	bd38      	pop	{r3, r4, r5, pc}
 8008106:	0799      	lsls	r1, r3, #30
 8008108:	bf58      	it	pl
 800810a:	6962      	ldrpl	r2, [r4, #20]
 800810c:	60a2      	str	r2, [r4, #8]
 800810e:	e7f4      	b.n	80080fa <__swsetup_r+0x8e>
 8008110:	2000      	movs	r0, #0
 8008112:	e7f7      	b.n	8008104 <__swsetup_r+0x98>
 8008114:	20000018 	.word	0x20000018

08008118 <memset>:
 8008118:	4402      	add	r2, r0
 800811a:	4603      	mov	r3, r0
 800811c:	4293      	cmp	r3, r2
 800811e:	d100      	bne.n	8008122 <memset+0xa>
 8008120:	4770      	bx	lr
 8008122:	f803 1b01 	strb.w	r1, [r3], #1
 8008126:	e7f9      	b.n	800811c <memset+0x4>

08008128 <_close_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4d06      	ldr	r5, [pc, #24]	@ (8008144 <_close_r+0x1c>)
 800812c:	2300      	movs	r3, #0
 800812e:	4604      	mov	r4, r0
 8008130:	4608      	mov	r0, r1
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	f7f8 fe45 	bl	8000dc2 <_close>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d102      	bne.n	8008142 <_close_r+0x1a>
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	b103      	cbz	r3, 8008142 <_close_r+0x1a>
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	200023bc 	.word	0x200023bc

08008148 <_lseek_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4d07      	ldr	r5, [pc, #28]	@ (8008168 <_lseek_r+0x20>)
 800814c:	4604      	mov	r4, r0
 800814e:	4608      	mov	r0, r1
 8008150:	4611      	mov	r1, r2
 8008152:	2200      	movs	r2, #0
 8008154:	602a      	str	r2, [r5, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	f7f8 fe5a 	bl	8000e10 <_lseek>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_lseek_r+0x1e>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_lseek_r+0x1e>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	200023bc 	.word	0x200023bc

0800816c <_read_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4d07      	ldr	r5, [pc, #28]	@ (800818c <_read_r+0x20>)
 8008170:	4604      	mov	r4, r0
 8008172:	4608      	mov	r0, r1
 8008174:	4611      	mov	r1, r2
 8008176:	2200      	movs	r2, #0
 8008178:	602a      	str	r2, [r5, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	f7f8 fe04 	bl	8000d88 <_read>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_read_r+0x1e>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_read_r+0x1e>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	200023bc 	.word	0x200023bc

08008190 <_sbrk_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4d06      	ldr	r5, [pc, #24]	@ (80081ac <_sbrk_r+0x1c>)
 8008194:	2300      	movs	r3, #0
 8008196:	4604      	mov	r4, r0
 8008198:	4608      	mov	r0, r1
 800819a:	602b      	str	r3, [r5, #0]
 800819c:	f7f8 fe46 	bl	8000e2c <_sbrk>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d102      	bne.n	80081aa <_sbrk_r+0x1a>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	b103      	cbz	r3, 80081aa <_sbrk_r+0x1a>
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	200023bc 	.word	0x200023bc

080081b0 <_write_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4d07      	ldr	r5, [pc, #28]	@ (80081d0 <_write_r+0x20>)
 80081b4:	4604      	mov	r4, r0
 80081b6:	4608      	mov	r0, r1
 80081b8:	4611      	mov	r1, r2
 80081ba:	2200      	movs	r2, #0
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	f7f8 fb54 	bl	800086c <_write>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_write_r+0x1e>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_write_r+0x1e>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	200023bc 	.word	0x200023bc

080081d4 <__errno>:
 80081d4:	4b01      	ldr	r3, [pc, #4]	@ (80081dc <__errno+0x8>)
 80081d6:	6818      	ldr	r0, [r3, #0]
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20000018 	.word	0x20000018

080081e0 <__libc_init_array>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	4d0d      	ldr	r5, [pc, #52]	@ (8008218 <__libc_init_array+0x38>)
 80081e4:	4c0d      	ldr	r4, [pc, #52]	@ (800821c <__libc_init_array+0x3c>)
 80081e6:	1b64      	subs	r4, r4, r5
 80081e8:	10a4      	asrs	r4, r4, #2
 80081ea:	2600      	movs	r6, #0
 80081ec:	42a6      	cmp	r6, r4
 80081ee:	d109      	bne.n	8008204 <__libc_init_array+0x24>
 80081f0:	4d0b      	ldr	r5, [pc, #44]	@ (8008220 <__libc_init_array+0x40>)
 80081f2:	4c0c      	ldr	r4, [pc, #48]	@ (8008224 <__libc_init_array+0x44>)
 80081f4:	f000 fc66 	bl	8008ac4 <_init>
 80081f8:	1b64      	subs	r4, r4, r5
 80081fa:	10a4      	asrs	r4, r4, #2
 80081fc:	2600      	movs	r6, #0
 80081fe:	42a6      	cmp	r6, r4
 8008200:	d105      	bne.n	800820e <__libc_init_array+0x2e>
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	f855 3b04 	ldr.w	r3, [r5], #4
 8008208:	4798      	blx	r3
 800820a:	3601      	adds	r6, #1
 800820c:	e7ee      	b.n	80081ec <__libc_init_array+0xc>
 800820e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008212:	4798      	blx	r3
 8008214:	3601      	adds	r6, #1
 8008216:	e7f2      	b.n	80081fe <__libc_init_array+0x1e>
 8008218:	080091a4 	.word	0x080091a4
 800821c:	080091a4 	.word	0x080091a4
 8008220:	080091a4 	.word	0x080091a4
 8008224:	080091a8 	.word	0x080091a8

08008228 <__retarget_lock_init_recursive>:
 8008228:	4770      	bx	lr

0800822a <__retarget_lock_acquire_recursive>:
 800822a:	4770      	bx	lr

0800822c <__retarget_lock_release_recursive>:
 800822c:	4770      	bx	lr
	...

08008230 <_free_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4605      	mov	r5, r0
 8008234:	2900      	cmp	r1, #0
 8008236:	d041      	beq.n	80082bc <_free_r+0x8c>
 8008238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823c:	1f0c      	subs	r4, r1, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	bfb8      	it	lt
 8008242:	18e4      	addlt	r4, r4, r3
 8008244:	f7ff fd52 	bl	8007cec <__malloc_lock>
 8008248:	4a1d      	ldr	r2, [pc, #116]	@ (80082c0 <_free_r+0x90>)
 800824a:	6813      	ldr	r3, [r2, #0]
 800824c:	b933      	cbnz	r3, 800825c <_free_r+0x2c>
 800824e:	6063      	str	r3, [r4, #4]
 8008250:	6014      	str	r4, [r2, #0]
 8008252:	4628      	mov	r0, r5
 8008254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008258:	f7ff bd4e 	b.w	8007cf8 <__malloc_unlock>
 800825c:	42a3      	cmp	r3, r4
 800825e:	d908      	bls.n	8008272 <_free_r+0x42>
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	1821      	adds	r1, r4, r0
 8008264:	428b      	cmp	r3, r1
 8008266:	bf01      	itttt	eq
 8008268:	6819      	ldreq	r1, [r3, #0]
 800826a:	685b      	ldreq	r3, [r3, #4]
 800826c:	1809      	addeq	r1, r1, r0
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	e7ed      	b.n	800824e <_free_r+0x1e>
 8008272:	461a      	mov	r2, r3
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	b10b      	cbz	r3, 800827c <_free_r+0x4c>
 8008278:	42a3      	cmp	r3, r4
 800827a:	d9fa      	bls.n	8008272 <_free_r+0x42>
 800827c:	6811      	ldr	r1, [r2, #0]
 800827e:	1850      	adds	r0, r2, r1
 8008280:	42a0      	cmp	r0, r4
 8008282:	d10b      	bne.n	800829c <_free_r+0x6c>
 8008284:	6820      	ldr	r0, [r4, #0]
 8008286:	4401      	add	r1, r0
 8008288:	1850      	adds	r0, r2, r1
 800828a:	4283      	cmp	r3, r0
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	d1e0      	bne.n	8008252 <_free_r+0x22>
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	6053      	str	r3, [r2, #4]
 8008296:	4408      	add	r0, r1
 8008298:	6010      	str	r0, [r2, #0]
 800829a:	e7da      	b.n	8008252 <_free_r+0x22>
 800829c:	d902      	bls.n	80082a4 <_free_r+0x74>
 800829e:	230c      	movs	r3, #12
 80082a0:	602b      	str	r3, [r5, #0]
 80082a2:	e7d6      	b.n	8008252 <_free_r+0x22>
 80082a4:	6820      	ldr	r0, [r4, #0]
 80082a6:	1821      	adds	r1, r4, r0
 80082a8:	428b      	cmp	r3, r1
 80082aa:	bf04      	itt	eq
 80082ac:	6819      	ldreq	r1, [r3, #0]
 80082ae:	685b      	ldreq	r3, [r3, #4]
 80082b0:	6063      	str	r3, [r4, #4]
 80082b2:	bf04      	itt	eq
 80082b4:	1809      	addeq	r1, r1, r0
 80082b6:	6021      	streq	r1, [r4, #0]
 80082b8:	6054      	str	r4, [r2, #4]
 80082ba:	e7ca      	b.n	8008252 <_free_r+0x22>
 80082bc:	bd38      	pop	{r3, r4, r5, pc}
 80082be:	bf00      	nop
 80082c0:	2000227c 	.word	0x2000227c

080082c4 <__sfputc_r>:
 80082c4:	6893      	ldr	r3, [r2, #8]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	b410      	push	{r4}
 80082cc:	6093      	str	r3, [r2, #8]
 80082ce:	da08      	bge.n	80082e2 <__sfputc_r+0x1e>
 80082d0:	6994      	ldr	r4, [r2, #24]
 80082d2:	42a3      	cmp	r3, r4
 80082d4:	db01      	blt.n	80082da <__sfputc_r+0x16>
 80082d6:	290a      	cmp	r1, #10
 80082d8:	d103      	bne.n	80082e2 <__sfputc_r+0x1e>
 80082da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082de:	f7ff be86 	b.w	8007fee <__swbuf_r>
 80082e2:	6813      	ldr	r3, [r2, #0]
 80082e4:	1c58      	adds	r0, r3, #1
 80082e6:	6010      	str	r0, [r2, #0]
 80082e8:	7019      	strb	r1, [r3, #0]
 80082ea:	4608      	mov	r0, r1
 80082ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <__sfputs_r>:
 80082f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f4:	4606      	mov	r6, r0
 80082f6:	460f      	mov	r7, r1
 80082f8:	4614      	mov	r4, r2
 80082fa:	18d5      	adds	r5, r2, r3
 80082fc:	42ac      	cmp	r4, r5
 80082fe:	d101      	bne.n	8008304 <__sfputs_r+0x12>
 8008300:	2000      	movs	r0, #0
 8008302:	e007      	b.n	8008314 <__sfputs_r+0x22>
 8008304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008308:	463a      	mov	r2, r7
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff ffda 	bl	80082c4 <__sfputc_r>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d1f3      	bne.n	80082fc <__sfputs_r+0xa>
 8008314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008318 <_vfiprintf_r>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	460d      	mov	r5, r1
 800831e:	b09d      	sub	sp, #116	@ 0x74
 8008320:	4614      	mov	r4, r2
 8008322:	4698      	mov	r8, r3
 8008324:	4606      	mov	r6, r0
 8008326:	b118      	cbz	r0, 8008330 <_vfiprintf_r+0x18>
 8008328:	6a03      	ldr	r3, [r0, #32]
 800832a:	b90b      	cbnz	r3, 8008330 <_vfiprintf_r+0x18>
 800832c:	f7ff fd76 	bl	8007e1c <__sinit>
 8008330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008332:	07d9      	lsls	r1, r3, #31
 8008334:	d405      	bmi.n	8008342 <_vfiprintf_r+0x2a>
 8008336:	89ab      	ldrh	r3, [r5, #12]
 8008338:	059a      	lsls	r2, r3, #22
 800833a:	d402      	bmi.n	8008342 <_vfiprintf_r+0x2a>
 800833c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800833e:	f7ff ff74 	bl	800822a <__retarget_lock_acquire_recursive>
 8008342:	89ab      	ldrh	r3, [r5, #12]
 8008344:	071b      	lsls	r3, r3, #28
 8008346:	d501      	bpl.n	800834c <_vfiprintf_r+0x34>
 8008348:	692b      	ldr	r3, [r5, #16]
 800834a:	b99b      	cbnz	r3, 8008374 <_vfiprintf_r+0x5c>
 800834c:	4629      	mov	r1, r5
 800834e:	4630      	mov	r0, r6
 8008350:	f7ff fe8c 	bl	800806c <__swsetup_r>
 8008354:	b170      	cbz	r0, 8008374 <_vfiprintf_r+0x5c>
 8008356:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008358:	07dc      	lsls	r4, r3, #31
 800835a:	d504      	bpl.n	8008366 <_vfiprintf_r+0x4e>
 800835c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008360:	b01d      	add	sp, #116	@ 0x74
 8008362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008366:	89ab      	ldrh	r3, [r5, #12]
 8008368:	0598      	lsls	r0, r3, #22
 800836a:	d4f7      	bmi.n	800835c <_vfiprintf_r+0x44>
 800836c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800836e:	f7ff ff5d 	bl	800822c <__retarget_lock_release_recursive>
 8008372:	e7f3      	b.n	800835c <_vfiprintf_r+0x44>
 8008374:	2300      	movs	r3, #0
 8008376:	9309      	str	r3, [sp, #36]	@ 0x24
 8008378:	2320      	movs	r3, #32
 800837a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800837e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008382:	2330      	movs	r3, #48	@ 0x30
 8008384:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008534 <_vfiprintf_r+0x21c>
 8008388:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800838c:	f04f 0901 	mov.w	r9, #1
 8008390:	4623      	mov	r3, r4
 8008392:	469a      	mov	sl, r3
 8008394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008398:	b10a      	cbz	r2, 800839e <_vfiprintf_r+0x86>
 800839a:	2a25      	cmp	r2, #37	@ 0x25
 800839c:	d1f9      	bne.n	8008392 <_vfiprintf_r+0x7a>
 800839e:	ebba 0b04 	subs.w	fp, sl, r4
 80083a2:	d00b      	beq.n	80083bc <_vfiprintf_r+0xa4>
 80083a4:	465b      	mov	r3, fp
 80083a6:	4622      	mov	r2, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7ff ffa1 	bl	80082f2 <__sfputs_r>
 80083b0:	3001      	adds	r0, #1
 80083b2:	f000 80a7 	beq.w	8008504 <_vfiprintf_r+0x1ec>
 80083b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083b8:	445a      	add	r2, fp
 80083ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80083bc:	f89a 3000 	ldrb.w	r3, [sl]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 809f 	beq.w	8008504 <_vfiprintf_r+0x1ec>
 80083c6:	2300      	movs	r3, #0
 80083c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d0:	f10a 0a01 	add.w	sl, sl, #1
 80083d4:	9304      	str	r3, [sp, #16]
 80083d6:	9307      	str	r3, [sp, #28]
 80083d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80083de:	4654      	mov	r4, sl
 80083e0:	2205      	movs	r2, #5
 80083e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e6:	4853      	ldr	r0, [pc, #332]	@ (8008534 <_vfiprintf_r+0x21c>)
 80083e8:	f7f7 ff1a 	bl	8000220 <memchr>
 80083ec:	9a04      	ldr	r2, [sp, #16]
 80083ee:	b9d8      	cbnz	r0, 8008428 <_vfiprintf_r+0x110>
 80083f0:	06d1      	lsls	r1, r2, #27
 80083f2:	bf44      	itt	mi
 80083f4:	2320      	movmi	r3, #32
 80083f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083fa:	0713      	lsls	r3, r2, #28
 80083fc:	bf44      	itt	mi
 80083fe:	232b      	movmi	r3, #43	@ 0x2b
 8008400:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008404:	f89a 3000 	ldrb.w	r3, [sl]
 8008408:	2b2a      	cmp	r3, #42	@ 0x2a
 800840a:	d015      	beq.n	8008438 <_vfiprintf_r+0x120>
 800840c:	9a07      	ldr	r2, [sp, #28]
 800840e:	4654      	mov	r4, sl
 8008410:	2000      	movs	r0, #0
 8008412:	f04f 0c0a 	mov.w	ip, #10
 8008416:	4621      	mov	r1, r4
 8008418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800841c:	3b30      	subs	r3, #48	@ 0x30
 800841e:	2b09      	cmp	r3, #9
 8008420:	d94b      	bls.n	80084ba <_vfiprintf_r+0x1a2>
 8008422:	b1b0      	cbz	r0, 8008452 <_vfiprintf_r+0x13a>
 8008424:	9207      	str	r2, [sp, #28]
 8008426:	e014      	b.n	8008452 <_vfiprintf_r+0x13a>
 8008428:	eba0 0308 	sub.w	r3, r0, r8
 800842c:	fa09 f303 	lsl.w	r3, r9, r3
 8008430:	4313      	orrs	r3, r2
 8008432:	9304      	str	r3, [sp, #16]
 8008434:	46a2      	mov	sl, r4
 8008436:	e7d2      	b.n	80083de <_vfiprintf_r+0xc6>
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	1d19      	adds	r1, r3, #4
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	9103      	str	r1, [sp, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	bfbb      	ittet	lt
 8008444:	425b      	neglt	r3, r3
 8008446:	f042 0202 	orrlt.w	r2, r2, #2
 800844a:	9307      	strge	r3, [sp, #28]
 800844c:	9307      	strlt	r3, [sp, #28]
 800844e:	bfb8      	it	lt
 8008450:	9204      	strlt	r2, [sp, #16]
 8008452:	7823      	ldrb	r3, [r4, #0]
 8008454:	2b2e      	cmp	r3, #46	@ 0x2e
 8008456:	d10a      	bne.n	800846e <_vfiprintf_r+0x156>
 8008458:	7863      	ldrb	r3, [r4, #1]
 800845a:	2b2a      	cmp	r3, #42	@ 0x2a
 800845c:	d132      	bne.n	80084c4 <_vfiprintf_r+0x1ac>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	9203      	str	r2, [sp, #12]
 8008466:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800846a:	3402      	adds	r4, #2
 800846c:	9305      	str	r3, [sp, #20]
 800846e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008544 <_vfiprintf_r+0x22c>
 8008472:	7821      	ldrb	r1, [r4, #0]
 8008474:	2203      	movs	r2, #3
 8008476:	4650      	mov	r0, sl
 8008478:	f7f7 fed2 	bl	8000220 <memchr>
 800847c:	b138      	cbz	r0, 800848e <_vfiprintf_r+0x176>
 800847e:	9b04      	ldr	r3, [sp, #16]
 8008480:	eba0 000a 	sub.w	r0, r0, sl
 8008484:	2240      	movs	r2, #64	@ 0x40
 8008486:	4082      	lsls	r2, r0
 8008488:	4313      	orrs	r3, r2
 800848a:	3401      	adds	r4, #1
 800848c:	9304      	str	r3, [sp, #16]
 800848e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008492:	4829      	ldr	r0, [pc, #164]	@ (8008538 <_vfiprintf_r+0x220>)
 8008494:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008498:	2206      	movs	r2, #6
 800849a:	f7f7 fec1 	bl	8000220 <memchr>
 800849e:	2800      	cmp	r0, #0
 80084a0:	d03f      	beq.n	8008522 <_vfiprintf_r+0x20a>
 80084a2:	4b26      	ldr	r3, [pc, #152]	@ (800853c <_vfiprintf_r+0x224>)
 80084a4:	bb1b      	cbnz	r3, 80084ee <_vfiprintf_r+0x1d6>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	3307      	adds	r3, #7
 80084aa:	f023 0307 	bic.w	r3, r3, #7
 80084ae:	3308      	adds	r3, #8
 80084b0:	9303      	str	r3, [sp, #12]
 80084b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b4:	443b      	add	r3, r7
 80084b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80084b8:	e76a      	b.n	8008390 <_vfiprintf_r+0x78>
 80084ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80084be:	460c      	mov	r4, r1
 80084c0:	2001      	movs	r0, #1
 80084c2:	e7a8      	b.n	8008416 <_vfiprintf_r+0xfe>
 80084c4:	2300      	movs	r3, #0
 80084c6:	3401      	adds	r4, #1
 80084c8:	9305      	str	r3, [sp, #20]
 80084ca:	4619      	mov	r1, r3
 80084cc:	f04f 0c0a 	mov.w	ip, #10
 80084d0:	4620      	mov	r0, r4
 80084d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d6:	3a30      	subs	r2, #48	@ 0x30
 80084d8:	2a09      	cmp	r2, #9
 80084da:	d903      	bls.n	80084e4 <_vfiprintf_r+0x1cc>
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0c6      	beq.n	800846e <_vfiprintf_r+0x156>
 80084e0:	9105      	str	r1, [sp, #20]
 80084e2:	e7c4      	b.n	800846e <_vfiprintf_r+0x156>
 80084e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80084e8:	4604      	mov	r4, r0
 80084ea:	2301      	movs	r3, #1
 80084ec:	e7f0      	b.n	80084d0 <_vfiprintf_r+0x1b8>
 80084ee:	ab03      	add	r3, sp, #12
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	462a      	mov	r2, r5
 80084f4:	4b12      	ldr	r3, [pc, #72]	@ (8008540 <_vfiprintf_r+0x228>)
 80084f6:	a904      	add	r1, sp, #16
 80084f8:	4630      	mov	r0, r6
 80084fa:	f3af 8000 	nop.w
 80084fe:	4607      	mov	r7, r0
 8008500:	1c78      	adds	r0, r7, #1
 8008502:	d1d6      	bne.n	80084b2 <_vfiprintf_r+0x19a>
 8008504:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008506:	07d9      	lsls	r1, r3, #31
 8008508:	d405      	bmi.n	8008516 <_vfiprintf_r+0x1fe>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	059a      	lsls	r2, r3, #22
 800850e:	d402      	bmi.n	8008516 <_vfiprintf_r+0x1fe>
 8008510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008512:	f7ff fe8b 	bl	800822c <__retarget_lock_release_recursive>
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	065b      	lsls	r3, r3, #25
 800851a:	f53f af1f 	bmi.w	800835c <_vfiprintf_r+0x44>
 800851e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008520:	e71e      	b.n	8008360 <_vfiprintf_r+0x48>
 8008522:	ab03      	add	r3, sp, #12
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	462a      	mov	r2, r5
 8008528:	4b05      	ldr	r3, [pc, #20]	@ (8008540 <_vfiprintf_r+0x228>)
 800852a:	a904      	add	r1, sp, #16
 800852c:	4630      	mov	r0, r6
 800852e:	f000 f879 	bl	8008624 <_printf_i>
 8008532:	e7e4      	b.n	80084fe <_vfiprintf_r+0x1e6>
 8008534:	08009168 	.word	0x08009168
 8008538:	08009172 	.word	0x08009172
 800853c:	00000000 	.word	0x00000000
 8008540:	080082f3 	.word	0x080082f3
 8008544:	0800916e 	.word	0x0800916e

08008548 <_printf_common>:
 8008548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854c:	4616      	mov	r6, r2
 800854e:	4698      	mov	r8, r3
 8008550:	688a      	ldr	r2, [r1, #8]
 8008552:	690b      	ldr	r3, [r1, #16]
 8008554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008558:	4293      	cmp	r3, r2
 800855a:	bfb8      	it	lt
 800855c:	4613      	movlt	r3, r2
 800855e:	6033      	str	r3, [r6, #0]
 8008560:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008564:	4607      	mov	r7, r0
 8008566:	460c      	mov	r4, r1
 8008568:	b10a      	cbz	r2, 800856e <_printf_common+0x26>
 800856a:	3301      	adds	r3, #1
 800856c:	6033      	str	r3, [r6, #0]
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	0699      	lsls	r1, r3, #26
 8008572:	bf42      	ittt	mi
 8008574:	6833      	ldrmi	r3, [r6, #0]
 8008576:	3302      	addmi	r3, #2
 8008578:	6033      	strmi	r3, [r6, #0]
 800857a:	6825      	ldr	r5, [r4, #0]
 800857c:	f015 0506 	ands.w	r5, r5, #6
 8008580:	d106      	bne.n	8008590 <_printf_common+0x48>
 8008582:	f104 0a19 	add.w	sl, r4, #25
 8008586:	68e3      	ldr	r3, [r4, #12]
 8008588:	6832      	ldr	r2, [r6, #0]
 800858a:	1a9b      	subs	r3, r3, r2
 800858c:	42ab      	cmp	r3, r5
 800858e:	dc26      	bgt.n	80085de <_printf_common+0x96>
 8008590:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008594:	6822      	ldr	r2, [r4, #0]
 8008596:	3b00      	subs	r3, #0
 8008598:	bf18      	it	ne
 800859a:	2301      	movne	r3, #1
 800859c:	0692      	lsls	r2, r2, #26
 800859e:	d42b      	bmi.n	80085f8 <_printf_common+0xb0>
 80085a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085a4:	4641      	mov	r1, r8
 80085a6:	4638      	mov	r0, r7
 80085a8:	47c8      	blx	r9
 80085aa:	3001      	adds	r0, #1
 80085ac:	d01e      	beq.n	80085ec <_printf_common+0xa4>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	6922      	ldr	r2, [r4, #16]
 80085b2:	f003 0306 	and.w	r3, r3, #6
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	bf02      	ittt	eq
 80085ba:	68e5      	ldreq	r5, [r4, #12]
 80085bc:	6833      	ldreq	r3, [r6, #0]
 80085be:	1aed      	subeq	r5, r5, r3
 80085c0:	68a3      	ldr	r3, [r4, #8]
 80085c2:	bf0c      	ite	eq
 80085c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085c8:	2500      	movne	r5, #0
 80085ca:	4293      	cmp	r3, r2
 80085cc:	bfc4      	itt	gt
 80085ce:	1a9b      	subgt	r3, r3, r2
 80085d0:	18ed      	addgt	r5, r5, r3
 80085d2:	2600      	movs	r6, #0
 80085d4:	341a      	adds	r4, #26
 80085d6:	42b5      	cmp	r5, r6
 80085d8:	d11a      	bne.n	8008610 <_printf_common+0xc8>
 80085da:	2000      	movs	r0, #0
 80085dc:	e008      	b.n	80085f0 <_printf_common+0xa8>
 80085de:	2301      	movs	r3, #1
 80085e0:	4652      	mov	r2, sl
 80085e2:	4641      	mov	r1, r8
 80085e4:	4638      	mov	r0, r7
 80085e6:	47c8      	blx	r9
 80085e8:	3001      	adds	r0, #1
 80085ea:	d103      	bne.n	80085f4 <_printf_common+0xac>
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f4:	3501      	adds	r5, #1
 80085f6:	e7c6      	b.n	8008586 <_printf_common+0x3e>
 80085f8:	18e1      	adds	r1, r4, r3
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	2030      	movs	r0, #48	@ 0x30
 80085fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008602:	4422      	add	r2, r4
 8008604:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008608:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800860c:	3302      	adds	r3, #2
 800860e:	e7c7      	b.n	80085a0 <_printf_common+0x58>
 8008610:	2301      	movs	r3, #1
 8008612:	4622      	mov	r2, r4
 8008614:	4641      	mov	r1, r8
 8008616:	4638      	mov	r0, r7
 8008618:	47c8      	blx	r9
 800861a:	3001      	adds	r0, #1
 800861c:	d0e6      	beq.n	80085ec <_printf_common+0xa4>
 800861e:	3601      	adds	r6, #1
 8008620:	e7d9      	b.n	80085d6 <_printf_common+0x8e>
	...

08008624 <_printf_i>:
 8008624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008628:	7e0f      	ldrb	r7, [r1, #24]
 800862a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800862c:	2f78      	cmp	r7, #120	@ 0x78
 800862e:	4691      	mov	r9, r2
 8008630:	4680      	mov	r8, r0
 8008632:	460c      	mov	r4, r1
 8008634:	469a      	mov	sl, r3
 8008636:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800863a:	d807      	bhi.n	800864c <_printf_i+0x28>
 800863c:	2f62      	cmp	r7, #98	@ 0x62
 800863e:	d80a      	bhi.n	8008656 <_printf_i+0x32>
 8008640:	2f00      	cmp	r7, #0
 8008642:	f000 80d2 	beq.w	80087ea <_printf_i+0x1c6>
 8008646:	2f58      	cmp	r7, #88	@ 0x58
 8008648:	f000 80b9 	beq.w	80087be <_printf_i+0x19a>
 800864c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008650:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008654:	e03a      	b.n	80086cc <_printf_i+0xa8>
 8008656:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800865a:	2b15      	cmp	r3, #21
 800865c:	d8f6      	bhi.n	800864c <_printf_i+0x28>
 800865e:	a101      	add	r1, pc, #4	@ (adr r1, 8008664 <_printf_i+0x40>)
 8008660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008664:	080086bd 	.word	0x080086bd
 8008668:	080086d1 	.word	0x080086d1
 800866c:	0800864d 	.word	0x0800864d
 8008670:	0800864d 	.word	0x0800864d
 8008674:	0800864d 	.word	0x0800864d
 8008678:	0800864d 	.word	0x0800864d
 800867c:	080086d1 	.word	0x080086d1
 8008680:	0800864d 	.word	0x0800864d
 8008684:	0800864d 	.word	0x0800864d
 8008688:	0800864d 	.word	0x0800864d
 800868c:	0800864d 	.word	0x0800864d
 8008690:	080087d1 	.word	0x080087d1
 8008694:	080086fb 	.word	0x080086fb
 8008698:	0800878b 	.word	0x0800878b
 800869c:	0800864d 	.word	0x0800864d
 80086a0:	0800864d 	.word	0x0800864d
 80086a4:	080087f3 	.word	0x080087f3
 80086a8:	0800864d 	.word	0x0800864d
 80086ac:	080086fb 	.word	0x080086fb
 80086b0:	0800864d 	.word	0x0800864d
 80086b4:	0800864d 	.word	0x0800864d
 80086b8:	08008793 	.word	0x08008793
 80086bc:	6833      	ldr	r3, [r6, #0]
 80086be:	1d1a      	adds	r2, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6032      	str	r2, [r6, #0]
 80086c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086cc:	2301      	movs	r3, #1
 80086ce:	e09d      	b.n	800880c <_printf_i+0x1e8>
 80086d0:	6833      	ldr	r3, [r6, #0]
 80086d2:	6820      	ldr	r0, [r4, #0]
 80086d4:	1d19      	adds	r1, r3, #4
 80086d6:	6031      	str	r1, [r6, #0]
 80086d8:	0606      	lsls	r6, r0, #24
 80086da:	d501      	bpl.n	80086e0 <_printf_i+0xbc>
 80086dc:	681d      	ldr	r5, [r3, #0]
 80086de:	e003      	b.n	80086e8 <_printf_i+0xc4>
 80086e0:	0645      	lsls	r5, r0, #25
 80086e2:	d5fb      	bpl.n	80086dc <_printf_i+0xb8>
 80086e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086e8:	2d00      	cmp	r5, #0
 80086ea:	da03      	bge.n	80086f4 <_printf_i+0xd0>
 80086ec:	232d      	movs	r3, #45	@ 0x2d
 80086ee:	426d      	negs	r5, r5
 80086f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086f4:	4859      	ldr	r0, [pc, #356]	@ (800885c <_printf_i+0x238>)
 80086f6:	230a      	movs	r3, #10
 80086f8:	e011      	b.n	800871e <_printf_i+0xfa>
 80086fa:	6821      	ldr	r1, [r4, #0]
 80086fc:	6833      	ldr	r3, [r6, #0]
 80086fe:	0608      	lsls	r0, r1, #24
 8008700:	f853 5b04 	ldr.w	r5, [r3], #4
 8008704:	d402      	bmi.n	800870c <_printf_i+0xe8>
 8008706:	0649      	lsls	r1, r1, #25
 8008708:	bf48      	it	mi
 800870a:	b2ad      	uxthmi	r5, r5
 800870c:	2f6f      	cmp	r7, #111	@ 0x6f
 800870e:	4853      	ldr	r0, [pc, #332]	@ (800885c <_printf_i+0x238>)
 8008710:	6033      	str	r3, [r6, #0]
 8008712:	bf14      	ite	ne
 8008714:	230a      	movne	r3, #10
 8008716:	2308      	moveq	r3, #8
 8008718:	2100      	movs	r1, #0
 800871a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800871e:	6866      	ldr	r6, [r4, #4]
 8008720:	60a6      	str	r6, [r4, #8]
 8008722:	2e00      	cmp	r6, #0
 8008724:	bfa2      	ittt	ge
 8008726:	6821      	ldrge	r1, [r4, #0]
 8008728:	f021 0104 	bicge.w	r1, r1, #4
 800872c:	6021      	strge	r1, [r4, #0]
 800872e:	b90d      	cbnz	r5, 8008734 <_printf_i+0x110>
 8008730:	2e00      	cmp	r6, #0
 8008732:	d04b      	beq.n	80087cc <_printf_i+0x1a8>
 8008734:	4616      	mov	r6, r2
 8008736:	fbb5 f1f3 	udiv	r1, r5, r3
 800873a:	fb03 5711 	mls	r7, r3, r1, r5
 800873e:	5dc7      	ldrb	r7, [r0, r7]
 8008740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008744:	462f      	mov	r7, r5
 8008746:	42bb      	cmp	r3, r7
 8008748:	460d      	mov	r5, r1
 800874a:	d9f4      	bls.n	8008736 <_printf_i+0x112>
 800874c:	2b08      	cmp	r3, #8
 800874e:	d10b      	bne.n	8008768 <_printf_i+0x144>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	07df      	lsls	r7, r3, #31
 8008754:	d508      	bpl.n	8008768 <_printf_i+0x144>
 8008756:	6923      	ldr	r3, [r4, #16]
 8008758:	6861      	ldr	r1, [r4, #4]
 800875a:	4299      	cmp	r1, r3
 800875c:	bfde      	ittt	le
 800875e:	2330      	movle	r3, #48	@ 0x30
 8008760:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008764:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008768:	1b92      	subs	r2, r2, r6
 800876a:	6122      	str	r2, [r4, #16]
 800876c:	f8cd a000 	str.w	sl, [sp]
 8008770:	464b      	mov	r3, r9
 8008772:	aa03      	add	r2, sp, #12
 8008774:	4621      	mov	r1, r4
 8008776:	4640      	mov	r0, r8
 8008778:	f7ff fee6 	bl	8008548 <_printf_common>
 800877c:	3001      	adds	r0, #1
 800877e:	d14a      	bne.n	8008816 <_printf_i+0x1f2>
 8008780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008784:	b004      	add	sp, #16
 8008786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	f043 0320 	orr.w	r3, r3, #32
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	4833      	ldr	r0, [pc, #204]	@ (8008860 <_printf_i+0x23c>)
 8008794:	2778      	movs	r7, #120	@ 0x78
 8008796:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	6831      	ldr	r1, [r6, #0]
 800879e:	061f      	lsls	r7, r3, #24
 80087a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80087a4:	d402      	bmi.n	80087ac <_printf_i+0x188>
 80087a6:	065f      	lsls	r7, r3, #25
 80087a8:	bf48      	it	mi
 80087aa:	b2ad      	uxthmi	r5, r5
 80087ac:	6031      	str	r1, [r6, #0]
 80087ae:	07d9      	lsls	r1, r3, #31
 80087b0:	bf44      	itt	mi
 80087b2:	f043 0320 	orrmi.w	r3, r3, #32
 80087b6:	6023      	strmi	r3, [r4, #0]
 80087b8:	b11d      	cbz	r5, 80087c2 <_printf_i+0x19e>
 80087ba:	2310      	movs	r3, #16
 80087bc:	e7ac      	b.n	8008718 <_printf_i+0xf4>
 80087be:	4827      	ldr	r0, [pc, #156]	@ (800885c <_printf_i+0x238>)
 80087c0:	e7e9      	b.n	8008796 <_printf_i+0x172>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	f023 0320 	bic.w	r3, r3, #32
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	e7f6      	b.n	80087ba <_printf_i+0x196>
 80087cc:	4616      	mov	r6, r2
 80087ce:	e7bd      	b.n	800874c <_printf_i+0x128>
 80087d0:	6833      	ldr	r3, [r6, #0]
 80087d2:	6825      	ldr	r5, [r4, #0]
 80087d4:	6961      	ldr	r1, [r4, #20]
 80087d6:	1d18      	adds	r0, r3, #4
 80087d8:	6030      	str	r0, [r6, #0]
 80087da:	062e      	lsls	r6, r5, #24
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	d501      	bpl.n	80087e4 <_printf_i+0x1c0>
 80087e0:	6019      	str	r1, [r3, #0]
 80087e2:	e002      	b.n	80087ea <_printf_i+0x1c6>
 80087e4:	0668      	lsls	r0, r5, #25
 80087e6:	d5fb      	bpl.n	80087e0 <_printf_i+0x1bc>
 80087e8:	8019      	strh	r1, [r3, #0]
 80087ea:	2300      	movs	r3, #0
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	4616      	mov	r6, r2
 80087f0:	e7bc      	b.n	800876c <_printf_i+0x148>
 80087f2:	6833      	ldr	r3, [r6, #0]
 80087f4:	1d1a      	adds	r2, r3, #4
 80087f6:	6032      	str	r2, [r6, #0]
 80087f8:	681e      	ldr	r6, [r3, #0]
 80087fa:	6862      	ldr	r2, [r4, #4]
 80087fc:	2100      	movs	r1, #0
 80087fe:	4630      	mov	r0, r6
 8008800:	f7f7 fd0e 	bl	8000220 <memchr>
 8008804:	b108      	cbz	r0, 800880a <_printf_i+0x1e6>
 8008806:	1b80      	subs	r0, r0, r6
 8008808:	6060      	str	r0, [r4, #4]
 800880a:	6863      	ldr	r3, [r4, #4]
 800880c:	6123      	str	r3, [r4, #16]
 800880e:	2300      	movs	r3, #0
 8008810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008814:	e7aa      	b.n	800876c <_printf_i+0x148>
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	4632      	mov	r2, r6
 800881a:	4649      	mov	r1, r9
 800881c:	4640      	mov	r0, r8
 800881e:	47d0      	blx	sl
 8008820:	3001      	adds	r0, #1
 8008822:	d0ad      	beq.n	8008780 <_printf_i+0x15c>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	079b      	lsls	r3, r3, #30
 8008828:	d413      	bmi.n	8008852 <_printf_i+0x22e>
 800882a:	68e0      	ldr	r0, [r4, #12]
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	4298      	cmp	r0, r3
 8008830:	bfb8      	it	lt
 8008832:	4618      	movlt	r0, r3
 8008834:	e7a6      	b.n	8008784 <_printf_i+0x160>
 8008836:	2301      	movs	r3, #1
 8008838:	4632      	mov	r2, r6
 800883a:	4649      	mov	r1, r9
 800883c:	4640      	mov	r0, r8
 800883e:	47d0      	blx	sl
 8008840:	3001      	adds	r0, #1
 8008842:	d09d      	beq.n	8008780 <_printf_i+0x15c>
 8008844:	3501      	adds	r5, #1
 8008846:	68e3      	ldr	r3, [r4, #12]
 8008848:	9903      	ldr	r1, [sp, #12]
 800884a:	1a5b      	subs	r3, r3, r1
 800884c:	42ab      	cmp	r3, r5
 800884e:	dcf2      	bgt.n	8008836 <_printf_i+0x212>
 8008850:	e7eb      	b.n	800882a <_printf_i+0x206>
 8008852:	2500      	movs	r5, #0
 8008854:	f104 0619 	add.w	r6, r4, #25
 8008858:	e7f5      	b.n	8008846 <_printf_i+0x222>
 800885a:	bf00      	nop
 800885c:	08009179 	.word	0x08009179
 8008860:	0800918a 	.word	0x0800918a

08008864 <__sflush_r>:
 8008864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886c:	0716      	lsls	r6, r2, #28
 800886e:	4605      	mov	r5, r0
 8008870:	460c      	mov	r4, r1
 8008872:	d454      	bmi.n	800891e <__sflush_r+0xba>
 8008874:	684b      	ldr	r3, [r1, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	dc02      	bgt.n	8008880 <__sflush_r+0x1c>
 800887a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	dd48      	ble.n	8008912 <__sflush_r+0xae>
 8008880:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008882:	2e00      	cmp	r6, #0
 8008884:	d045      	beq.n	8008912 <__sflush_r+0xae>
 8008886:	2300      	movs	r3, #0
 8008888:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800888c:	682f      	ldr	r7, [r5, #0]
 800888e:	6a21      	ldr	r1, [r4, #32]
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	d030      	beq.n	80088f6 <__sflush_r+0x92>
 8008894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	0759      	lsls	r1, r3, #29
 800889a:	d505      	bpl.n	80088a8 <__sflush_r+0x44>
 800889c:	6863      	ldr	r3, [r4, #4]
 800889e:	1ad2      	subs	r2, r2, r3
 80088a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088a2:	b10b      	cbz	r3, 80088a8 <__sflush_r+0x44>
 80088a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	2300      	movs	r3, #0
 80088aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088ac:	6a21      	ldr	r1, [r4, #32]
 80088ae:	4628      	mov	r0, r5
 80088b0:	47b0      	blx	r6
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	d106      	bne.n	80088c6 <__sflush_r+0x62>
 80088b8:	6829      	ldr	r1, [r5, #0]
 80088ba:	291d      	cmp	r1, #29
 80088bc:	d82b      	bhi.n	8008916 <__sflush_r+0xb2>
 80088be:	4a2a      	ldr	r2, [pc, #168]	@ (8008968 <__sflush_r+0x104>)
 80088c0:	410a      	asrs	r2, r1
 80088c2:	07d6      	lsls	r6, r2, #31
 80088c4:	d427      	bmi.n	8008916 <__sflush_r+0xb2>
 80088c6:	2200      	movs	r2, #0
 80088c8:	6062      	str	r2, [r4, #4]
 80088ca:	04d9      	lsls	r1, r3, #19
 80088cc:	6922      	ldr	r2, [r4, #16]
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	d504      	bpl.n	80088dc <__sflush_r+0x78>
 80088d2:	1c42      	adds	r2, r0, #1
 80088d4:	d101      	bne.n	80088da <__sflush_r+0x76>
 80088d6:	682b      	ldr	r3, [r5, #0]
 80088d8:	b903      	cbnz	r3, 80088dc <__sflush_r+0x78>
 80088da:	6560      	str	r0, [r4, #84]	@ 0x54
 80088dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088de:	602f      	str	r7, [r5, #0]
 80088e0:	b1b9      	cbz	r1, 8008912 <__sflush_r+0xae>
 80088e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088e6:	4299      	cmp	r1, r3
 80088e8:	d002      	beq.n	80088f0 <__sflush_r+0x8c>
 80088ea:	4628      	mov	r0, r5
 80088ec:	f7ff fca0 	bl	8008230 <_free_r>
 80088f0:	2300      	movs	r3, #0
 80088f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80088f4:	e00d      	b.n	8008912 <__sflush_r+0xae>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b0      	blx	r6
 80088fc:	4602      	mov	r2, r0
 80088fe:	1c50      	adds	r0, r2, #1
 8008900:	d1c9      	bne.n	8008896 <__sflush_r+0x32>
 8008902:	682b      	ldr	r3, [r5, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0c6      	beq.n	8008896 <__sflush_r+0x32>
 8008908:	2b1d      	cmp	r3, #29
 800890a:	d001      	beq.n	8008910 <__sflush_r+0xac>
 800890c:	2b16      	cmp	r3, #22
 800890e:	d11e      	bne.n	800894e <__sflush_r+0xea>
 8008910:	602f      	str	r7, [r5, #0]
 8008912:	2000      	movs	r0, #0
 8008914:	e022      	b.n	800895c <__sflush_r+0xf8>
 8008916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891a:	b21b      	sxth	r3, r3
 800891c:	e01b      	b.n	8008956 <__sflush_r+0xf2>
 800891e:	690f      	ldr	r7, [r1, #16]
 8008920:	2f00      	cmp	r7, #0
 8008922:	d0f6      	beq.n	8008912 <__sflush_r+0xae>
 8008924:	0793      	lsls	r3, r2, #30
 8008926:	680e      	ldr	r6, [r1, #0]
 8008928:	bf08      	it	eq
 800892a:	694b      	ldreq	r3, [r1, #20]
 800892c:	600f      	str	r7, [r1, #0]
 800892e:	bf18      	it	ne
 8008930:	2300      	movne	r3, #0
 8008932:	eba6 0807 	sub.w	r8, r6, r7
 8008936:	608b      	str	r3, [r1, #8]
 8008938:	f1b8 0f00 	cmp.w	r8, #0
 800893c:	dde9      	ble.n	8008912 <__sflush_r+0xae>
 800893e:	6a21      	ldr	r1, [r4, #32]
 8008940:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008942:	4643      	mov	r3, r8
 8008944:	463a      	mov	r2, r7
 8008946:	4628      	mov	r0, r5
 8008948:	47b0      	blx	r6
 800894a:	2800      	cmp	r0, #0
 800894c:	dc08      	bgt.n	8008960 <__sflush_r+0xfc>
 800894e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008960:	4407      	add	r7, r0
 8008962:	eba8 0800 	sub.w	r8, r8, r0
 8008966:	e7e7      	b.n	8008938 <__sflush_r+0xd4>
 8008968:	dfbffffe 	.word	0xdfbffffe

0800896c <_fflush_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	690b      	ldr	r3, [r1, #16]
 8008970:	4605      	mov	r5, r0
 8008972:	460c      	mov	r4, r1
 8008974:	b913      	cbnz	r3, 800897c <_fflush_r+0x10>
 8008976:	2500      	movs	r5, #0
 8008978:	4628      	mov	r0, r5
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	b118      	cbz	r0, 8008986 <_fflush_r+0x1a>
 800897e:	6a03      	ldr	r3, [r0, #32]
 8008980:	b90b      	cbnz	r3, 8008986 <_fflush_r+0x1a>
 8008982:	f7ff fa4b 	bl	8007e1c <__sinit>
 8008986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0f3      	beq.n	8008976 <_fflush_r+0xa>
 800898e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008990:	07d0      	lsls	r0, r2, #31
 8008992:	d404      	bmi.n	800899e <_fflush_r+0x32>
 8008994:	0599      	lsls	r1, r3, #22
 8008996:	d402      	bmi.n	800899e <_fflush_r+0x32>
 8008998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800899a:	f7ff fc46 	bl	800822a <__retarget_lock_acquire_recursive>
 800899e:	4628      	mov	r0, r5
 80089a0:	4621      	mov	r1, r4
 80089a2:	f7ff ff5f 	bl	8008864 <__sflush_r>
 80089a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089a8:	07da      	lsls	r2, r3, #31
 80089aa:	4605      	mov	r5, r0
 80089ac:	d4e4      	bmi.n	8008978 <_fflush_r+0xc>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	059b      	lsls	r3, r3, #22
 80089b2:	d4e1      	bmi.n	8008978 <_fflush_r+0xc>
 80089b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089b6:	f7ff fc39 	bl	800822c <__retarget_lock_release_recursive>
 80089ba:	e7dd      	b.n	8008978 <_fflush_r+0xc>

080089bc <__swhatbuf_r>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	460c      	mov	r4, r1
 80089c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c4:	2900      	cmp	r1, #0
 80089c6:	b096      	sub	sp, #88	@ 0x58
 80089c8:	4615      	mov	r5, r2
 80089ca:	461e      	mov	r6, r3
 80089cc:	da0d      	bge.n	80089ea <__swhatbuf_r+0x2e>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089d4:	f04f 0100 	mov.w	r1, #0
 80089d8:	bf14      	ite	ne
 80089da:	2340      	movne	r3, #64	@ 0x40
 80089dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089e0:	2000      	movs	r0, #0
 80089e2:	6031      	str	r1, [r6, #0]
 80089e4:	602b      	str	r3, [r5, #0]
 80089e6:	b016      	add	sp, #88	@ 0x58
 80089e8:	bd70      	pop	{r4, r5, r6, pc}
 80089ea:	466a      	mov	r2, sp
 80089ec:	f000 f848 	bl	8008a80 <_fstat_r>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	dbec      	blt.n	80089ce <__swhatbuf_r+0x12>
 80089f4:	9901      	ldr	r1, [sp, #4]
 80089f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089fe:	4259      	negs	r1, r3
 8008a00:	4159      	adcs	r1, r3
 8008a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a06:	e7eb      	b.n	80089e0 <__swhatbuf_r+0x24>

08008a08 <__smakebuf_r>:
 8008a08:	898b      	ldrh	r3, [r1, #12]
 8008a0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a0c:	079d      	lsls	r5, r3, #30
 8008a0e:	4606      	mov	r6, r0
 8008a10:	460c      	mov	r4, r1
 8008a12:	d507      	bpl.n	8008a24 <__smakebuf_r+0x1c>
 8008a14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	6123      	str	r3, [r4, #16]
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	6163      	str	r3, [r4, #20]
 8008a20:	b003      	add	sp, #12
 8008a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a24:	ab01      	add	r3, sp, #4
 8008a26:	466a      	mov	r2, sp
 8008a28:	f7ff ffc8 	bl	80089bc <__swhatbuf_r>
 8008a2c:	9f00      	ldr	r7, [sp, #0]
 8008a2e:	4605      	mov	r5, r0
 8008a30:	4639      	mov	r1, r7
 8008a32:	4630      	mov	r0, r6
 8008a34:	f7ff f8da 	bl	8007bec <_malloc_r>
 8008a38:	b948      	cbnz	r0, 8008a4e <__smakebuf_r+0x46>
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	059a      	lsls	r2, r3, #22
 8008a40:	d4ee      	bmi.n	8008a20 <__smakebuf_r+0x18>
 8008a42:	f023 0303 	bic.w	r3, r3, #3
 8008a46:	f043 0302 	orr.w	r3, r3, #2
 8008a4a:	81a3      	strh	r3, [r4, #12]
 8008a4c:	e7e2      	b.n	8008a14 <__smakebuf_r+0xc>
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	6020      	str	r0, [r4, #0]
 8008a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a5e:	b15b      	cbz	r3, 8008a78 <__smakebuf_r+0x70>
 8008a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a64:	4630      	mov	r0, r6
 8008a66:	f000 f81d 	bl	8008aa4 <_isatty_r>
 8008a6a:	b128      	cbz	r0, 8008a78 <__smakebuf_r+0x70>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	f023 0303 	bic.w	r3, r3, #3
 8008a72:	f043 0301 	orr.w	r3, r3, #1
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	431d      	orrs	r5, r3
 8008a7c:	81a5      	strh	r5, [r4, #12]
 8008a7e:	e7cf      	b.n	8008a20 <__smakebuf_r+0x18>

08008a80 <_fstat_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d07      	ldr	r5, [pc, #28]	@ (8008aa0 <_fstat_r+0x20>)
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	602b      	str	r3, [r5, #0]
 8008a8e:	f7f8 f9a4 	bl	8000dda <_fstat>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d102      	bne.n	8008a9c <_fstat_r+0x1c>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	b103      	cbz	r3, 8008a9c <_fstat_r+0x1c>
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	bd38      	pop	{r3, r4, r5, pc}
 8008a9e:	bf00      	nop
 8008aa0:	200023bc 	.word	0x200023bc

08008aa4 <_isatty_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4d06      	ldr	r5, [pc, #24]	@ (8008ac0 <_isatty_r+0x1c>)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4604      	mov	r4, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	f7f8 f9a3 	bl	8000dfa <_isatty>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_isatty_r+0x1a>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_isatty_r+0x1a>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	200023bc 	.word	0x200023bc

08008ac4 <_init>:
 8008ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac6:	bf00      	nop
 8008ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aca:	bc08      	pop	{r3}
 8008acc:	469e      	mov	lr, r3
 8008ace:	4770      	bx	lr

08008ad0 <_fini>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	bf00      	nop
 8008ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad6:	bc08      	pop	{r3}
 8008ad8:	469e      	mov	lr, r3
 8008ada:	4770      	bx	lr
