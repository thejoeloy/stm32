
sd_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c04  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08006dd4  08006dd4  00007dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c8  080070c8  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  080070c8  080070c8  000080c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d0  080070d0  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d0  080070d0  000080d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070d4  080070d4  000080d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080070d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000080  08007158  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  08007158  0000973c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb26  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fc  00000000  00000000  00017bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  0001a4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4e  00000000  00000000  0001b260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243f9  00000000  00000000  0001bcae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001298d  00000000  00000000  000400a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdcec  00000000  00000000  00052a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120720  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd8  00000000  00000000  00120764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0012453c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006dbc 	.word	0x08006dbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08006dbc 	.word	0x08006dbc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fbde 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f822 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f8f2 	bl	80007f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000610:	f000 f890 	bl	8000734 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000614:	f000 f8c4 	bl	80007a0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000618:	f002 fbc6 	bl	8002da8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 800061c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000620:	f000 fc42 	bl	8000ea8 <HAL_Delay>
  sd_card_mount();
 8000624:	f000 f94a 	bl	80008bc <sd_card_mount>
  sd_card_read("test.txt");
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <main+0x44>)
 800062a:	f000 f979 	bl	8000920 <sd_card_read>
  sd_card_write("write.txt", "FUCKING these hoes like im Don Juan\r\n");
 800062e:	4906      	ldr	r1, [pc, #24]	@ (8000648 <main+0x48>)
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <main+0x4c>)
 8000632:	f000 f9c7 	bl	80009c4 <sd_card_write>
  sd_card_read("write.txt");
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <main+0x4c>)
 8000638:	f000 f972 	bl	8000920 <sd_card_read>
  sd_card_unmount();
 800063c:	f000 f964 	bl	8000908 <sd_card_unmount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x40>
 8000644:	08006dd4 	.word	0x08006dd4
 8000648:	08006de0 	.word	0x08006de0
 800064c:	08006e08 	.word	0x08006e08

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	@ 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fe28 	bl	80062b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <SystemClock_Config+0xdc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a2b      	ldr	r2, [pc, #172]	@ (800072c <SystemClock_Config+0xdc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b29      	ldr	r3, [pc, #164]	@ (800072c <SystemClock_Config+0xdc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <SystemClock_Config+0xe0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a25      	ldr	r2, [pc, #148]	@ (8000730 <SystemClock_Config+0xe0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <SystemClock_Config+0xe0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006c4:	23b4      	movs	r3, #180	@ 0xb4
 80006c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f9b1 	bl	8001a40 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e4:	f000 f8e4 	bl	80008b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e8:	f000 fe96 	bl	8001418 <HAL_PWREx_EnableOverDrive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f2:	f000 f8dd 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2105      	movs	r1, #5
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fecf 	bl	80014b8 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000720:	f000 f8c6 	bl	80008b0 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	@ 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000738:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_SPI1_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	@ (800079c <MX_SPI1_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000740:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000744:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000764:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000768:	2238      	movs	r2, #56	@ 0x38
 800076a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000780:	220a      	movs	r2, #10
 8000782:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000786:	f001 fbf9 	bl	8001f7c <HAL_SPI_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f88e 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000009c 	.word	0x2000009c
 800079c:	40013000 	.word	0x40013000

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f002 f822 	bl	8002820 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f865 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000f4 	.word	0x200000f4
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_GPIO_Init+0x7c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a17      	ldr	r2, [pc, #92]	@ (8000870 <MX_GPIO_Init+0x7c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_GPIO_Init+0x7c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_GPIO_Init+0x7c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <MX_GPIO_Init+0x7c>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_GPIO_Init+0x7c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2140      	movs	r1, #64	@ 0x40
 8000846:	480b      	ldr	r0, [pc, #44]	@ (8000874 <MX_GPIO_Init+0x80>)
 8000848:	f000 fdcc 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800084c:	2340      	movs	r3, #64	@ 0x40
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_GPIO_Init+0x80>)
 8000864:	f000 fc2a 	bl	80010bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020400 	.word	0x40020400

08000878 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e009      	b.n	800089e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	60ba      	str	r2, [r7, #8]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe8c 	bl	80005b0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbf1      	blt.n	800088a <_write+0x12>
  }
  return len;
 80008a6:	687b      	ldr	r3, [r7, #4]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <sd_card_mount>:
static FRESULT sd_result;
static FATFS sdCard;
static FIL sdFile;

void sd_card_mount()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	sd_result = f_mount(&sdCard, "", 1);
 80008c0:	2201      	movs	r2, #1
 80008c2:	490c      	ldr	r1, [pc, #48]	@ (80008f4 <sd_card_mount+0x38>)
 80008c4:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <sd_card_mount+0x3c>)
 80008c6:	f004 fcf5 	bl	80052b4 <f_mount>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <sd_card_mount+0x40>)
 80008d0:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <sd_card_mount+0x40>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d007      	beq.n	80008ea <sd_card_mount+0x2e>
	{
		printf("error in mounting an sd card: %d \n", sd_result);
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <sd_card_mount+0x40>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4619      	mov	r1, r3
 80008e0:	4807      	ldr	r0, [pc, #28]	@ (8000900 <sd_card_mount+0x44>)
 80008e2:	f005 fb9f 	bl	8006024 <iprintf>
		while(1);
 80008e6:	bf00      	nop
 80008e8:	e7fd      	b.n	80008e6 <sd_card_mount+0x2a>
	}
	else
	{
		printf("succeded in mounting an sd card \n");
 80008ea:	4806      	ldr	r0, [pc, #24]	@ (8000904 <sd_card_mount+0x48>)
 80008ec:	f005 fc02 	bl	80060f4 <puts>
	}
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08006e14 	.word	0x08006e14
 80008f8:	20000140 	.word	0x20000140
 80008fc:	2000013c 	.word	0x2000013c
 8000900:	08006e18 	.word	0x08006e18
 8000904:	08006e3c 	.word	0x08006e3c

08000908 <sd_card_unmount>:

void sd_card_unmount()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 800090c:	2200      	movs	r2, #0
 800090e:	4903      	ldr	r1, [pc, #12]	@ (800091c <sd_card_unmount+0x14>)
 8000910:	2000      	movs	r0, #0
 8000912:	f004 fccf 	bl	80052b4 <f_mount>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	08006e14 	.word	0x08006e14

08000920 <sd_card_read>:

void sd_card_read(const char* filename)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0a4      	sub	sp, #144	@ 0x90
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    BYTE readBuf[128]; // Adjust buffer size as needed

    // Open the file for reading
    sd_result = f_open(&sdFile, filename, FA_READ);
 8000928:	2201      	movs	r2, #1
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	481e      	ldr	r0, [pc, #120]	@ (80009a8 <sd_card_read+0x88>)
 800092e:	f004 fd07 	bl	8005340 <f_open>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b1d      	ldr	r3, [pc, #116]	@ (80009ac <sd_card_read+0x8c>)
 8000938:	701a      	strb	r2, [r3, #0]
    if (sd_result != FR_OK)
 800093a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <sd_card_read+0x8c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d007      	beq.n	8000952 <sd_card_read+0x32>
    {
        printf("Error opening file '%s' for reading: %d\n", filename, sd_result);
 8000942:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <sd_card_read+0x8c>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	4819      	ldr	r0, [pc, #100]	@ (80009b0 <sd_card_read+0x90>)
 800094c:	f005 fb6a 	bl	8006024 <iprintf>
 8000950:	e026      	b.n	80009a0 <sd_card_read+0x80>
        return;
    }

    printf("Successfully opened file '%s' for reading\n", filename);
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	4817      	ldr	r0, [pc, #92]	@ (80009b4 <sd_card_read+0x94>)
 8000956:	f005 fb65 	bl	8006024 <iprintf>

    // Read data from the file
    TCHAR* rres = f_gets((TCHAR*)readBuf, sizeof(readBuf), &sdFile);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <sd_card_read+0x88>)
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	4618      	mov	r0, r3
 8000964:	f005 fa02 	bl	8005d6c <f_gets>
 8000968:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    if (rres != NULL)
 800096c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000970:	2b00      	cmp	r3, #0
 8000972:	d007      	beq.n	8000984 <sd_card_read+0x64>
    {
        printf("Read from '%s': %s\n", filename, readBuf);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	461a      	mov	r2, r3
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	480e      	ldr	r0, [pc, #56]	@ (80009b8 <sd_card_read+0x98>)
 800097e:	f005 fb51 	bl	8006024 <iprintf>
 8000982:	e006      	b.n	8000992 <sd_card_read+0x72>
    }
    else
    {
        printf("Error reading from '%s': %d\n", filename, sd_result);
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <sd_card_read+0x8c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	480b      	ldr	r0, [pc, #44]	@ (80009bc <sd_card_read+0x9c>)
 800098e:	f005 fb49 	bl	8006024 <iprintf>
    }

    // Close the file
    f_close(&sdFile);
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <sd_card_read+0x88>)
 8000994:	f005 f9c0 	bl	8005d18 <f_close>
    printf("Closed file '%s' after reading\n", filename);
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	4809      	ldr	r0, [pc, #36]	@ (80009c0 <sd_card_read+0xa0>)
 800099c:	f005 fb42 	bl	8006024 <iprintf>
}
 80009a0:	3790      	adds	r7, #144	@ 0x90
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000370 	.word	0x20000370
 80009ac:	2000013c 	.word	0x2000013c
 80009b0:	08006e60 	.word	0x08006e60
 80009b4:	08006e8c 	.word	0x08006e8c
 80009b8:	08006eb8 	.word	0x08006eb8
 80009bc:	08006ecc 	.word	0x08006ecc
 80009c0:	08006eec 	.word	0x08006eec

080009c4 <sd_card_write>:

void sd_card_write(const char* filename, const char* data)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
    UINT bytesWritten;

    // Open the file for writing (create if not exists, overwrite if exists)
    sd_result = f_open(&sdFile, filename, FA_WRITE | FA_CREATE_ALWAYS);
 80009ce:	220a      	movs	r2, #10
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	4820      	ldr	r0, [pc, #128]	@ (8000a54 <sd_card_write+0x90>)
 80009d4:	f004 fcb4 	bl	8005340 <f_open>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <sd_card_write+0x94>)
 80009de:	701a      	strb	r2, [r3, #0]
    if (sd_result != FR_OK)
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <sd_card_write+0x94>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d007      	beq.n	80009f8 <sd_card_write+0x34>
    {
        printf("Error opening file '%s' for writing: %d\n", filename, sd_result);
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <sd_card_write+0x94>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	481a      	ldr	r0, [pc, #104]	@ (8000a5c <sd_card_write+0x98>)
 80009f2:	f005 fb17 	bl	8006024 <iprintf>
 80009f6:	e02a      	b.n	8000a4e <sd_card_write+0x8a>
        return;
    }

    printf("Successfully opened file '%s' for writing\n", filename);
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4819      	ldr	r0, [pc, #100]	@ (8000a60 <sd_card_write+0x9c>)
 80009fc:	f005 fb12 	bl	8006024 <iprintf>

    // Write data to the file
    sd_result = f_write(&sdFile, data, strlen(data), &bytesWritten);
 8000a00:	6838      	ldr	r0, [r7, #0]
 8000a02:	f7ff fc05 	bl	8000210 <strlen>
 8000a06:	4602      	mov	r2, r0
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	6839      	ldr	r1, [r7, #0]
 8000a0e:	4811      	ldr	r0, [pc, #68]	@ (8000a54 <sd_card_write+0x90>)
 8000a10:	f004 ff8f 	bl	8005932 <f_write>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <sd_card_write+0x94>)
 8000a1a:	701a      	strb	r2, [r3, #0]
    if (sd_result == FR_OK)
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <sd_card_write+0x94>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d106      	bne.n	8000a32 <sd_card_write+0x6e>
    {
        printf("Wrote %u bytes to '%s'\n", bytesWritten, filename);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480e      	ldr	r0, [pc, #56]	@ (8000a64 <sd_card_write+0xa0>)
 8000a2c:	f005 fafa 	bl	8006024 <iprintf>
 8000a30:	e006      	b.n	8000a40 <sd_card_write+0x7c>
    }
    else
    {
        printf("Error writing to '%s': %d\n", filename, sd_result);
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <sd_card_write+0x94>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	6879      	ldr	r1, [r7, #4]
 8000a3a:	480b      	ldr	r0, [pc, #44]	@ (8000a68 <sd_card_write+0xa4>)
 8000a3c:	f005 faf2 	bl	8006024 <iprintf>
    }

    // Close the file
    f_close(&sdFile);
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <sd_card_write+0x90>)
 8000a42:	f005 f969 	bl	8005d18 <f_close>
    printf("Closed file '%s' after writing\n", filename);
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <sd_card_write+0xa8>)
 8000a4a:	f005 faeb 	bl	8006024 <iprintf>
}
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000370 	.word	0x20000370
 8000a58:	2000013c 	.word	0x2000013c
 8000a5c:	08006f0c 	.word	0x08006f0c
 8000a60:	08006f38 	.word	0x08006f38
 8000a64:	08006f64 	.word	0x08006f64
 8000a68:	08006f7c 	.word	0x08006f7c
 8000a6c:	08006f98 	.word	0x08006f98

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a19      	ldr	r2, [pc, #100]	@ (8000b44 <HAL_SPI_MspInit+0x84>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12b      	bne.n	8000b3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <HAL_SPI_MspInit+0x88>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	4a17      	ldr	r2, [pc, #92]	@ (8000b48 <HAL_SPI_MspInit+0x88>)
 8000aec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <HAL_SPI_MspInit+0x88>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a10      	ldr	r2, [pc, #64]	@ (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b1a:	23e0      	movs	r3, #224	@ 0xe0
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <HAL_SPI_MspInit+0x8c>)
 8000b36:	f000 fac1 	bl	80010bc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	@ 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40013000 	.word	0x40013000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	@ (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12b      	bne.n	8000bca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a17      	ldr	r2, [pc, #92]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a10      	ldr	r2, [pc, #64]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000baa:	230c      	movs	r3, #12
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <HAL_UART_MspInit+0x8c>)
 8000bc6:	f000 fa79 	bl	80010bc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	@ 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <NMI_Handler+0x4>

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c36:	f000 f917 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e00a      	b.n	8000c66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c50:	f3af 8000 	nop.w
 8000c54:	4601      	mov	r1, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	60ba      	str	r2, [r7, #8]
 8000c5c:	b2ca      	uxtb	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dbf0      	blt.n	8000c50 <_read+0x12>
  }

  return len;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_isatty>:

int _isatty(int file)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb8:	2301      	movs	r3, #1
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f005 fb1e 	bl	8006350 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20020000 	.word	0x20020000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	200005a0 	.word	0x200005a0
 8000d48:	20000740 	.word	0x20000740

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d74:	f7ff ffea 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f005 fadd 	bl	800635c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fc2d 	bl	8000600 <main>
  bx  lr    
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000db4:	080070d8 	.word	0x080070d8
  ldr r2, =_sbss
 8000db8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000dbc:	2000073c 	.word	0x2000073c

08000dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <HAL_Init+0x40>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <HAL_Init+0x40>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_Init+0x40>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f931 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	200f      	movs	r0, #15
 8000df4:	f000 f808 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fe3a 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f93b 	bl	80010a2 <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e44:	f000 f911 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	@ (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	200005a4 	.word	0x200005a4

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200005a4 	.word	0x200005a4

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff ffee 	bl	8000e90 <HAL_GetTick>
 8000eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_Delay+0x44>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ffde 	bl	8000e90 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008

08000ef0 <__NVIC_SetPriorityGrouping>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_SetPriority>:
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff47 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff5c 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffb0 	bl	8001010 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e165      	b.n	80013a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8154 	bne.w	800139e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80ae 	beq.w	800139e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b5d      	ldr	r3, [pc, #372]	@ (80013bc <HAL_GPIO_Init+0x300>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	4a5c      	ldr	r2, [pc, #368]	@ (80013bc <HAL_GPIO_Init+0x300>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001250:	6453      	str	r3, [r2, #68]	@ 0x44
 8001252:	4b5a      	ldr	r3, [pc, #360]	@ (80013bc <HAL_GPIO_Init+0x300>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a58      	ldr	r2, [pc, #352]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4f      	ldr	r2, [pc, #316]	@ (80013c4 <HAL_GPIO_Init+0x308>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d025      	beq.n	80012d6 <HAL_GPIO_Init+0x21a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4e      	ldr	r2, [pc, #312]	@ (80013c8 <HAL_GPIO_Init+0x30c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01f      	beq.n	80012d2 <HAL_GPIO_Init+0x216>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4d      	ldr	r2, [pc, #308]	@ (80013cc <HAL_GPIO_Init+0x310>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x212>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4c      	ldr	r2, [pc, #304]	@ (80013d0 <HAL_GPIO_Init+0x314>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x20e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4b      	ldr	r2, [pc, #300]	@ (80013d4 <HAL_GPIO_Init+0x318>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x20a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4a      	ldr	r2, [pc, #296]	@ (80013d8 <HAL_GPIO_Init+0x31c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x206>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a49      	ldr	r2, [pc, #292]	@ (80013dc <HAL_GPIO_Init+0x320>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x202>
 80012ba:	2306      	movs	r3, #6
 80012bc:	e00c      	b.n	80012d8 <HAL_GPIO_Init+0x21c>
 80012be:	2307      	movs	r3, #7
 80012c0:	e00a      	b.n	80012d8 <HAL_GPIO_Init+0x21c>
 80012c2:	2305      	movs	r3, #5
 80012c4:	e008      	b.n	80012d8 <HAL_GPIO_Init+0x21c>
 80012c6:	2304      	movs	r3, #4
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x21c>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e004      	b.n	80012d8 <HAL_GPIO_Init+0x21c>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_Init+0x21c>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x21c>
 80012d6:	2300      	movs	r3, #0
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	f002 0203 	and.w	r2, r2, #3
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	4093      	lsls	r3, r2
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e8:	4935      	ldr	r1, [pc, #212]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	3302      	adds	r3, #2
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f6:	4b3a      	ldr	r3, [pc, #232]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131a:	4a31      	ldr	r2, [pc, #196]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001320:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001344:	4a26      	ldr	r2, [pc, #152]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134a:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001398:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	f67f ae96 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3724      	adds	r7, #36	@ 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40013800 	.word	0x40013800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40021400 	.word	0x40021400
 80013dc:	40021800 	.word	0x40021800
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001400:	e003      	b.n	800140a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	4a1f      	ldr	r2, [pc, #124]	@ (80014a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	@ 0x40
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800143e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HAL_PWREx_EnableOverDrive+0x94>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001444:	f7ff fd24 	bl	8000e90 <HAL_GetTick>
 8001448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800144a:	e009      	b.n	8001460 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800144c:	f7ff fd20 	bl	8000e90 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800145a:	d901      	bls.n	8001460 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e01f      	b.n	80014a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146c:	d1ee      	bne.n	800144c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001474:	f7ff fd0c 	bl	8000e90 <HAL_GetTick>
 8001478:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800147a:	e009      	b.n	8001490 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800147c:	f7ff fd08 	bl	8000e90 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800148a:	d901      	bls.n	8001490 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e007      	b.n	80014a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001498:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800149c:	d1ee      	bne.n	800147c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	420e0040 	.word	0x420e0040
 80014b0:	40007000 	.word	0x40007000
 80014b4:	420e0044 	.word	0x420e0044

080014b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0cc      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014cc:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d90c      	bls.n	80014f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b65      	ldr	r3, [pc, #404]	@ (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b63      	ldr	r3, [pc, #396]	@ (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0b8      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d020      	beq.n	8001542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800150c:	4b59      	ldr	r3, [pc, #356]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4a58      	ldr	r2, [pc, #352]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001516:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001524:	4b53      	ldr	r3, [pc, #332]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a52      	ldr	r2, [pc, #328]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800152e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001530:	4b50      	ldr	r3, [pc, #320]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	494d      	ldr	r1, [pc, #308]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	4313      	orrs	r3, r2
 8001540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d044      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b47      	ldr	r3, [pc, #284]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d119      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e07f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d003      	beq.n	8001576 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001572:	2b03      	cmp	r3, #3
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001576:	4b3f      	ldr	r3, [pc, #252]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e06f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001586:	4b3b      	ldr	r3, [pc, #236]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e067      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001596:	4b37      	ldr	r3, [pc, #220]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f023 0203 	bic.w	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4934      	ldr	r1, [pc, #208]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a8:	f7ff fc72 	bl	8000e90 <HAL_GetTick>
 80015ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b0:	f7ff fc6e 	bl	8000e90 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e04f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 020c 	and.w	r2, r3, #12
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d1eb      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015d8:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d20c      	bcs.n	8001600 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e032      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4916      	ldr	r1, [pc, #88]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	490e      	ldr	r1, [pc, #56]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	4313      	orrs	r3, r2
 800163c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800163e:	f000 f855 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 8001642:	4602      	mov	r2, r0
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	490a      	ldr	r1, [pc, #40]	@ (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	5ccb      	ldrb	r3, [r1, r3]
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	4a09      	ldr	r2, [pc, #36]	@ (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_RCC_ClockConfig+0x1c8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fbd2 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00
 8001674:	40023800 	.word	0x40023800
 8001678:	08006ffc 	.word	0x08006ffc
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001688:	4b03      	ldr	r3, [pc, #12]	@ (8001698 <HAL_RCC_GetHCLKFreq+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000000 	.word	0x20000000

0800169c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016a0:	f7ff fff0 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	0a9b      	lsrs	r3, r3, #10
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4903      	ldr	r1, [pc, #12]	@ (80016c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	0800700c 	.word	0x0800700c

080016c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c8:	f7ff ffdc 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	0b5b      	lsrs	r3, r3, #13
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4903      	ldr	r1, [pc, #12]	@ (80016e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	0800700c 	.word	0x0800700c

080016ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f0:	b0a6      	sub	sp, #152	@ 0x98
 80016f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001712:	4bc8      	ldr	r3, [pc, #800]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b0c      	cmp	r3, #12
 800171c:	f200 817e 	bhi.w	8001a1c <HAL_RCC_GetSysClockFreq+0x330>
 8001720:	a201      	add	r2, pc, #4	@ (adr r2, 8001728 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	0800175d 	.word	0x0800175d
 800172c:	08001a1d 	.word	0x08001a1d
 8001730:	08001a1d 	.word	0x08001a1d
 8001734:	08001a1d 	.word	0x08001a1d
 8001738:	08001765 	.word	0x08001765
 800173c:	08001a1d 	.word	0x08001a1d
 8001740:	08001a1d 	.word	0x08001a1d
 8001744:	08001a1d 	.word	0x08001a1d
 8001748:	0800176d 	.word	0x0800176d
 800174c:	08001a1d 	.word	0x08001a1d
 8001750:	08001a1d 	.word	0x08001a1d
 8001754:	08001a1d 	.word	0x08001a1d
 8001758:	080018d7 	.word	0x080018d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4bb6      	ldr	r3, [pc, #728]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x34c>)
 800175e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001762:	e15f      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001764:	4bb5      	ldr	r3, [pc, #724]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x350>)
 8001766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800176a:	e15b      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800176c:	4bb1      	ldr	r3, [pc, #708]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001774:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001778:	4bae      	ldr	r3, [pc, #696]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d031      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001784:	4bab      	ldr	r3, [pc, #684]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	2200      	movs	r2, #0
 800178c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800178e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001796:	663b      	str	r3, [r7, #96]	@ 0x60
 8001798:	2300      	movs	r3, #0
 800179a:	667b      	str	r3, [r7, #100]	@ 0x64
 800179c:	4ba7      	ldr	r3, [pc, #668]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x350>)
 800179e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017a2:	462a      	mov	r2, r5
 80017a4:	fb03 f202 	mul.w	r2, r3, r2
 80017a8:	2300      	movs	r3, #0
 80017aa:	4621      	mov	r1, r4
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	4aa2      	ldr	r2, [pc, #648]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x350>)
 80017b4:	4621      	mov	r1, r4
 80017b6:	fba1 1202 	umull	r1, r2, r1, r2
 80017ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80017bc:	460a      	mov	r2, r1
 80017be:	67ba      	str	r2, [r7, #120]	@ 0x78
 80017c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80017c2:	4413      	add	r3, r2
 80017c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017ca:	2200      	movs	r2, #0
 80017cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017d8:	f7fe fd72 	bl	80002c0 <__aeabi_uldivmod>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4613      	mov	r3, r2
 80017e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017e6:	e064      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e8:	4b92      	ldr	r3, [pc, #584]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	2200      	movs	r2, #0
 80017f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80017f2:	657a      	str	r2, [r7, #84]	@ 0x54
 80017f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017fc:	2300      	movs	r3, #0
 80017fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001800:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001804:	4622      	mov	r2, r4
 8001806:	462b      	mov	r3, r5
 8001808:	f04f 0000 	mov.w	r0, #0
 800180c:	f04f 0100 	mov.w	r1, #0
 8001810:	0159      	lsls	r1, r3, #5
 8001812:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001816:	0150      	lsls	r0, r2, #5
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4621      	mov	r1, r4
 800181e:	1a51      	subs	r1, r2, r1
 8001820:	6139      	str	r1, [r7, #16]
 8001822:	4629      	mov	r1, r5
 8001824:	eb63 0301 	sbc.w	r3, r3, r1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001836:	4659      	mov	r1, fp
 8001838:	018b      	lsls	r3, r1, #6
 800183a:	4651      	mov	r1, sl
 800183c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001840:	4651      	mov	r1, sl
 8001842:	018a      	lsls	r2, r1, #6
 8001844:	4651      	mov	r1, sl
 8001846:	ebb2 0801 	subs.w	r8, r2, r1
 800184a:	4659      	mov	r1, fp
 800184c:	eb63 0901 	sbc.w	r9, r3, r1
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800185c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001860:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001864:	4690      	mov	r8, r2
 8001866:	4699      	mov	r9, r3
 8001868:	4623      	mov	r3, r4
 800186a:	eb18 0303 	adds.w	r3, r8, r3
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	462b      	mov	r3, r5
 8001872:	eb49 0303 	adc.w	r3, r9, r3
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001884:	4629      	mov	r1, r5
 8001886:	028b      	lsls	r3, r1, #10
 8001888:	4621      	mov	r1, r4
 800188a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800188e:	4621      	mov	r1, r4
 8001890:	028a      	lsls	r2, r1, #10
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800189a:	2200      	movs	r2, #0
 800189c:	643b      	str	r3, [r7, #64]	@ 0x40
 800189e:	647a      	str	r2, [r7, #68]	@ 0x44
 80018a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018a4:	f7fe fd0c 	bl	80002c0 <__aeabi_uldivmod>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4613      	mov	r3, r2
 80018ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018b2:	4b60      	ldr	r3, [pc, #384]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	0c1b      	lsrs	r3, r3, #16
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	3301      	adds	r3, #1
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80018c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80018d4:	e0a6      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d6:	4b57      	ldr	r3, [pc, #348]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e2:	4b54      	ldr	r3, [pc, #336]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d02a      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	4b51      	ldr	r3, [pc, #324]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	2200      	movs	r2, #0
 80018f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001900:	2100      	movs	r1, #0
 8001902:	4b4e      	ldr	r3, [pc, #312]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x350>)
 8001904:	fb03 f201 	mul.w	r2, r3, r1
 8001908:	2300      	movs	r3, #0
 800190a:	fb00 f303 	mul.w	r3, r0, r3
 800190e:	4413      	add	r3, r2
 8001910:	4a4a      	ldr	r2, [pc, #296]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x350>)
 8001912:	fba0 1202 	umull	r1, r2, r0, r2
 8001916:	677a      	str	r2, [r7, #116]	@ 0x74
 8001918:	460a      	mov	r2, r1
 800191a:	673a      	str	r2, [r7, #112]	@ 0x70
 800191c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800191e:	4413      	add	r3, r2
 8001920:	677b      	str	r3, [r7, #116]	@ 0x74
 8001922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001926:	2200      	movs	r2, #0
 8001928:	633b      	str	r3, [r7, #48]	@ 0x30
 800192a:	637a      	str	r2, [r7, #52]	@ 0x34
 800192c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001930:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001934:	f7fe fcc4 	bl	80002c0 <__aeabi_uldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4613      	mov	r3, r2
 800193e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001942:	e05b      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001944:	4b3b      	ldr	r3, [pc, #236]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	2200      	movs	r2, #0
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800194e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
 800195c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001960:	4642      	mov	r2, r8
 8001962:	464b      	mov	r3, r9
 8001964:	f04f 0000 	mov.w	r0, #0
 8001968:	f04f 0100 	mov.w	r1, #0
 800196c:	0159      	lsls	r1, r3, #5
 800196e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001972:	0150      	lsls	r0, r2, #5
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4641      	mov	r1, r8
 800197a:	ebb2 0a01 	subs.w	sl, r2, r1
 800197e:	4649      	mov	r1, r9
 8001980:	eb63 0b01 	sbc.w	fp, r3, r1
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001990:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001994:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001998:	ebb2 040a 	subs.w	r4, r2, sl
 800199c:	eb63 050b 	sbc.w	r5, r3, fp
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	00eb      	lsls	r3, r5, #3
 80019aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ae:	00e2      	lsls	r2, r4, #3
 80019b0:	4614      	mov	r4, r2
 80019b2:	461d      	mov	r5, r3
 80019b4:	4643      	mov	r3, r8
 80019b6:	18e3      	adds	r3, r4, r3
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	464b      	mov	r3, r9
 80019bc:	eb45 0303 	adc.w	r3, r5, r3
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ce:	4629      	mov	r1, r5
 80019d0:	028b      	lsls	r3, r1, #10
 80019d2:	4621      	mov	r1, r4
 80019d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d8:	4621      	mov	r1, r4
 80019da:	028a      	lsls	r2, r1, #10
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019e4:	2200      	movs	r2, #0
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	61fa      	str	r2, [r7, #28]
 80019ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ee:	f7fe fc67 	bl	80002c0 <__aeabi_uldivmod>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4613      	mov	r3, r2
 80019f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x348>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	0f1b      	lsrs	r3, r3, #28
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a1a:	e003      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3798      	adds	r7, #152	@ 0x98
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	00f42400 	.word	0x00f42400
 8001a3c:	017d7840 	.word	0x017d7840

08001a40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e28d      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8083 	beq.w	8001b66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a60:	4b94      	ldr	r3, [pc, #592]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d019      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a6c:	4b91      	ldr	r3, [pc, #580]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a78:	4b8e      	ldr	r3, [pc, #568]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a84:	d00c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a86:	4b8b      	ldr	r3, [pc, #556]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d112      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a92:	4b88      	ldr	r3, [pc, #544]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	4b84      	ldr	r3, [pc, #528]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d05b      	beq.n	8001b64 <HAL_RCC_OscConfig+0x124>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d157      	bne.n	8001b64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e25a      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x90>
 8001ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7b      	ldr	r2, [pc, #492]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0xcc>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0xb4>
 8001ada:	4b76      	ldr	r3, [pc, #472]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a75      	ldr	r2, [pc, #468]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b73      	ldr	r3, [pc, #460]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a72      	ldr	r2, [pc, #456]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0xcc>
 8001af4:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6b      	ldr	r2, [pc, #428]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f9bc 	bl	8000e90 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f9b8 	bl	8000e90 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	@ 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e21f      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b61      	ldr	r3, [pc, #388]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0xdc>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f9a8 	bl	8000e90 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f9a4 	bl	8000e90 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	@ 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e20b      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	4b57      	ldr	r3, [pc, #348]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x104>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d06f      	beq.n	8001c52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b72:	4b50      	ldr	r3, [pc, #320]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d017      	beq.n	8001bae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d105      	bne.n	8001b96 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b47      	ldr	r3, [pc, #284]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d11c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba2:	4b44      	ldr	r3, [pc, #272]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d116      	bne.n	8001bdc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	4b41      	ldr	r3, [pc, #260]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x186>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e1d3      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4937      	ldr	r1, [pc, #220]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	e03a      	b.n	8001c52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be4:	4b34      	ldr	r3, [pc, #208]	@ (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f951 	bl	8000e90 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f94d 	bl	8000e90 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1b4      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4925      	ldr	r1, [pc, #148]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c26:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f930 	bl	8000e90 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff f92c 	bl	8000e90 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e193      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d036      	beq.n	8001ccc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d016      	beq.n	8001c94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_RCC_OscConfig+0x27c>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f910 	bl	8000e90 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff f90c 	bl	8000e90 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e173      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x234>
 8001c92:	e01b      	b.n	8001ccc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <HAL_RCC_OscConfig+0x27c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f8f9 	bl	8000e90 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca0:	e00e      	b.n	8001cc0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f8f5 	bl	8000e90 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d907      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e15c      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	42470000 	.word	0x42470000
 8001cbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b8a      	ldr	r3, [pc, #552]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1ea      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8097 	beq.w	8001e08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b83      	ldr	r3, [pc, #524]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10f      	bne.n	8001d0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b7f      	ldr	r3, [pc, #508]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b79      	ldr	r3, [pc, #484]	@ (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d118      	bne.n	8001d48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4b76      	ldr	r3, [pc, #472]	@ (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a75      	ldr	r2, [pc, #468]	@ (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7ff f8b5 	bl	8000e90 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2a:	f7ff f8b1 	bl	8000e90 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e118      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x31e>
 8001d50:	4b66      	ldr	r3, [pc, #408]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d54:	4a65      	ldr	r2, [pc, #404]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d5c:	e01c      	b.n	8001d98 <HAL_RCC_OscConfig+0x358>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b05      	cmp	r3, #5
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x340>
 8001d66:	4b61      	ldr	r3, [pc, #388]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	4a60      	ldr	r2, [pc, #384]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d72:	4b5e      	ldr	r3, [pc, #376]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d76:	4a5d      	ldr	r2, [pc, #372]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0x358>
 8001d80:	4b5a      	ldr	r3, [pc, #360]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d84:	4a59      	ldr	r2, [pc, #356]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d8c:	4b57      	ldr	r3, [pc, #348]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d90:	4a56      	ldr	r2, [pc, #344]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	f023 0304 	bic.w	r3, r3, #4
 8001d96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d015      	beq.n	8001dcc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7ff f876 	bl	8000e90 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	f7ff f872 	bl	8000e90 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e0d7      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0ee      	beq.n	8001da8 <HAL_RCC_OscConfig+0x368>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f860 	bl	8000e90 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f85c 	bl	8000e90 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0c1      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dea:	4b40      	ldr	r3, [pc, #256]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ee      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d105      	bne.n	8001e08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	4a3a      	ldr	r2, [pc, #232]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80ad 	beq.w	8001f6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e12:	4b36      	ldr	r3, [pc, #216]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d060      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d145      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b33      	ldr	r3, [pc, #204]	@ (8001ef4 <HAL_RCC_OscConfig+0x4b4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f830 	bl	8000e90 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff f82c 	bl	8000e90 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e093      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	4b29      	ldr	r3, [pc, #164]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	019b      	lsls	r3, r3, #6
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	041b      	lsls	r3, r3, #16
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7c:	071b      	lsls	r3, r3, #28
 8001e7e:	491b      	ldr	r1, [pc, #108]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_RCC_OscConfig+0x4b4>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f801 	bl	8000e90 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7fe fffd 	bl	8000e90 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e064      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x452>
 8001eb0:	e05c      	b.n	8001f6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <HAL_RCC_OscConfig+0x4b4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7fe ffea 	bl	8000e90 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe ffe6 	bl	8000e90 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e04d      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x480>
 8001ede:	e045      	b.n	8001f6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e040      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <HAL_RCC_OscConfig+0x538>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d030      	beq.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d129      	bne.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d122      	bne.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f28:	4013      	ands	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d119      	bne.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3e:	085b      	lsrs	r3, r3, #1
 8001f40:	3b01      	subs	r3, #1
 8001f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d10f      	bne.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e07b      	b.n	8002086 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d108      	bne.n	8001fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f9e:	d009      	beq.n	8001fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
 8001fa6:	e005      	b.n	8001fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fd76 	bl	8000ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002038:	ea42 0103 	orr.w	r1, r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	f003 0104 	and.w	r1, r3, #4
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	f003 0210 	and.w	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002074:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b088      	sub	sp, #32
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800209e:	f7fe fef7 	bl	8000e90 <HAL_GetTick>
 80020a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d001      	beq.n	80020b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
 80020b6:	e12a      	b.n	800230e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_SPI_Transmit+0x36>
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e122      	b.n	800230e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_SPI_Transmit+0x48>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e11b      	b.n	800230e <HAL_SPI_Transmit+0x280>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2203      	movs	r2, #3
 80020e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002124:	d10f      	bne.n	8002146 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002134:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002144:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002150:	2b40      	cmp	r3, #64	@ 0x40
 8002152:	d007      	beq.n	8002164 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800216c:	d152      	bne.n	8002214 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_SPI_Transmit+0xee>
 8002176:	8b7b      	ldrh	r3, [r7, #26]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d145      	bne.n	8002208 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	1c9a      	adds	r2, r3, #2
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021a0:	e032      	b.n	8002208 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d112      	bne.n	80021d6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	881a      	ldrh	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	1c9a      	adds	r2, r3, #2
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80021d4:	e018      	b.n	8002208 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021d6:	f7fe fe5b 	bl	8000e90 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d803      	bhi.n	80021ee <HAL_SPI_Transmit+0x160>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021ec:	d102      	bne.n	80021f4 <HAL_SPI_Transmit+0x166>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d109      	bne.n	8002208 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e082      	b.n	800230e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1c7      	bne.n	80021a2 <HAL_SPI_Transmit+0x114>
 8002212:	e053      	b.n	80022bc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_SPI_Transmit+0x194>
 800221c:	8b7b      	ldrh	r3, [r7, #26]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d147      	bne.n	80022b2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002248:	e033      	b.n	80022b2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d113      	bne.n	8002280 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	330c      	adds	r3, #12
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800227e:	e018      	b.n	80022b2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002280:	f7fe fe06 	bl	8000e90 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d803      	bhi.n	8002298 <HAL_SPI_Transmit+0x20a>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002296:	d102      	bne.n	800229e <HAL_SPI_Transmit+0x210>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e02d      	b.n	800230e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1c6      	bne.n	800224a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	6839      	ldr	r1, [r7, #0]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fa59 	bl	8002778 <SPI_EndRxTxTransaction>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800230c:	2300      	movs	r3, #0
  }
}
 800230e:	4618      	mov	r0, r3
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b08a      	sub	sp, #40	@ 0x28
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002324:	2301      	movs	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002328:	f7fe fdb2 	bl	8000e90 <HAL_GetTick>
 800232c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002334:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002340:	7ffb      	ldrb	r3, [r7, #31]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d00c      	beq.n	8002360 <HAL_SPI_TransmitReceive+0x4a>
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800234c:	d106      	bne.n	800235c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_SPI_TransmitReceive+0x46>
 8002356:	7ffb      	ldrb	r3, [r7, #31]
 8002358:	2b04      	cmp	r3, #4
 800235a:	d001      	beq.n	8002360 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
 800235e:	e17f      	b.n	8002660 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x5c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x5c>
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e174      	b.n	8002660 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_SPI_TransmitReceive+0x6e>
 8002380:	2302      	movs	r3, #2
 8002382:	e16d      	b.n	8002660 <HAL_SPI_TransmitReceive+0x34a>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b04      	cmp	r3, #4
 8002396:	d003      	beq.n	80023a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2205      	movs	r2, #5
 800239c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	887a      	ldrh	r2, [r7, #2]
 80023c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e0:	2b40      	cmp	r3, #64	@ 0x40
 80023e2:	d007      	beq.n	80023f4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023fc:	d17e      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_SPI_TransmitReceive+0xf6>
 8002406:	8afb      	ldrh	r3, [r7, #22]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d16c      	bne.n	80024e6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002410:	881a      	ldrh	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	1c9a      	adds	r2, r3, #2
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002430:	e059      	b.n	80024e6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d11b      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x162>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_SPI_TransmitReceive+0x162>
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	2b01      	cmp	r3, #1
 800244e:	d113      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	881a      	ldrh	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	1c9a      	adds	r2, r3, #2
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d119      	bne.n	80024ba <HAL_SPI_TransmitReceive+0x1a4>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d014      	beq.n	80024ba <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249a:	b292      	uxth	r2, r2
 800249c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a2:	1c9a      	adds	r2, r3, #2
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024b6:	2301      	movs	r3, #1
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024ba:	f7fe fce9 	bl	8000e90 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d80d      	bhi.n	80024e6 <HAL_SPI_TransmitReceive+0x1d0>
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024d0:	d009      	beq.n	80024e6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0bc      	b.n	8002660 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1a0      	bne.n	8002432 <HAL_SPI_TransmitReceive+0x11c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d19b      	bne.n	8002432 <HAL_SPI_TransmitReceive+0x11c>
 80024fa:	e082      	b.n	8002602 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_SPI_TransmitReceive+0x1f4>
 8002504:	8afb      	ldrh	r3, [r7, #22]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d171      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	330c      	adds	r3, #12
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002530:	e05d      	b.n	80025ee <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b02      	cmp	r3, #2
 800253e:	d11c      	bne.n	800257a <HAL_SPI_TransmitReceive+0x264>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d017      	beq.n	800257a <HAL_SPI_TransmitReceive+0x264>
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	2b01      	cmp	r3, #1
 800254e:	d114      	bne.n	800257a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d119      	bne.n	80025bc <HAL_SPI_TransmitReceive+0x2a6>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d014      	beq.n	80025bc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025b8:	2301      	movs	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025bc:	f7fe fc68 	bl	8000e90 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d803      	bhi.n	80025d4 <HAL_SPI_TransmitReceive+0x2be>
 80025cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025d2:	d102      	bne.n	80025da <HAL_SPI_TransmitReceive+0x2c4>
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e038      	b.n	8002660 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d19c      	bne.n	8002532 <HAL_SPI_TransmitReceive+0x21c>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d197      	bne.n	8002532 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002602:	6a3a      	ldr	r2, [r7, #32]
 8002604:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f8b6 	bl	8002778 <SPI_EndRxTxTransaction>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e01d      	b.n	8002660 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800265e:	2300      	movs	r3, #0
  }
}
 8002660:	4618      	mov	r0, r3
 8002662:	3728      	adds	r7, #40	@ 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002678:	f7fe fc0a 	bl	8000e90 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	4413      	add	r3, r2
 8002686:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002688:	f7fe fc02 	bl	8000e90 <HAL_GetTick>
 800268c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800268e:	4b39      	ldr	r3, [pc, #228]	@ (8002774 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	015b      	lsls	r3, r3, #5
 8002694:	0d1b      	lsrs	r3, r3, #20
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800269e:	e054      	b.n	800274a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026a6:	d050      	beq.n	800274a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026a8:	f7fe fbf2 	bl	8000e90 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d902      	bls.n	80026be <SPI_WaitFlagStateUntilTimeout+0x56>
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d13d      	bne.n	800273a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026d6:	d111      	bne.n	80026fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026e0:	d004      	beq.n	80026ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ea:	d107      	bne.n	80026fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002704:	d10f      	bne.n	8002726 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002724:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e017      	b.n	800276a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3b01      	subs	r3, #1
 8002748:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4013      	ands	r3, r2
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	429a      	cmp	r2, r3
 8002766:	d19b      	bne.n	80026a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000000 	.word	0x20000000

08002778 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2201      	movs	r2, #1
 800278c:	2102      	movs	r1, #2
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff ff6a 	bl	8002668 <SPI_WaitFlagStateUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e032      	b.n	8002810 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <SPI_EndRxTxTransaction+0xa0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1b      	ldr	r2, [pc, #108]	@ (800281c <SPI_EndRxTxTransaction+0xa4>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	0d5b      	lsrs	r3, r3, #21
 80027b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027c8:	d112      	bne.n	80027f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2200      	movs	r2, #0
 80027d2:	2180      	movs	r1, #128	@ 0x80
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff ff47 	bl	8002668 <SPI_WaitFlagStateUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d016      	beq.n	800280e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e00f      	b.n	8002810 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002806:	2b80      	cmp	r3, #128	@ 0x80
 8002808:	d0f2      	beq.n	80027f0 <SPI_EndRxTxTransaction+0x78>
 800280a:	e000      	b.n	800280e <SPI_EndRxTxTransaction+0x96>
        break;
 800280c:	bf00      	nop
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000000 	.word	0x20000000
 800281c:	165e9f81 	.word	0x165e9f81

08002820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e042      	b.n	80028b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe f982 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	@ 0x24
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f82b 	bl	80028c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c4:	b0c0      	sub	sp, #256	@ 0x100
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	68d9      	ldr	r1, [r3, #12]
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	ea40 0301 	orr.w	r3, r0, r1
 80028e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	431a      	orrs	r2, r3
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002918:	f021 010c 	bic.w	r1, r1, #12
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002926:	430b      	orrs	r3, r1
 8002928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800292a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293a:	6999      	ldr	r1, [r3, #24]
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	ea40 0301 	orr.w	r3, r0, r1
 8002946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b8f      	ldr	r3, [pc, #572]	@ (8002b8c <UART_SetConfig+0x2cc>)
 8002950:	429a      	cmp	r2, r3
 8002952:	d005      	beq.n	8002960 <UART_SetConfig+0xa0>
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4b8d      	ldr	r3, [pc, #564]	@ (8002b90 <UART_SetConfig+0x2d0>)
 800295c:	429a      	cmp	r2, r3
 800295e:	d104      	bne.n	800296a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002960:	f7fe feb0 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8002964:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002968:	e003      	b.n	8002972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800296a:	f7fe fe97 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 800296e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800297c:	f040 810c 	bne.w	8002b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800298a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800298e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002992:	4622      	mov	r2, r4
 8002994:	462b      	mov	r3, r5
 8002996:	1891      	adds	r1, r2, r2
 8002998:	65b9      	str	r1, [r7, #88]	@ 0x58
 800299a:	415b      	adcs	r3, r3
 800299c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800299e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029a2:	4621      	mov	r1, r4
 80029a4:	eb12 0801 	adds.w	r8, r2, r1
 80029a8:	4629      	mov	r1, r5
 80029aa:	eb43 0901 	adc.w	r9, r3, r1
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029c2:	4690      	mov	r8, r2
 80029c4:	4699      	mov	r9, r3
 80029c6:	4623      	mov	r3, r4
 80029c8:	eb18 0303 	adds.w	r3, r8, r3
 80029cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029d0:	462b      	mov	r3, r5
 80029d2:	eb49 0303 	adc.w	r3, r9, r3
 80029d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029ee:	460b      	mov	r3, r1
 80029f0:	18db      	adds	r3, r3, r3
 80029f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80029f4:	4613      	mov	r3, r2
 80029f6:	eb42 0303 	adc.w	r3, r2, r3
 80029fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80029fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a04:	f7fd fc5c 	bl	80002c0 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4b61      	ldr	r3, [pc, #388]	@ (8002b94 <UART_SetConfig+0x2d4>)
 8002a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	011c      	lsls	r4, r3, #4
 8002a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a28:	4642      	mov	r2, r8
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	1891      	adds	r1, r2, r2
 8002a2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a30:	415b      	adcs	r3, r3
 8002a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a38:	4641      	mov	r1, r8
 8002a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a3e:	4649      	mov	r1, r9
 8002a40:	eb43 0b01 	adc.w	fp, r3, r1
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a58:	4692      	mov	sl, r2
 8002a5a:	469b      	mov	fp, r3
 8002a5c:	4643      	mov	r3, r8
 8002a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a66:	464b      	mov	r3, r9
 8002a68:	eb4b 0303 	adc.w	r3, fp, r3
 8002a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a84:	460b      	mov	r3, r1
 8002a86:	18db      	adds	r3, r3, r3
 8002a88:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	eb42 0303 	adc.w	r3, r2, r3
 8002a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a9a:	f7fd fc11 	bl	80002c0 <__aeabi_uldivmod>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8002b94 <UART_SetConfig+0x2d4>)
 8002aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2264      	movs	r2, #100	@ 0x64
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	1acb      	subs	r3, r1, r3
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002aba:	4b36      	ldr	r3, [pc, #216]	@ (8002b94 <UART_SetConfig+0x2d4>)
 8002abc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ac8:	441c      	add	r4, r3
 8002aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	1891      	adds	r1, r2, r2
 8002ae2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ae4:	415b      	adcs	r3, r3
 8002ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002aec:	4641      	mov	r1, r8
 8002aee:	1851      	adds	r1, r2, r1
 8002af0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002af2:	4649      	mov	r1, r9
 8002af4:	414b      	adcs	r3, r1
 8002af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b04:	4659      	mov	r1, fp
 8002b06:	00cb      	lsls	r3, r1, #3
 8002b08:	4651      	mov	r1, sl
 8002b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0e:	4651      	mov	r1, sl
 8002b10:	00ca      	lsls	r2, r1, #3
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	4642      	mov	r2, r8
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b20:	464b      	mov	r3, r9
 8002b22:	460a      	mov	r2, r1
 8002b24:	eb42 0303 	adc.w	r3, r2, r3
 8002b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b40:	460b      	mov	r3, r1
 8002b42:	18db      	adds	r3, r3, r3
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b46:	4613      	mov	r3, r2
 8002b48:	eb42 0303 	adc.w	r3, r2, r3
 8002b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b56:	f7fd fbb3 	bl	80002c0 <__aeabi_uldivmod>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <UART_SetConfig+0x2d4>)
 8002b60:	fba3 1302 	umull	r1, r3, r3, r2
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	2164      	movs	r1, #100	@ 0x64
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	3332      	adds	r3, #50	@ 0x32
 8002b72:	4a08      	ldr	r2, [pc, #32]	@ (8002b94 <UART_SetConfig+0x2d4>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	f003 0207 	and.w	r2, r3, #7
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4422      	add	r2, r4
 8002b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b88:	e106      	b.n	8002d98 <UART_SetConfig+0x4d8>
 8002b8a:	bf00      	nop
 8002b8c:	40011000 	.word	0x40011000
 8002b90:	40011400 	.word	0x40011400
 8002b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002baa:	4642      	mov	r2, r8
 8002bac:	464b      	mov	r3, r9
 8002bae:	1891      	adds	r1, r2, r2
 8002bb0:	6239      	str	r1, [r7, #32]
 8002bb2:	415b      	adcs	r3, r3
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bba:	4641      	mov	r1, r8
 8002bbc:	1854      	adds	r4, r2, r1
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	eb43 0501 	adc.w	r5, r3, r1
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	00eb      	lsls	r3, r5, #3
 8002bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bd2:	00e2      	lsls	r2, r4, #3
 8002bd4:	4614      	mov	r4, r2
 8002bd6:	461d      	mov	r5, r3
 8002bd8:	4643      	mov	r3, r8
 8002bda:	18e3      	adds	r3, r4, r3
 8002bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002be0:	464b      	mov	r3, r9
 8002be2:	eb45 0303 	adc.w	r3, r5, r3
 8002be6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c06:	4629      	mov	r1, r5
 8002c08:	008b      	lsls	r3, r1, #2
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c10:	4621      	mov	r1, r4
 8002c12:	008a      	lsls	r2, r1, #2
 8002c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c18:	f7fd fb52 	bl	80002c0 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4b60      	ldr	r3, [pc, #384]	@ (8002da4 <UART_SetConfig+0x4e4>)
 8002c22:	fba3 2302 	umull	r2, r3, r3, r2
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	011c      	lsls	r4, r3, #4
 8002c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	1891      	adds	r1, r2, r2
 8002c42:	61b9      	str	r1, [r7, #24]
 8002c44:	415b      	adcs	r3, r3
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	1851      	adds	r1, r2, r1
 8002c50:	6139      	str	r1, [r7, #16]
 8002c52:	4649      	mov	r1, r9
 8002c54:	414b      	adcs	r3, r1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c64:	4659      	mov	r1, fp
 8002c66:	00cb      	lsls	r3, r1, #3
 8002c68:	4651      	mov	r1, sl
 8002c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c6e:	4651      	mov	r1, sl
 8002c70:	00ca      	lsls	r2, r1, #3
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	4642      	mov	r2, r8
 8002c7a:	189b      	adds	r3, r3, r2
 8002c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c80:	464b      	mov	r3, r9
 8002c82:	460a      	mov	r2, r1
 8002c84:	eb42 0303 	adc.w	r3, r2, r3
 8002c88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ca4:	4649      	mov	r1, r9
 8002ca6:	008b      	lsls	r3, r1, #2
 8002ca8:	4641      	mov	r1, r8
 8002caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cae:	4641      	mov	r1, r8
 8002cb0:	008a      	lsls	r2, r1, #2
 8002cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cb6:	f7fd fb03 	bl	80002c0 <__aeabi_uldivmod>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4b38      	ldr	r3, [pc, #224]	@ (8002da4 <UART_SetConfig+0x4e4>)
 8002cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2264      	movs	r2, #100	@ 0x64
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	1acb      	subs	r3, r1, r3
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	3332      	adds	r3, #50	@ 0x32
 8002cd4:	4a33      	ldr	r2, [pc, #204]	@ (8002da4 <UART_SetConfig+0x4e4>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce0:	441c      	add	r4, r3
 8002ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cea:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	1891      	adds	r1, r2, r2
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d00:	4641      	mov	r1, r8
 8002d02:	1851      	adds	r1, r2, r1
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	4649      	mov	r1, r9
 8002d08:	414b      	adcs	r3, r1
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d18:	4659      	mov	r1, fp
 8002d1a:	00cb      	lsls	r3, r1, #3
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d22:	4651      	mov	r1, sl
 8002d24:	00ca      	lsls	r2, r1, #3
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d32:	464b      	mov	r3, r9
 8002d34:	460a      	mov	r2, r1
 8002d36:	eb42 0303 	adc.w	r3, r2, r3
 8002d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d46:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d54:	4649      	mov	r1, r9
 8002d56:	008b      	lsls	r3, r1, #2
 8002d58:	4641      	mov	r1, r8
 8002d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d5e:	4641      	mov	r1, r8
 8002d60:	008a      	lsls	r2, r1, #2
 8002d62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d66:	f7fd faab 	bl	80002c0 <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <UART_SetConfig+0x4e4>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	@ 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	3332      	adds	r3, #50	@ 0x32
 8002d82:	4a08      	ldr	r2, [pc, #32]	@ (8002da4 <UART_SetConfig+0x4e4>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4422      	add	r2, r4
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da4:	51eb851f 	.word	0x51eb851f

08002da8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002dac:	4904      	ldr	r1, [pc, #16]	@ (8002dc0 <MX_FATFS_Init+0x18>)
 8002dae:	4805      	ldr	r0, [pc, #20]	@ (8002dc4 <MX_FATFS_Init+0x1c>)
 8002db0:	f003 f866 	bl	8005e80 <FATFS_LinkDriver>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <MX_FATFS_Init+0x20>)
 8002dba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	200005ac 	.word	0x200005ac
 8002dc4:	2000000c 	.word	0x2000000c
 8002dc8:	200005a8 	.word	0x200005a8

08002dcc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002dd0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f9d3 	bl	8003194 <USER_SPI_initialize>
 8002dee:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fab1 	bl	800336c <USER_SPI_status>
 8002e0a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	4603      	mov	r3, r0
 8002e22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8002e24:	7bf8      	ldrb	r0, [r7, #15]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	f000 fab4 	bl	8003398 <USER_SPI_read>
 8002e30:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	4603      	mov	r3, r0
 8002e48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8002e4a:	7bf8      	ldrb	r0, [r7, #15]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	f000 fb07 	bl	8003464 <USER_SPI_write>
 8002e56:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	603a      	str	r2, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8002e70:	79b9      	ldrb	r1, [r7, #6]
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fb70 	bl	800355c <USER_SPI_ioctl>
 8002e7c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002e90:	f7fd fffe 	bl	8000e90 <HAL_GetTick>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <SPI_Timer_On+0x20>)
 8002e98:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002e9a:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <SPI_Timer_On+0x24>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200005b4 	.word	0x200005b4
 8002eac:	200005b8 	.word	0x200005b8

08002eb0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002eb4:	f7fd ffec 	bl	8000e90 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <SPI_Timer_Status+0x24>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	1ad2      	subs	r2, r2, r3
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <SPI_Timer_Status+0x28>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	bf34      	ite	cc
 8002ec8:	2301      	movcc	r3, #1
 8002eca:	2300      	movcs	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200005b4 	.word	0x200005b4
 8002ed8:	200005b8 	.word	0x200005b8

08002edc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002ee6:	f107 020f 	add.w	r2, r7, #15
 8002eea:	1df9      	adds	r1, r7, #7
 8002eec:	2332      	movs	r3, #50	@ 0x32
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4804      	ldr	r0, [pc, #16]	@ (8002f04 <xchg_spi+0x28>)
 8002ef4:	f7ff fa0f 	bl	8002316 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	2000009c 	.word	0x2000009c

08002f08 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e00a      	b.n	8002f2e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	18d4      	adds	r4, r2, r3
 8002f1e:	20ff      	movs	r0, #255	@ 0xff
 8002f20:	f7ff ffdc 	bl	8002edc <xchg_spi>
 8002f24:	4603      	mov	r3, r0
 8002f26:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d3f0      	bcc.n	8002f18 <rcvr_spi_multi+0x10>
	}
}
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}

08002f40 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4803      	ldr	r0, [pc, #12]	@ (8002f64 <xmit_spi_multi+0x24>)
 8002f56:	f7ff f89a 	bl	800208e <HAL_SPI_Transmit>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	2000009c 	.word	0x2000009c

08002f68 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002f70:	f7fd ff8e 	bl	8000e90 <HAL_GetTick>
 8002f74:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002f7a:	20ff      	movs	r0, #255	@ 0xff
 8002f7c:	f7ff ffae 	bl	8002edc <xchg_spi>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2bff      	cmp	r3, #255	@ 0xff
 8002f88:	d007      	beq.n	8002f9a <wait_ready+0x32>
 8002f8a:	f7fd ff81 	bl	8000e90 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d8ef      	bhi.n	8002f7a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2bff      	cmp	r3, #255	@ 0xff
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2140      	movs	r1, #64	@ 0x40
 8002fb8:	4803      	ldr	r0, [pc, #12]	@ (8002fc8 <despiselect+0x18>)
 8002fba:	f7fe fa13 	bl	80013e4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002fbe:	20ff      	movs	r0, #255	@ 0xff
 8002fc0:	f7ff ff8c 	bl	8002edc <xchg_spi>

}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40020400 	.word	0x40020400

08002fcc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2140      	movs	r1, #64	@ 0x40
 8002fd4:	4809      	ldr	r0, [pc, #36]	@ (8002ffc <spiselect+0x30>)
 8002fd6:	f7fe fa05 	bl	80013e4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002fda:	20ff      	movs	r0, #255	@ 0xff
 8002fdc:	f7ff ff7e 	bl	8002edc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002fe0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002fe4:	f7ff ffc0 	bl	8002f68 <wait_ready>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <spiselect+0x26>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e002      	b.n	8002ff8 <spiselect+0x2c>

	despiselect();
 8002ff2:	f7ff ffdd 	bl	8002fb0 <despiselect>
	return 0;	/* Timeout */
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40020400 	.word	0x40020400

08003000 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800300a:	20c8      	movs	r0, #200	@ 0xc8
 800300c:	f7ff ff3c 	bl	8002e88 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003010:	20ff      	movs	r0, #255	@ 0xff
 8003012:	f7ff ff63 	bl	8002edc <xchg_spi>
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2bff      	cmp	r3, #255	@ 0xff
 800301e:	d104      	bne.n	800302a <rcvr_datablock+0x2a>
 8003020:	f7ff ff46 	bl	8002eb0 <SPI_Timer_Status>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f2      	bne.n	8003010 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2bfe      	cmp	r3, #254	@ 0xfe
 800302e:	d001      	beq.n	8003034 <rcvr_datablock+0x34>
 8003030:	2300      	movs	r3, #0
 8003032:	e00a      	b.n	800304a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003034:	6839      	ldr	r1, [r7, #0]
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ff66 	bl	8002f08 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800303c:	20ff      	movs	r0, #255	@ 0xff
 800303e:	f7ff ff4d 	bl	8002edc <xchg_spi>
 8003042:	20ff      	movs	r0, #255	@ 0xff
 8003044:	f7ff ff4a 	bl	8002edc <xchg_spi>

	return 1;						/* Function succeeded */
 8003048:	2301      	movs	r3, #1
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800305e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003062:	f7ff ff81 	bl	8002f68 <wait_ready>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <xmit_datablock+0x1e>
 800306c:	2300      	movs	r3, #0
 800306e:	e01e      	b.n	80030ae <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff ff32 	bl	8002edc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	2bfd      	cmp	r3, #253	@ 0xfd
 800307c:	d016      	beq.n	80030ac <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800307e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff5c 	bl	8002f40 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003088:	20ff      	movs	r0, #255	@ 0xff
 800308a:	f7ff ff27 	bl	8002edc <xchg_spi>
 800308e:	20ff      	movs	r0, #255	@ 0xff
 8003090:	f7ff ff24 	bl	8002edc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003094:	20ff      	movs	r0, #255	@ 0xff
 8003096:	f7ff ff21 	bl	8002edc <xchg_spi>
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d001      	beq.n	80030ac <xmit_datablock+0x5a>
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <xmit_datablock+0x5c>
	}
	return 1;
 80030ac:	2301      	movs	r3, #1
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	6039      	str	r1, [r7, #0]
 80030c0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	da0e      	bge.n	80030e8 <send_cmd+0x32>
		cmd &= 0x7F;
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030d0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80030d2:	2100      	movs	r1, #0
 80030d4:	2037      	movs	r0, #55	@ 0x37
 80030d6:	f7ff ffee 	bl	80030b6 <send_cmd>
 80030da:	4603      	mov	r3, r0
 80030dc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80030de:	7bbb      	ldrb	r3, [r7, #14]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d901      	bls.n	80030e8 <send_cmd+0x32>
 80030e4:	7bbb      	ldrb	r3, [r7, #14]
 80030e6:	e051      	b.n	800318c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d008      	beq.n	8003100 <send_cmd+0x4a>
		despiselect();
 80030ee:	f7ff ff5f 	bl	8002fb0 <despiselect>
		if (!spiselect()) return 0xFF;
 80030f2:	f7ff ff6b 	bl	8002fcc <spiselect>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <send_cmd+0x4a>
 80030fc:	23ff      	movs	r3, #255	@ 0xff
 80030fe:	e045      	b.n	800318c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003106:	b2db      	uxtb	r3, r3
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fee7 	bl	8002edc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	0e1b      	lsrs	r3, r3, #24
 8003112:	b2db      	uxtb	r3, r3
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fee1 	bl	8002edc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	b2db      	uxtb	r3, r3
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fedb 	bl	8002edc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fed5 	bl	8002edc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fed0 	bl	8002edc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <send_cmd+0x94>
 8003146:	2395      	movs	r3, #149	@ 0x95
 8003148:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d101      	bne.n	8003154 <send_cmd+0x9e>
 8003150:	2387      	movs	r3, #135	@ 0x87
 8003152:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fec0 	bl	8002edc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d102      	bne.n	8003168 <send_cmd+0xb2>
 8003162:	20ff      	movs	r0, #255	@ 0xff
 8003164:	f7ff feba 	bl	8002edc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003168:	230a      	movs	r3, #10
 800316a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800316c:	20ff      	movs	r0, #255	@ 0xff
 800316e:	f7ff feb5 	bl	8002edc <xchg_spi>
 8003172:	4603      	mov	r3, r0
 8003174:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003176:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800317a:	2b00      	cmp	r3, #0
 800317c:	da05      	bge.n	800318a <send_cmd+0xd4>
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	3b01      	subs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <send_cmd+0xb6>

	return res;							/* Return received response */
 800318a:	7bbb      	ldrb	r3, [r7, #14]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <USER_SPI_initialize+0x14>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0d6      	b.n	8003356 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80031a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003360 <USER_SPI_initialize+0x1cc>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <USER_SPI_initialize+0x2a>
 80031b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003360 <USER_SPI_initialize+0x1cc>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e0cb      	b.n	8003356 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80031be:	4b69      	ldr	r3, [pc, #420]	@ (8003364 <USER_SPI_initialize+0x1d0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80031c8:	4b66      	ldr	r3, [pc, #408]	@ (8003364 <USER_SPI_initialize+0x1d0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80031d0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80031d2:	230a      	movs	r3, #10
 80031d4:	73fb      	strb	r3, [r7, #15]
 80031d6:	e005      	b.n	80031e4 <USER_SPI_initialize+0x50>
 80031d8:	20ff      	movs	r0, #255	@ 0xff
 80031da:	f7ff fe7f 	bl	8002edc <xchg_spi>
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f6      	bne.n	80031d8 <USER_SPI_initialize+0x44>

	ty = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80031ee:	2100      	movs	r1, #0
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7ff ff60 	bl	80030b6 <send_cmd>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	f040 808b 	bne.w	8003314 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80031fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003202:	f7ff fe41 	bl	8002e88 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003206:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800320a:	2008      	movs	r0, #8
 800320c:	f7ff ff53 	bl	80030b6 <send_cmd>
 8003210:	4603      	mov	r3, r0
 8003212:	2b01      	cmp	r3, #1
 8003214:	d151      	bne.n	80032ba <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	e00d      	b.n	8003238 <USER_SPI_initialize+0xa4>
 800321c:	7bfc      	ldrb	r4, [r7, #15]
 800321e:	20ff      	movs	r0, #255	@ 0xff
 8003220:	f7ff fe5c 	bl	8002edc <xchg_spi>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	f104 0310 	add.w	r3, r4, #16
 800322c:	443b      	add	r3, r7
 800322e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	3301      	adds	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b03      	cmp	r3, #3
 800323c:	d9ee      	bls.n	800321c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800323e:	7abb      	ldrb	r3, [r7, #10]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d167      	bne.n	8003314 <USER_SPI_initialize+0x180>
 8003244:	7afb      	ldrb	r3, [r7, #11]
 8003246:	2baa      	cmp	r3, #170	@ 0xaa
 8003248:	d164      	bne.n	8003314 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800324a:	bf00      	nop
 800324c:	f7ff fe30 	bl	8002eb0 <SPI_Timer_Status>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <USER_SPI_initialize+0xd2>
 8003256:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800325a:	20a9      	movs	r0, #169	@ 0xa9
 800325c:	f7ff ff2b 	bl	80030b6 <send_cmd>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f2      	bne.n	800324c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003266:	f7ff fe23 	bl	8002eb0 <SPI_Timer_Status>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d051      	beq.n	8003314 <USER_SPI_initialize+0x180>
 8003270:	2100      	movs	r1, #0
 8003272:	203a      	movs	r0, #58	@ 0x3a
 8003274:	f7ff ff1f 	bl	80030b6 <send_cmd>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d14a      	bne.n	8003314 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
 8003282:	e00d      	b.n	80032a0 <USER_SPI_initialize+0x10c>
 8003284:	7bfc      	ldrb	r4, [r7, #15]
 8003286:	20ff      	movs	r0, #255	@ 0xff
 8003288:	f7ff fe28 	bl	8002edc <xchg_spi>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	f104 0310 	add.w	r3, r4, #16
 8003294:	443b      	add	r3, r7
 8003296:	f803 2c08 	strb.w	r2, [r3, #-8]
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	3301      	adds	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d9ee      	bls.n	8003284 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80032a6:	7a3b      	ldrb	r3, [r7, #8]
 80032a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <USER_SPI_initialize+0x120>
 80032b0:	230c      	movs	r3, #12
 80032b2:	e000      	b.n	80032b6 <USER_SPI_initialize+0x122>
 80032b4:	2304      	movs	r3, #4
 80032b6:	737b      	strb	r3, [r7, #13]
 80032b8:	e02c      	b.n	8003314 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80032ba:	2100      	movs	r1, #0
 80032bc:	20a9      	movs	r0, #169	@ 0xa9
 80032be:	f7ff fefa 	bl	80030b6 <send_cmd>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d804      	bhi.n	80032d2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80032c8:	2302      	movs	r3, #2
 80032ca:	737b      	strb	r3, [r7, #13]
 80032cc:	23a9      	movs	r3, #169	@ 0xa9
 80032ce:	73bb      	strb	r3, [r7, #14]
 80032d0:	e003      	b.n	80032da <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80032d2:	2301      	movs	r3, #1
 80032d4:	737b      	strb	r3, [r7, #13]
 80032d6:	2301      	movs	r3, #1
 80032d8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80032da:	bf00      	nop
 80032dc:	f7ff fde8 	bl	8002eb0 <SPI_Timer_Status>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d007      	beq.n	80032f6 <USER_SPI_initialize+0x162>
 80032e6:	7bbb      	ldrb	r3, [r7, #14]
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fee3 	bl	80030b6 <send_cmd>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f2      	bne.n	80032dc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80032f6:	f7ff fddb 	bl	8002eb0 <SPI_Timer_Status>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <USER_SPI_initialize+0x17c>
 8003300:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003304:	2010      	movs	r0, #16
 8003306:	f7ff fed6 	bl	80030b6 <send_cmd>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <USER_SPI_initialize+0x180>
				ty = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003314:	4a14      	ldr	r2, [pc, #80]	@ (8003368 <USER_SPI_initialize+0x1d4>)
 8003316:	7b7b      	ldrb	r3, [r7, #13]
 8003318:	7013      	strb	r3, [r2, #0]
	despiselect();
 800331a:	f7ff fe49 	bl	8002fb0 <despiselect>

	if (ty) {			/* OK */
 800331e:	7b7b      	ldrb	r3, [r7, #13]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d012      	beq.n	800334a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003324:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <USER_SPI_initialize+0x1d0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <USER_SPI_initialize+0x1d0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0210 	orr.w	r2, r2, #16
 8003336:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003338:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <USER_SPI_initialize+0x1cc>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	b2da      	uxtb	r2, r3
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <USER_SPI_initialize+0x1cc>)
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e002      	b.n	8003350 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800334a:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <USER_SPI_initialize+0x1cc>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003350:	4b03      	ldr	r3, [pc, #12]	@ (8003360 <USER_SPI_initialize+0x1cc>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	b2db      	uxtb	r3, r3
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bd90      	pop	{r4, r7, pc}
 800335e:	bf00      	nop
 8003360:	20000020 	.word	0x20000020
 8003364:	2000009c 	.word	0x2000009c
 8003368:	200005b0 	.word	0x200005b0

0800336c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <USER_SPI_status+0x14>
 800337c:	2301      	movs	r3, #1
 800337e:	e002      	b.n	8003386 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003380:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <USER_SPI_status+0x28>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000020 	.word	0x20000020

08003398 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4603      	mov	r3, r0
 80033a6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <USER_SPI_read+0x1c>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <USER_SPI_read+0x20>
 80033b4:	2304      	movs	r3, #4
 80033b6:	e04d      	b.n	8003454 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80033b8:	4b28      	ldr	r3, [pc, #160]	@ (800345c <USER_SPI_read+0xc4>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <USER_SPI_read+0x32>
 80033c6:	2303      	movs	r3, #3
 80033c8:	e044      	b.n	8003454 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80033ca:	4b25      	ldr	r3, [pc, #148]	@ (8003460 <USER_SPI_read+0xc8>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <USER_SPI_read+0x44>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	025b      	lsls	r3, r3, #9
 80033da:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d111      	bne.n	8003406 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	2011      	movs	r0, #17
 80033e6:	f7ff fe66 	bl	80030b6 <send_cmd>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d129      	bne.n	8003444 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80033f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033f4:	68b8      	ldr	r0, [r7, #8]
 80033f6:	f7ff fe03 	bl	8003000 <rcvr_datablock>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d021      	beq.n	8003444 <USER_SPI_read+0xac>
			count = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	e01e      	b.n	8003444 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	2012      	movs	r0, #18
 800340a:	f7ff fe54 	bl	80030b6 <send_cmd>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d117      	bne.n	8003444 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003414:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003418:	68b8      	ldr	r0, [r7, #8]
 800341a:	f7ff fdf1 	bl	8003000 <rcvr_datablock>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <USER_SPI_read+0xa2>
				buff += 512;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800342a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ed      	bne.n	8003414 <USER_SPI_read+0x7c>
 8003438:	e000      	b.n	800343c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800343a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800343c:	2100      	movs	r1, #0
 800343e:	200c      	movs	r0, #12
 8003440:	f7ff fe39 	bl	80030b6 <send_cmd>
		}
	}
	despiselect();
 8003444:	f7ff fdb4 	bl	8002fb0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	2300      	moveq	r3, #0
 8003452:	b2db      	uxtb	r3, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000020 	.word	0x20000020
 8003460:	200005b0 	.word	0x200005b0

08003464 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4603      	mov	r3, r0
 8003472:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <USER_SPI_write+0x1c>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <USER_SPI_write+0x20>
 8003480:	2304      	movs	r3, #4
 8003482:	e063      	b.n	800354c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003484:	4b33      	ldr	r3, [pc, #204]	@ (8003554 <USER_SPI_write+0xf0>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <USER_SPI_write+0x32>
 8003492:	2303      	movs	r3, #3
 8003494:	e05a      	b.n	800354c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003496:	4b2f      	ldr	r3, [pc, #188]	@ (8003554 <USER_SPI_write+0xf0>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <USER_SPI_write+0x44>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e051      	b.n	800354c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80034a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003558 <USER_SPI_write+0xf4>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <USER_SPI_write+0x56>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	025b      	lsls	r3, r3, #9
 80034b8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d110      	bne.n	80034e2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	2018      	movs	r0, #24
 80034c4:	f7ff fdf7 	bl	80030b6 <send_cmd>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d136      	bne.n	800353c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80034ce:	21fe      	movs	r1, #254	@ 0xfe
 80034d0:	68b8      	ldr	r0, [r7, #8]
 80034d2:	f7ff fdbe 	bl	8003052 <xmit_datablock>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d02f      	beq.n	800353c <USER_SPI_write+0xd8>
			count = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	e02c      	b.n	800353c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80034e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <USER_SPI_write+0xf4>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	f003 0306 	and.w	r3, r3, #6
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <USER_SPI_write+0x92>
 80034ee:	6839      	ldr	r1, [r7, #0]
 80034f0:	2097      	movs	r0, #151	@ 0x97
 80034f2:	f7ff fde0 	bl	80030b6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	2019      	movs	r0, #25
 80034fa:	f7ff fddc 	bl	80030b6 <send_cmd>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d11b      	bne.n	800353c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003504:	21fc      	movs	r1, #252	@ 0xfc
 8003506:	68b8      	ldr	r0, [r7, #8]
 8003508:	f7ff fda3 	bl	8003052 <xmit_datablock>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <USER_SPI_write+0xc4>
				buff += 512;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003518:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	3b01      	subs	r3, #1
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1ee      	bne.n	8003504 <USER_SPI_write+0xa0>
 8003526:	e000      	b.n	800352a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003528:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800352a:	21fd      	movs	r1, #253	@ 0xfd
 800352c:	2000      	movs	r0, #0
 800352e:	f7ff fd90 	bl	8003052 <xmit_datablock>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <USER_SPI_write+0xd8>
 8003538:	2301      	movs	r3, #1
 800353a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800353c:	f7ff fd38 	bl	8002fb0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000020 	.word	0x20000020
 8003558:	200005b0 	.word	0x200005b0

0800355c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	@ 0x30
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	603a      	str	r2, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
 8003568:	460b      	mov	r3, r1
 800356a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <USER_SPI_ioctl+0x1a>
 8003572:	2304      	movs	r3, #4
 8003574:	e15a      	b.n	800382c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003576:	4baf      	ldr	r3, [pc, #700]	@ (8003834 <USER_SPI_ioctl+0x2d8>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <USER_SPI_ioctl+0x2c>
 8003584:	2303      	movs	r3, #3
 8003586:	e151      	b.n	800382c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800358e:	79bb      	ldrb	r3, [r7, #6]
 8003590:	2b04      	cmp	r3, #4
 8003592:	f200 8136 	bhi.w	8003802 <USER_SPI_ioctl+0x2a6>
 8003596:	a201      	add	r2, pc, #4	@ (adr r2, 800359c <USER_SPI_ioctl+0x40>)
 8003598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359c:	080035b1 	.word	0x080035b1
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	08003803 	.word	0x08003803
 80035a8:	08003671 	.word	0x08003671
 80035ac:	08003767 	.word	0x08003767
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80035b0:	f7ff fd0c 	bl	8002fcc <spiselect>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8127 	beq.w	800380a <USER_SPI_ioctl+0x2ae>
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80035c2:	e122      	b.n	800380a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80035c4:	2100      	movs	r1, #0
 80035c6:	2009      	movs	r0, #9
 80035c8:	f7ff fd75 	bl	80030b6 <send_cmd>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 811d 	bne.w	800380e <USER_SPI_ioctl+0x2b2>
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	2110      	movs	r1, #16
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fd10 	bl	8003000 <rcvr_datablock>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8113 	beq.w	800380e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80035e8:	7b3b      	ldrb	r3, [r7, #12]
 80035ea:	099b      	lsrs	r3, r3, #6
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d111      	bne.n	8003616 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80035f2:	7d7b      	ldrb	r3, [r7, #21]
 80035f4:	461a      	mov	r2, r3
 80035f6:	7d3b      	ldrb	r3, [r7, #20]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	4413      	add	r3, r2
 80035fc:	461a      	mov	r2, r3
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8003606:	4413      	add	r3, r2
 8003608:	3301      	adds	r3, #1
 800360a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	029a      	lsls	r2, r3, #10
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e028      	b.n	8003668 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003616:	7c7b      	ldrb	r3, [r7, #17]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	b2da      	uxtb	r2, r3
 800361e:	7dbb      	ldrb	r3, [r7, #22]
 8003620:	09db      	lsrs	r3, r3, #7
 8003622:	b2db      	uxtb	r3, r3
 8003624:	4413      	add	r3, r2
 8003626:	b2da      	uxtb	r2, r3
 8003628:	7d7b      	ldrb	r3, [r7, #21]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	b2db      	uxtb	r3, r3
 8003634:	4413      	add	r3, r2
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3302      	adds	r3, #2
 800363a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800363e:	7d3b      	ldrb	r3, [r7, #20]
 8003640:	099b      	lsrs	r3, r3, #6
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	441a      	add	r2, r3
 800364c:	7cbb      	ldrb	r3, [r7, #18]
 800364e:	029b      	lsls	r3, r3, #10
 8003650:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003654:	4413      	add	r3, r2
 8003656:	3301      	adds	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800365a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800365e:	3b09      	subs	r3, #9
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	409a      	lsls	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800366e:	e0ce      	b.n	800380e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003670:	4b71      	ldr	r3, [pc, #452]	@ (8003838 <USER_SPI_ioctl+0x2dc>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d031      	beq.n	80036e0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800367c:	2100      	movs	r1, #0
 800367e:	208d      	movs	r0, #141	@ 0x8d
 8003680:	f7ff fd19 	bl	80030b6 <send_cmd>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 80c3 	bne.w	8003812 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800368c:	20ff      	movs	r0, #255	@ 0xff
 800368e:	f7ff fc25 	bl	8002edc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003692:	f107 030c 	add.w	r3, r7, #12
 8003696:	2110      	movs	r1, #16
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fcb1 	bl	8003000 <rcvr_datablock>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80b6 	beq.w	8003812 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80036a6:	2330      	movs	r3, #48	@ 0x30
 80036a8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80036ac:	e007      	b.n	80036be <USER_SPI_ioctl+0x162>
 80036ae:	20ff      	movs	r0, #255	@ 0xff
 80036b0:	f7ff fc14 	bl	8002edc <xchg_spi>
 80036b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036b8:	3b01      	subs	r3, #1
 80036ba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80036be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f3      	bne.n	80036ae <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80036c6:	7dbb      	ldrb	r3, [r7, #22]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	2310      	movs	r3, #16
 80036d0:	fa03 f202 	lsl.w	r2, r3, r2
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80036de:	e098      	b.n	8003812 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80036e0:	2100      	movs	r1, #0
 80036e2:	2009      	movs	r0, #9
 80036e4:	f7ff fce7 	bl	80030b6 <send_cmd>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f040 8091 	bne.w	8003812 <USER_SPI_ioctl+0x2b6>
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	2110      	movs	r1, #16
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fc82 	bl	8003000 <rcvr_datablock>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8087 	beq.w	8003812 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003704:	4b4c      	ldr	r3, [pc, #304]	@ (8003838 <USER_SPI_ioctl+0x2dc>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d012      	beq.n	8003736 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003710:	7dbb      	ldrb	r3, [r7, #22]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003718:	7dfa      	ldrb	r2, [r7, #23]
 800371a:	09d2      	lsrs	r2, r2, #7
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	4413      	add	r3, r2
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	7e7b      	ldrb	r3, [r7, #25]
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	461a      	mov	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e013      	b.n	800375e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003736:	7dbb      	ldrb	r3, [r7, #22]
 8003738:	109b      	asrs	r3, r3, #2
 800373a:	b29b      	uxth	r3, r3
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	3301      	adds	r3, #1
 8003742:	7dfa      	ldrb	r2, [r7, #23]
 8003744:	00d2      	lsls	r2, r2, #3
 8003746:	f002 0218 	and.w	r2, r2, #24
 800374a:	7df9      	ldrb	r1, [r7, #23]
 800374c:	0949      	lsrs	r1, r1, #5
 800374e:	b2c9      	uxtb	r1, r1
 8003750:	440a      	add	r2, r1
 8003752:	3201      	adds	r2, #1
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	461a      	mov	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003764:	e055      	b.n	8003812 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003766:	4b34      	ldr	r3, [pc, #208]	@ (8003838 <USER_SPI_ioctl+0x2dc>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	f003 0306 	and.w	r3, r3, #6
 800376e:	2b00      	cmp	r3, #0
 8003770:	d051      	beq.n	8003816 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003772:	f107 020c 	add.w	r2, r7, #12
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	210b      	movs	r1, #11
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff feee 	bl	800355c <USER_SPI_ioctl>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d149      	bne.n	800381a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003786:	7b3b      	ldrb	r3, [r7, #12]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <USER_SPI_ioctl+0x23e>
 8003790:	7dbb      	ldrb	r3, [r7, #22]
 8003792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d041      	beq.n	800381e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	623b      	str	r3, [r7, #32]
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80037aa:	4b23      	ldr	r3, [pc, #140]	@ (8003838 <USER_SPI_ioctl+0x2dc>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	025b      	lsls	r3, r3, #9
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	025b      	lsls	r3, r3, #9
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80037c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c4:	2020      	movs	r0, #32
 80037c6:	f7ff fc76 	bl	80030b6 <send_cmd>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d128      	bne.n	8003822 <USER_SPI_ioctl+0x2c6>
 80037d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037d2:	2021      	movs	r0, #33	@ 0x21
 80037d4:	f7ff fc6f 	bl	80030b6 <send_cmd>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d121      	bne.n	8003822 <USER_SPI_ioctl+0x2c6>
 80037de:	2100      	movs	r1, #0
 80037e0:	2026      	movs	r0, #38	@ 0x26
 80037e2:	f7ff fc68 	bl	80030b6 <send_cmd>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d11a      	bne.n	8003822 <USER_SPI_ioctl+0x2c6>
 80037ec:	f247 5030 	movw	r0, #30000	@ 0x7530
 80037f0:	f7ff fbba 	bl	8002f68 <wait_ready>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d013      	beq.n	8003822 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8003800:	e00f      	b.n	8003822 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003802:	2304      	movs	r3, #4
 8003804:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003808:	e00c      	b.n	8003824 <USER_SPI_ioctl+0x2c8>
		break;
 800380a:	bf00      	nop
 800380c:	e00a      	b.n	8003824 <USER_SPI_ioctl+0x2c8>
		break;
 800380e:	bf00      	nop
 8003810:	e008      	b.n	8003824 <USER_SPI_ioctl+0x2c8>
		break;
 8003812:	bf00      	nop
 8003814:	e006      	b.n	8003824 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003816:	bf00      	nop
 8003818:	e004      	b.n	8003824 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800381a:	bf00      	nop
 800381c:	e002      	b.n	8003824 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <USER_SPI_ioctl+0x2c8>
		break;
 8003822:	bf00      	nop
	}

	despiselect();
 8003824:	f7ff fbc4 	bl	8002fb0 <despiselect>

	return res;
 8003828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800382c:	4618      	mov	r0, r3
 800382e:	3730      	adds	r7, #48	@ 0x30
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000020 	.word	0x20000020
 8003838:	200005b0 	.word	0x200005b0

0800383c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	4a08      	ldr	r2, [pc, #32]	@ (800386c <disk_status+0x30>)
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	79fa      	ldrb	r2, [r7, #7]
 8003854:	4905      	ldr	r1, [pc, #20]	@ (800386c <disk_status+0x30>)
 8003856:	440a      	add	r2, r1
 8003858:	7a12      	ldrb	r2, [r2, #8]
 800385a:	4610      	mov	r0, r2
 800385c:	4798      	blx	r3
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200005e4 	.word	0x200005e4

08003870 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	4a0e      	ldr	r2, [pc, #56]	@ (80038bc <disk_initialize+0x4c>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d114      	bne.n	80038b2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	4a0c      	ldr	r2, [pc, #48]	@ (80038bc <disk_initialize+0x4c>)
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	79fa      	ldrb	r2, [r7, #7]
 8003896:	4909      	ldr	r1, [pc, #36]	@ (80038bc <disk_initialize+0x4c>)
 8003898:	440a      	add	r2, r1
 800389a:	7a12      	ldrb	r2, [r2, #8]
 800389c:	4610      	mov	r0, r2
 800389e:	4798      	blx	r3
 80038a0:	4603      	mov	r3, r0
 80038a2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	4a03      	ldr	r2, [pc, #12]	@ (80038bc <disk_initialize+0x4c>)
 80038ae:	2101      	movs	r1, #1
 80038b0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200005e4 	.word	0x200005e4

080038c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	4603      	mov	r3, r0
 80038ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	4a0a      	ldr	r2, [pc, #40]	@ (80038fc <disk_read+0x3c>)
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	689c      	ldr	r4, [r3, #8]
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	4a07      	ldr	r2, [pc, #28]	@ (80038fc <disk_read+0x3c>)
 80038e0:	4413      	add	r3, r2
 80038e2:	7a18      	ldrb	r0, [r3, #8]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	47a0      	blx	r4
 80038ec:	4603      	mov	r3, r0
 80038ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200005e4 	.word	0x200005e4

08003900 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4603      	mov	r3, r0
 800390e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <disk_write+0x3c>)
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	68dc      	ldr	r4, [r3, #12]
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	4a07      	ldr	r2, [pc, #28]	@ (800393c <disk_write+0x3c>)
 8003920:	4413      	add	r3, r2
 8003922:	7a18      	ldrb	r0, [r3, #8]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	47a0      	blx	r4
 800392c:	4603      	mov	r3, r0
 800392e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003930:	7dfb      	ldrb	r3, [r7, #23]
}
 8003932:	4618      	mov	r0, r3
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	bd90      	pop	{r4, r7, pc}
 800393a:	bf00      	nop
 800393c:	200005e4 	.word	0x200005e4

08003940 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	603a      	str	r2, [r7, #0]
 800394a:	71fb      	strb	r3, [r7, #7]
 800394c:	460b      	mov	r3, r1
 800394e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	4a09      	ldr	r2, [pc, #36]	@ (8003978 <disk_ioctl+0x38>)
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	79fa      	ldrb	r2, [r7, #7]
 800395e:	4906      	ldr	r1, [pc, #24]	@ (8003978 <disk_ioctl+0x38>)
 8003960:	440a      	add	r2, r1
 8003962:	7a10      	ldrb	r0, [r2, #8]
 8003964:	79b9      	ldrb	r1, [r7, #6]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	4798      	blx	r3
 800396a:	4603      	mov	r3, r0
 800396c:	73fb      	strb	r3, [r7, #15]
  return res;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	200005e4 	.word	0x200005e4

0800397c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3301      	adds	r3, #1
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800398c:	89fb      	ldrh	r3, [r7, #14]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	b21a      	sxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	b21b      	sxth	r3, r3
 8003998:	4313      	orrs	r3, r2
 800399a:	b21b      	sxth	r3, r3
 800399c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800399e:	89fb      	ldrh	r3, [r7, #14]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3303      	adds	r3, #3
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	3202      	adds	r2, #2
 80039c4:	7812      	ldrb	r2, [r2, #0]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	3201      	adds	r2, #1
 80039d2:	7812      	ldrb	r2, [r2, #0]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	7812      	ldrb	r2, [r2, #0]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
	return rv;
 80039e4:	68fb      	ldr	r3, [r7, #12]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	887a      	ldrh	r2, [r7, #2]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	0a1b      	lsrs	r3, r3, #8
 8003a42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	701a      	strb	r2, [r3, #0]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	1c53      	adds	r3, r2, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	1c59      	adds	r1, r3, #1
 8003aa4:	6179      	str	r1, [r7, #20]
 8003aa6:	7812      	ldrb	r2, [r2, #0]
 8003aa8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f1      	bne.n	8003a9a <mem_cpy+0x1a>
	}
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003ac2:	b480      	push	{r7}
 8003ac4:	b087      	sub	sp, #28
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	617a      	str	r2, [r7, #20]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	607b      	str	r3, [r7, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f3      	bne.n	8003ad2 <mem_set+0x10>
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	@ 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	61fa      	str	r2, [r7, #28]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	61ba      	str	r2, [r7, #24]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	1acb      	subs	r3, r1, r3
 8003b24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <mem_cmp+0x40>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0eb      	beq.n	8003b10 <mem_cmp+0x18>

	return r;
 8003b38:	697b      	ldr	r3, [r7, #20]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3724      	adds	r7, #36	@ 0x24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003b50:	e002      	b.n	8003b58 <chk_chr+0x12>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3301      	adds	r3, #1
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <chk_chr+0x26>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d1f2      	bne.n	8003b52 <chk_chr+0xc>
	return *str;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e029      	b.n	8003be4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003b90:	4a27      	ldr	r2, [pc, #156]	@ (8003c30 <chk_lock+0xb4>)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4413      	add	r3, r2
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01d      	beq.n	8003bda <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b9e:	4a24      	ldr	r2, [pc, #144]	@ (8003c30 <chk_lock+0xb4>)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	4413      	add	r3, r2
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d116      	bne.n	8003bde <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c30 <chk_lock+0xb4>)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d10c      	bne.n	8003bde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8003c30 <chk_lock+0xb4>)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	4413      	add	r3, r2
 8003bcc:	3308      	adds	r3, #8
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d102      	bne.n	8003bde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003bd8:	e007      	b.n	8003bea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3301      	adds	r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d9d2      	bls.n	8003b90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d109      	bne.n	8003c04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d102      	bne.n	8003bfc <chk_lock+0x80>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d101      	bne.n	8003c00 <chk_lock+0x84>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e010      	b.n	8003c22 <chk_lock+0xa6>
 8003c00:	2312      	movs	r3, #18
 8003c02:	e00e      	b.n	8003c22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d108      	bne.n	8003c1c <chk_lock+0xa0>
 8003c0a:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <chk_lock+0xb4>)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	4413      	add	r3, r2
 8003c12:	330c      	adds	r3, #12
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c1a:	d101      	bne.n	8003c20 <chk_lock+0xa4>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	e000      	b.n	8003c22 <chk_lock+0xa6>
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	200005c4 	.word	0x200005c4

08003c34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	e002      	b.n	8003c46 <enq_lock+0x12>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3301      	adds	r3, #1
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d806      	bhi.n	8003c5a <enq_lock+0x26>
 8003c4c:	4a09      	ldr	r2, [pc, #36]	@ (8003c74 <enq_lock+0x40>)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	4413      	add	r3, r2
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f2      	bne.n	8003c40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	200005c4 	.word	0x200005c4

08003c78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e01f      	b.n	8003cc8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003c88:	4a41      	ldr	r2, [pc, #260]	@ (8003d90 <inc_lock+0x118>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	4413      	add	r3, r2
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d113      	bne.n	8003cc2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003d90 <inc_lock+0x118>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d109      	bne.n	8003cc2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003cae:	4a38      	ldr	r2, [pc, #224]	@ (8003d90 <inc_lock+0x118>)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d006      	beq.n	8003cd0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d9dc      	bls.n	8003c88 <inc_lock+0x10>
 8003cce:	e000      	b.n	8003cd2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003cd0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d132      	bne.n	8003d3e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e002      	b.n	8003ce4 <inc_lock+0x6c>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d806      	bhi.n	8003cf8 <inc_lock+0x80>
 8003cea:	4a29      	ldr	r2, [pc, #164]	@ (8003d90 <inc_lock+0x118>)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	4413      	add	r3, r2
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f2      	bne.n	8003cde <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d101      	bne.n	8003d02 <inc_lock+0x8a>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e040      	b.n	8003d84 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4922      	ldr	r1, [pc, #136]	@ (8003d90 <inc_lock+0x118>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	440b      	add	r3, r1
 8003d0e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	491e      	ldr	r1, [pc, #120]	@ (8003d90 <inc_lock+0x118>)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	491a      	ldr	r1, [pc, #104]	@ (8003d90 <inc_lock+0x118>)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003d30:	4a17      	ldr	r2, [pc, #92]	@ (8003d90 <inc_lock+0x118>)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	4413      	add	r3, r2
 8003d38:	330c      	adds	r3, #12
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <inc_lock+0xe0>
 8003d44:	4a12      	ldr	r2, [pc, #72]	@ (8003d90 <inc_lock+0x118>)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	4413      	add	r3, r2
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <inc_lock+0xe0>
 8003d54:	2300      	movs	r3, #0
 8003d56:	e015      	b.n	8003d84 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <inc_lock+0xf8>
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d90 <inc_lock+0x118>)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	4413      	add	r3, r2
 8003d66:	330c      	adds	r3, #12
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	e001      	b.n	8003d74 <inc_lock+0xfc>
 8003d70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d74:	4906      	ldr	r1, [pc, #24]	@ (8003d90 <inc_lock+0x118>)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	440b      	add	r3, r1
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	200005c4 	.word	0x200005c4

08003d94 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d825      	bhi.n	8003df4 <dec_lock+0x60>
		n = Files[i].ctr;
 8003da8:	4a17      	ldr	r2, [pc, #92]	@ (8003e08 <dec_lock+0x74>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	4413      	add	r3, r2
 8003db0:	330c      	adds	r3, #12
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003db6:	89fb      	ldrh	r3, [r7, #14]
 8003db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dbc:	d101      	bne.n	8003dc2 <dec_lock+0x2e>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003dc2:	89fb      	ldrh	r3, [r7, #14]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <dec_lock+0x3a>
 8003dc8:	89fb      	ldrh	r3, [r7, #14]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003dce:	4a0e      	ldr	r2, [pc, #56]	@ (8003e08 <dec_lock+0x74>)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	4413      	add	r3, r2
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	89fa      	ldrh	r2, [r7, #14]
 8003dda:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003ddc:	89fb      	ldrh	r3, [r7, #14]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d105      	bne.n	8003dee <dec_lock+0x5a>
 8003de2:	4a09      	ldr	r2, [pc, #36]	@ (8003e08 <dec_lock+0x74>)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	4413      	add	r3, r2
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	737b      	strb	r3, [r7, #13]
 8003df2:	e001      	b.n	8003df8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003df4:	2302      	movs	r3, #2
 8003df6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003df8:	7b7b      	ldrb	r3, [r7, #13]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	200005c4 	.word	0x200005c4

08003e0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e010      	b.n	8003e3c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e50 <clear_lock+0x44>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	4413      	add	r3, r2
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d105      	bne.n	8003e36 <clear_lock+0x2a>
 8003e2a:	4a09      	ldr	r2, [pc, #36]	@ (8003e50 <clear_lock+0x44>)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	4413      	add	r3, r2
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d9eb      	bls.n	8003e1a <clear_lock+0xe>
	}
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	200005c4 	.word	0x200005c4

08003e54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	78db      	ldrb	r3, [r3, #3]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d034      	beq.n	8003ed2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7858      	ldrb	r0, [r3, #1]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003e78:	2301      	movs	r3, #1
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	f7ff fd40 	bl	8003900 <disk_write>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <sync_window+0x38>
			res = FR_DISK_ERR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	e022      	b.n	8003ed2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	1ad2      	subs	r2, r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d217      	bcs.n	8003ed2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	789b      	ldrb	r3, [r3, #2]
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	e010      	b.n	8003ecc <sync_window+0x78>
					wsect += fs->fsize;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7858      	ldrb	r0, [r3, #1]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	f7ff fd1d 	bl	8003900 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d8eb      	bhi.n	8003eaa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d01b      	beq.n	8003f2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ffad 	bl	8003e54 <sync_window>
 8003efa:	4603      	mov	r3, r0
 8003efc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d113      	bne.n	8003f2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7858      	ldrb	r0, [r3, #1]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003f0e:	2301      	movs	r3, #1
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	f7ff fcd5 	bl	80038c0 <disk_read>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003f1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ff87 	bl	8003e54 <sync_window>
 8003f46:	4603      	mov	r3, r0
 8003f48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d158      	bne.n	8004002 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d148      	bne.n	8003fea <sync_fs+0xb2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	791b      	ldrb	r3, [r3, #4]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d144      	bne.n	8003fea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3330      	adds	r3, #48	@ 0x30
 8003f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fda9 	bl	8003ac2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3330      	adds	r3, #48	@ 0x30
 8003f74:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003f78:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fd38 	bl	80039f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3330      	adds	r3, #48	@ 0x30
 8003f86:	4921      	ldr	r1, [pc, #132]	@ (800400c <sync_fs+0xd4>)
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fd4d 	bl	8003a28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3330      	adds	r3, #48	@ 0x30
 8003f92:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003f96:	491e      	ldr	r1, [pc, #120]	@ (8004010 <sync_fs+0xd8>)
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fd45 	bl	8003a28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3330      	adds	r3, #48	@ 0x30
 8003fa2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7ff fd3b 	bl	8003a28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3330      	adds	r3, #48	@ 0x30
 8003fb6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f7ff fd31 	bl	8003a28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	7858      	ldrb	r0, [r3, #1]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f7ff fc8e 	bl	8003900 <disk_write>
			fs->fsi_flag = 0;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	785b      	ldrb	r3, [r3, #1]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fca4 	bl	8003940 <disk_ioctl>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <sync_fs+0xca>
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	41615252 	.word	0x41615252
 8004010:	61417272 	.word	0x61417272

08004014 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	3b02      	subs	r3, #2
 8004022:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	3b02      	subs	r3, #2
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d301      	bcc.n	8004034 <clust2sect+0x20>
 8004030:	2300      	movs	r3, #0
 8004032:	e008      	b.n	8004046 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	895b      	ldrh	r3, [r3, #10]
 8004038:	461a      	mov	r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	fb03 f202 	mul.w	r2, r3, r2
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004044:	4413      	add	r3, r2
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d904      	bls.n	8004072 <get_fat+0x20>
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e08e      	b.n	8004196 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004078:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800407c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d061      	beq.n	800414a <get_fat+0xf8>
 8004086:	2b03      	cmp	r3, #3
 8004088:	dc7b      	bgt.n	8004182 <get_fat+0x130>
 800408a:	2b01      	cmp	r3, #1
 800408c:	d002      	beq.n	8004094 <get_fat+0x42>
 800408e:	2b02      	cmp	r3, #2
 8004090:	d041      	beq.n	8004116 <get_fat+0xc4>
 8004092:	e076      	b.n	8004182 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	0a5b      	lsrs	r3, r3, #9
 80040aa:	4413      	add	r3, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	6938      	ldr	r0, [r7, #16]
 80040b0:	f7ff ff14 	bl	8003edc <move_window>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d166      	bne.n	8004188 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	60fa      	str	r2, [r7, #12]
 80040c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6a1a      	ldr	r2, [r3, #32]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	0a5b      	lsrs	r3, r3, #9
 80040d6:	4413      	add	r3, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	6938      	ldr	r0, [r7, #16]
 80040dc:	f7ff fefe 	bl	8003edc <move_window>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d152      	bne.n	800418c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4413      	add	r3, r2
 80040f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <get_fat+0xba>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	e002      	b.n	8004112 <get_fat+0xc0>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004112:	617b      	str	r3, [r7, #20]
			break;
 8004114:	e03f      	b.n	8004196 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	6a1a      	ldr	r2, [r3, #32]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	4413      	add	r3, r2
 8004120:	4619      	mov	r1, r3
 8004122:	6938      	ldr	r0, [r7, #16]
 8004124:	f7ff feda 	bl	8003edc <move_window>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d130      	bne.n	8004190 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800413c:	4413      	add	r3, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fc1c 	bl	800397c <ld_word>
 8004144:	4603      	mov	r3, r0
 8004146:	617b      	str	r3, [r7, #20]
			break;
 8004148:	e025      	b.n	8004196 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6a1a      	ldr	r2, [r3, #32]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	09db      	lsrs	r3, r3, #7
 8004152:	4413      	add	r3, r2
 8004154:	4619      	mov	r1, r3
 8004156:	6938      	ldr	r0, [r7, #16]
 8004158:	f7ff fec0 	bl	8003edc <move_window>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d118      	bne.n	8004194 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004170:	4413      	add	r3, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fc1a 	bl	80039ac <ld_dword>
 8004178:	4603      	mov	r3, r0
 800417a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800417e:	617b      	str	r3, [r7, #20]
			break;
 8004180:	e009      	b.n	8004196 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004182:	2301      	movs	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e006      	b.n	8004196 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004188:	bf00      	nop
 800418a:	e004      	b.n	8004196 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800418c:	bf00      	nop
 800418e:	e002      	b.n	8004196 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004190:	bf00      	nop
 8004192:	e000      	b.n	8004196 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004194:	bf00      	nop
		}
	}

	return val;
 8004196:	697b      	ldr	r3, [r7, #20]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b089      	sub	sp, #36	@ 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80041ac:	2302      	movs	r3, #2
 80041ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	f240 80d9 	bls.w	800436a <put_fat+0x1ca>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	f080 80d3 	bcs.w	800436a <put_fat+0x1ca>
		switch (fs->fs_type) {
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	f000 8096 	beq.w	80042fa <put_fat+0x15a>
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	f300 80cb 	bgt.w	800436a <put_fat+0x1ca>
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d002      	beq.n	80041de <put_fat+0x3e>
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d06e      	beq.n	80042ba <put_fat+0x11a>
 80041dc:	e0c5      	b.n	800436a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	085b      	lsrs	r3, r3, #1
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4413      	add	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	0a5b      	lsrs	r3, r3, #9
 80041f4:	4413      	add	r3, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff fe6f 	bl	8003edc <move_window>
 80041fe:	4603      	mov	r3, r0
 8004200:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004202:	7ffb      	ldrb	r3, [r7, #31]
 8004204:	2b00      	cmp	r3, #0
 8004206:	f040 80a9 	bne.w	800435c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	1c59      	adds	r1, r3, #1
 8004214:	61b9      	str	r1, [r7, #24]
 8004216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421a:	4413      	add	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <put_fat+0xa4>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b25b      	sxtb	r3, r3
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	b25a      	sxtb	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	b25b      	sxtb	r3, r3
 800423c:	4313      	orrs	r3, r2
 800423e:	b25b      	sxtb	r3, r3
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e001      	b.n	8004248 <put_fat+0xa8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	0a5b      	lsrs	r3, r3, #9
 800425a:	4413      	add	r3, r2
 800425c:	4619      	mov	r1, r3
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff fe3c 	bl	8003edc <move_window>
 8004264:	4603      	mov	r3, r0
 8004266:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004268:	7ffb      	ldrb	r3, [r7, #31]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d178      	bne.n	8004360 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427a:	4413      	add	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <put_fat+0xf0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	091b      	lsrs	r3, r3, #4
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e00e      	b.n	80042ae <put_fat+0x10e>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b25b      	sxtb	r3, r3
 8004296:	f023 030f 	bic.w	r3, r3, #15
 800429a:	b25a      	sxtb	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	4313      	orrs	r3, r2
 80042aa:	b25b      	sxtb	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	70da      	strb	r2, [r3, #3]
			break;
 80042b8:	e057      	b.n	800436a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1a      	ldr	r2, [r3, #32]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	4413      	add	r3, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f7ff fe08 	bl	8003edc <move_window>
 80042cc:	4603      	mov	r3, r0
 80042ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042d0:	7ffb      	ldrb	r3, [r7, #31]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d146      	bne.n	8004364 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80042e4:	4413      	add	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	b292      	uxth	r2, r2
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fb80 	bl	80039f2 <st_word>
			fs->wflag = 1;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	70da      	strb	r2, [r3, #3]
			break;
 80042f8:	e037      	b.n	800436a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1a      	ldr	r2, [r3, #32]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	09db      	lsrs	r3, r3, #7
 8004302:	4413      	add	r3, r2
 8004304:	4619      	mov	r1, r3
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff fde8 	bl	8003edc <move_window>
 800430c:	4603      	mov	r3, r0
 800430e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004310:	7ffb      	ldrb	r3, [r7, #31]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d128      	bne.n	8004368 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800432a:	4413      	add	r3, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fb3d 	bl	80039ac <ld_dword>
 8004332:	4603      	mov	r3, r0
 8004334:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004338:	4323      	orrs	r3, r4
 800433a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800434a:	4413      	add	r3, r2
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fb6a 	bl	8003a28 <st_dword>
			fs->wflag = 1;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	70da      	strb	r2, [r3, #3]
			break;
 800435a:	e006      	b.n	800436a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800435c:	bf00      	nop
 800435e:	e004      	b.n	800436a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004360:	bf00      	nop
 8004362:	e002      	b.n	800436a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004364:	bf00      	nop
 8004366:	e000      	b.n	800436a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004368:	bf00      	nop
		}
	}
	return res;
 800436a:	7ffb      	ldrb	r3, [r7, #31]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3724      	adds	r7, #36	@ 0x24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd90      	pop	{r4, r7, pc}

08004374 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d904      	bls.n	800439a <remove_chain+0x26>
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	d301      	bcc.n	800439e <remove_chain+0x2a>
 800439a:	2302      	movs	r3, #2
 800439c:	e04b      	b.n	8004436 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00c      	beq.n	80043be <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	69b8      	ldr	r0, [r7, #24]
 80043ac:	f7ff fef8 	bl	80041a0 <put_fat>
 80043b0:	4603      	mov	r3, r0
 80043b2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80043b4:	7ffb      	ldrb	r3, [r7, #31]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <remove_chain+0x4a>
 80043ba:	7ffb      	ldrb	r3, [r7, #31]
 80043bc:	e03b      	b.n	8004436 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff fe46 	bl	8004052 <get_fat>
 80043c6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d031      	beq.n	8004432 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <remove_chain+0x64>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e02e      	b.n	8004436 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043de:	d101      	bne.n	80043e4 <remove_chain+0x70>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e028      	b.n	8004436 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80043e4:	2200      	movs	r2, #0
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	69b8      	ldr	r0, [r7, #24]
 80043ea:	f7ff fed9 	bl	80041a0 <put_fat>
 80043ee:	4603      	mov	r3, r0
 80043f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80043f2:	7ffb      	ldrb	r3, [r7, #31]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <remove_chain+0x88>
 80043f8:	7ffb      	ldrb	r3, [r7, #31]
 80043fa:	e01c      	b.n	8004436 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	3b02      	subs	r3, #2
 8004406:	429a      	cmp	r2, r3
 8004408:	d20b      	bcs.n	8004422 <remove_chain+0xae>
			fs->free_clst++;
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	791b      	ldrb	r3, [r3, #4]
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	b2da      	uxtb	r2, r3
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d3c6      	bcc.n	80043be <remove_chain+0x4a>
 8004430:	e000      	b.n	8004434 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004432:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b088      	sub	sp, #32
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10d      	bne.n	8004470 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <create_chain+0x2c>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	429a      	cmp	r2, r3
 8004468:	d31b      	bcc.n	80044a2 <create_chain+0x64>
 800446a:	2301      	movs	r3, #1
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	e018      	b.n	80044a2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004470:	6839      	ldr	r1, [r7, #0]
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff fded 	bl	8004052 <get_fat>
 8004478:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d801      	bhi.n	8004484 <create_chain+0x46>
 8004480:	2301      	movs	r3, #1
 8004482:	e070      	b.n	8004566 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800448a:	d101      	bne.n	8004490 <create_chain+0x52>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	e06a      	b.n	8004566 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	429a      	cmp	r2, r3
 8004498:	d201      	bcs.n	800449e <create_chain+0x60>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	e063      	b.n	8004566 <create_chain+0x128>
		scl = clst;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	3301      	adds	r3, #1
 80044aa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d307      	bcc.n	80044c6 <create_chain+0x88>
				ncl = 2;
 80044b6:	2302      	movs	r3, #2
 80044b8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d901      	bls.n	80044c6 <create_chain+0x88>
 80044c2:	2300      	movs	r3, #0
 80044c4:	e04f      	b.n	8004566 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80044c6:	69f9      	ldr	r1, [r7, #28]
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff fdc2 	bl	8004052 <get_fat>
 80044ce:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00e      	beq.n	80044f4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d003      	beq.n	80044e4 <create_chain+0xa6>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044e2:	d101      	bne.n	80044e8 <create_chain+0xaa>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	e03e      	b.n	8004566 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d1da      	bne.n	80044a6 <create_chain+0x68>
 80044f0:	2300      	movs	r3, #0
 80044f2:	e038      	b.n	8004566 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80044f4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80044f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044fa:	69f9      	ldr	r1, [r7, #28]
 80044fc:	6938      	ldr	r0, [r7, #16]
 80044fe:	f7ff fe4f 	bl	80041a0 <put_fat>
 8004502:	4603      	mov	r3, r0
 8004504:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d109      	bne.n	8004520 <create_chain+0xe2>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d006      	beq.n	8004520 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	6839      	ldr	r1, [r7, #0]
 8004516:	6938      	ldr	r0, [r7, #16]
 8004518:	f7ff fe42 	bl	80041a0 <put_fat>
 800451c:	4603      	mov	r3, r0
 800451e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d116      	bne.n	8004554 <create_chain+0x116>
		fs->last_clst = ncl;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	3b02      	subs	r3, #2
 8004536:	429a      	cmp	r2, r3
 8004538:	d804      	bhi.n	8004544 <create_chain+0x106>
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	1e5a      	subs	r2, r3, #1
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	791b      	ldrb	r3, [r3, #4]
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	b2da      	uxtb	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	711a      	strb	r2, [r3, #4]
 8004552:	e007      	b.n	8004564 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d102      	bne.n	8004560 <create_chain+0x122>
 800455a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800455e:	e000      	b.n	8004562 <create_chain+0x124>
 8004560:	2301      	movs	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004564:	69fb      	ldr	r3, [r7, #28]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800456e:	b480      	push	{r7}
 8004570:	b087      	sub	sp, #28
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004582:	3304      	adds	r3, #4
 8004584:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	0a5b      	lsrs	r3, r3, #9
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	8952      	ldrh	r2, [r2, #10]
 800458e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004592:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1d1a      	adds	r2, r3, #4
 8004598:	613a      	str	r2, [r7, #16]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <clmt_clust+0x3a>
 80045a4:	2300      	movs	r3, #0
 80045a6:	e010      	b.n	80045ca <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d307      	bcc.n	80045c0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	3304      	adds	r3, #4
 80045bc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80045be:	e7e9      	b.n	8004594 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80045c0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045ec:	d204      	bcs.n	80045f8 <dir_sdi+0x22>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <dir_sdi+0x26>
		return FR_INT_ERR;
 80045f8:	2302      	movs	r3, #2
 80045fa:	e063      	b.n	80046c4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <dir_sdi+0x46>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d902      	bls.n	800461c <dir_sdi+0x46>
		clst = fs->dirbase;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10c      	bne.n	800463c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	8912      	ldrh	r2, [r2, #8]
 800462a:	4293      	cmp	r3, r2
 800462c:	d301      	bcc.n	8004632 <dir_sdi+0x5c>
 800462e:	2302      	movs	r3, #2
 8004630:	e048      	b.n	80046c4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	61da      	str	r2, [r3, #28]
 800463a:	e029      	b.n	8004690 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	895b      	ldrh	r3, [r3, #10]
 8004640:	025b      	lsls	r3, r3, #9
 8004642:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004644:	e019      	b.n	800467a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6979      	ldr	r1, [r7, #20]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fd01 	bl	8004052 <get_fat>
 8004650:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004658:	d101      	bne.n	800465e <dir_sdi+0x88>
 800465a:	2301      	movs	r3, #1
 800465c:	e032      	b.n	80046c4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d904      	bls.n	800466e <dir_sdi+0x98>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	429a      	cmp	r2, r3
 800466c:	d301      	bcc.n	8004672 <dir_sdi+0x9c>
 800466e:	2302      	movs	r3, #2
 8004670:	e028      	b.n	80046c4 <dir_sdi+0xee>
			ofs -= csz;
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	429a      	cmp	r2, r3
 8004680:	d2e1      	bcs.n	8004646 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	6938      	ldr	r0, [r7, #16]
 8004686:	f7ff fcc5 	bl	8004014 <clust2sect>
 800468a:	4602      	mov	r2, r0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <dir_sdi+0xcc>
 800469e:	2302      	movs	r3, #2
 80046a0:	e010      	b.n	80046c4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	0a5b      	lsrs	r3, r3, #9
 80046aa:	441a      	add	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	3320      	adds	r3, #32
 80046e2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <dir_next+0x28>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046f2:	d301      	bcc.n	80046f8 <dir_next+0x2c>
 80046f4:	2304      	movs	r3, #4
 80046f6:	e0aa      	b.n	800484e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 8098 	bne.w	8004834 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10b      	bne.n	800472e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	8912      	ldrh	r2, [r2, #8]
 800471e:	4293      	cmp	r3, r2
 8004720:	f0c0 8088 	bcc.w	8004834 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	61da      	str	r2, [r3, #28]
 800472a:	2304      	movs	r3, #4
 800472c:	e08f      	b.n	800484e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	0a5b      	lsrs	r3, r3, #9
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	8952      	ldrh	r2, [r2, #10]
 8004736:	3a01      	subs	r2, #1
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d17a      	bne.n	8004834 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	4619      	mov	r1, r3
 8004746:	4610      	mov	r0, r2
 8004748:	f7ff fc83 	bl	8004052 <get_fat>
 800474c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d801      	bhi.n	8004758 <dir_next+0x8c>
 8004754:	2302      	movs	r3, #2
 8004756:	e07a      	b.n	800484e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800475e:	d101      	bne.n	8004764 <dir_next+0x98>
 8004760:	2301      	movs	r3, #1
 8004762:	e074      	b.n	800484e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	429a      	cmp	r2, r3
 800476c:	d358      	bcc.n	8004820 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	61da      	str	r2, [r3, #28]
 800477a:	2304      	movs	r3, #4
 800477c:	e067      	b.n	800484e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f7ff fe59 	bl	800443e <create_chain>
 800478c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <dir_next+0xcc>
 8004794:	2307      	movs	r3, #7
 8004796:	e05a      	b.n	800484e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <dir_next+0xd6>
 800479e:	2302      	movs	r3, #2
 80047a0:	e055      	b.n	800484e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047a8:	d101      	bne.n	80047ae <dir_next+0xe2>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e04f      	b.n	800484e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff fb50 	bl	8003e54 <sync_window>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <dir_next+0xf2>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e047      	b.n	800484e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3330      	adds	r3, #48	@ 0x30
 80047c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f97a 	bl	8003ac2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	6979      	ldr	r1, [r7, #20]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff fc1d 	bl	8004014 <clust2sect>
 80047da:	4602      	mov	r2, r0
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80047e0:	e012      	b.n	8004808 <dir_next+0x13c>
						fs->wflag = 1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7ff fb33 	bl	8003e54 <sync_window>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <dir_next+0x12c>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e02a      	b.n	800484e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	3301      	adds	r3, #1
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	895b      	ldrh	r3, [r3, #10]
 800480c:	461a      	mov	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4293      	cmp	r3, r2
 8004812:	d3e6      	bcc.n	80047e2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004826:	6979      	ldr	r1, [r7, #20]
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f7ff fbf3 	bl	8004014 <clust2sect>
 800482e:	4602      	mov	r2, r0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	441a      	add	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b086      	sub	sp, #24
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004866:	2100      	movs	r1, #0
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff feb4 	bl	80045d6 <dir_sdi>
 800486e:	4603      	mov	r3, r0
 8004870:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d12b      	bne.n	80048d0 <dir_alloc+0x7a>
		n = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	4619      	mov	r1, r3
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff fb2a 	bl	8003edc <move_window>
 8004888:	4603      	mov	r3, r0
 800488a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d11d      	bne.n	80048ce <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2be5      	cmp	r3, #229	@ 0xe5
 800489a:	d004      	beq.n	80048a6 <dir_alloc+0x50>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d107      	bne.n	80048b6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3301      	adds	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d102      	bne.n	80048ba <dir_alloc+0x64>
 80048b4:	e00c      	b.n	80048d0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80048b6:	2300      	movs	r3, #0
 80048b8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80048ba:	2101      	movs	r1, #1
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff ff05 	bl	80046cc <dir_next>
 80048c2:	4603      	mov	r3, r0
 80048c4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0d7      	beq.n	800487c <dir_alloc+0x26>
 80048cc:	e000      	b.n	80048d0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80048ce:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d101      	bne.n	80048da <dir_alloc+0x84>
 80048d6:	2307      	movs	r3, #7
 80048d8:	75fb      	strb	r3, [r7, #23]
	return res;
 80048da:	7dfb      	ldrb	r3, [r7, #23]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	331a      	adds	r3, #26
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff f842 	bl	800397c <ld_word>
 80048f8:	4603      	mov	r3, r0
 80048fa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d109      	bne.n	8004918 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff f837 	bl	800397c <ld_word>
 800490e:	4603      	mov	r3, r0
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004918:	68fb      	ldr	r3, [r7, #12]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	331a      	adds	r3, #26
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	b292      	uxth	r2, r2
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff f85a 	bl	80039f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b03      	cmp	r3, #3
 8004944:	d109      	bne.n	800495a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f103 0214 	add.w	r2, r3, #20
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	b29b      	uxth	r3, r3
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f7ff f84c 	bl	80039f2 <st_word>
	}
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004970:	2100      	movs	r1, #0
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fe2f 	bl	80045d6 <dir_sdi>
 8004978:	4603      	mov	r3, r0
 800497a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <dir_find+0x24>
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	e03e      	b.n	8004a04 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	4619      	mov	r1, r3
 800498c:	6938      	ldr	r0, [r7, #16]
 800498e:	f7ff faa5 	bl	8003edc <move_window>
 8004992:	4603      	mov	r3, r0
 8004994:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d12f      	bne.n	80049fc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <dir_find+0x4e>
 80049aa:	2304      	movs	r3, #4
 80049ac:	75fb      	strb	r3, [r7, #23]
 80049ae:	e028      	b.n	8004a02 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	330b      	adds	r3, #11
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	330b      	adds	r3, #11
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <dir_find+0x86>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a18      	ldr	r0, [r3, #32]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3324      	adds	r3, #36	@ 0x24
 80049da:	220b      	movs	r2, #11
 80049dc:	4619      	mov	r1, r3
 80049de:	f7ff f88b 	bl	8003af8 <mem_cmp>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00b      	beq.n	8004a00 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80049e8:	2100      	movs	r1, #0
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fe6e 	bl	80046cc <dir_next>
 80049f0:	4603      	mov	r3, r0
 80049f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0c5      	beq.n	8004986 <dir_find+0x24>
 80049fa:	e002      	b.n	8004a02 <dir_find+0xa0>
		if (res != FR_OK) break;
 80049fc:	bf00      	nop
 80049fe:	e000      	b.n	8004a02 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004a00:	bf00      	nop

	return res;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff1a 	bl	8004856 <dir_alloc>
 8004a22:	4603      	mov	r3, r0
 8004a24:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11c      	bne.n	8004a66 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	4619      	mov	r1, r3
 8004a32:	68b8      	ldr	r0, [r7, #8]
 8004a34:	f7ff fa52 	bl	8003edc <move_window>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d111      	bne.n	8004a66 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	2220      	movs	r2, #32
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff f839 	bl	8003ac2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a18      	ldr	r0, [r3, #32]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3324      	adds	r3, #36	@ 0x24
 8004a58:	220b      	movs	r2, #11
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f7ff f810 	bl	8003a80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2201      	movs	r2, #1
 8004a64:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3324      	adds	r3, #36	@ 0x24
 8004a84:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004a86:	220b      	movs	r2, #11
 8004a88:	2120      	movs	r1, #32
 8004a8a:	68b8      	ldr	r0, [r7, #8]
 8004a8c:	f7ff f819 	bl	8003ac2 <mem_set>
	si = i = 0; ni = 8;
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	2308      	movs	r3, #8
 8004a9a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	61fa      	str	r2, [r7, #28]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004aaa:	7efb      	ldrb	r3, [r7, #27]
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d94e      	bls.n	8004b4e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004ab0:	7efb      	ldrb	r3, [r7, #27]
 8004ab2:	2b2f      	cmp	r3, #47	@ 0x2f
 8004ab4:	d006      	beq.n	8004ac4 <create_name+0x54>
 8004ab6:	7efb      	ldrb	r3, [r7, #27]
 8004ab8:	2b5c      	cmp	r3, #92	@ 0x5c
 8004aba:	d110      	bne.n	8004ade <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004abc:	e002      	b.n	8004ac4 <create_name+0x54>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b2f      	cmp	r3, #47	@ 0x2f
 8004ace:	d0f6      	beq.n	8004abe <create_name+0x4e>
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b5c      	cmp	r3, #92	@ 0x5c
 8004ada:	d0f0      	beq.n	8004abe <create_name+0x4e>
			break;
 8004adc:	e038      	b.n	8004b50 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004ade:	7efb      	ldrb	r3, [r7, #27]
 8004ae0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ae2:	d003      	beq.n	8004aec <create_name+0x7c>
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d30c      	bcc.n	8004b06 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b0b      	cmp	r3, #11
 8004af0:	d002      	beq.n	8004af8 <create_name+0x88>
 8004af2:	7efb      	ldrb	r3, [r7, #27]
 8004af4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004af6:	d001      	beq.n	8004afc <create_name+0x8c>
 8004af8:	2306      	movs	r3, #6
 8004afa:	e044      	b.n	8004b86 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004afc:	2308      	movs	r3, #8
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	230b      	movs	r3, #11
 8004b02:	617b      	str	r3, [r7, #20]
			continue;
 8004b04:	e022      	b.n	8004b4c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004b06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da04      	bge.n	8004b18 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004b0e:	7efb      	ldrb	r3, [r7, #27]
 8004b10:	3b80      	subs	r3, #128	@ 0x80
 8004b12:	4a1f      	ldr	r2, [pc, #124]	@ (8004b90 <create_name+0x120>)
 8004b14:	5cd3      	ldrb	r3, [r2, r3]
 8004b16:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004b18:	7efb      	ldrb	r3, [r7, #27]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	481d      	ldr	r0, [pc, #116]	@ (8004b94 <create_name+0x124>)
 8004b1e:	f7ff f812 	bl	8003b46 <chk_chr>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <create_name+0xbc>
 8004b28:	2306      	movs	r3, #6
 8004b2a:	e02c      	b.n	8004b86 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004b2c:	7efb      	ldrb	r3, [r7, #27]
 8004b2e:	2b60      	cmp	r3, #96	@ 0x60
 8004b30:	d905      	bls.n	8004b3e <create_name+0xce>
 8004b32:	7efb      	ldrb	r3, [r7, #27]
 8004b34:	2b7a      	cmp	r3, #122	@ 0x7a
 8004b36:	d802      	bhi.n	8004b3e <create_name+0xce>
 8004b38:	7efb      	ldrb	r3, [r7, #27]
 8004b3a:	3b20      	subs	r3, #32
 8004b3c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	613a      	str	r2, [r7, #16]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	4413      	add	r3, r2
 8004b48:	7efa      	ldrb	r2, [r7, #27]
 8004b4a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004b4c:	e7a6      	b.n	8004a9c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004b4e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	441a      	add	r2, r3
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <create_name+0xf4>
 8004b60:	2306      	movs	r3, #6
 8004b62:	e010      	b.n	8004b86 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2be5      	cmp	r3, #229	@ 0xe5
 8004b6a:	d102      	bne.n	8004b72 <create_name+0x102>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2205      	movs	r2, #5
 8004b70:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004b72:	7efb      	ldrb	r3, [r7, #27]
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d801      	bhi.n	8004b7c <create_name+0x10c>
 8004b78:	2204      	movs	r2, #4
 8004b7a:	e000      	b.n	8004b7e <create_name+0x10e>
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	330b      	adds	r3, #11
 8004b82:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004b84:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	08007014 	.word	0x08007014
 8004b94:	08006fb8 	.word	0x08006fb8

08004b98 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004bac:	e002      	b.n	8004bb4 <follow_path+0x1c>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8004bba:	d0f8      	beq.n	8004bae <follow_path+0x16>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b5c      	cmp	r3, #92	@ 0x5c
 8004bc2:	d0f4      	beq.n	8004bae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b1f      	cmp	r3, #31
 8004bd0:	d80a      	bhi.n	8004be8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2280      	movs	r2, #128	@ 0x80
 8004bd6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8004bda:	2100      	movs	r1, #0
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fcfa 	bl	80045d6 <dir_sdi>
 8004be2:	4603      	mov	r3, r0
 8004be4:	75fb      	strb	r3, [r7, #23]
 8004be6:	e043      	b.n	8004c70 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004be8:	463b      	mov	r3, r7
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ff3f 	bl	8004a70 <create_name>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d134      	bne.n	8004c66 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff feb0 	bl	8004962 <dir_find>
 8004c02:	4603      	mov	r3, r0
 8004c04:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004c0c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d127      	bne.n	8004c6a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d122      	bne.n	8004c6a <follow_path+0xd2>
 8004c24:	2305      	movs	r3, #5
 8004c26:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004c28:	e01f      	b.n	8004c6a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c2a:	7afb      	ldrb	r3, [r7, #11]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11c      	bne.n	8004c6e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	799b      	ldrb	r3, [r3, #6]
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004c40:	2305      	movs	r3, #5
 8004c42:	75fb      	strb	r3, [r7, #23]
 8004c44:	e014      	b.n	8004c70 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c54:	4413      	add	r3, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff fe43 	bl	80048e4 <ld_clust>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004c64:	e7c0      	b.n	8004be8 <follow_path+0x50>
			if (res != FR_OK) break;
 8004c66:	bf00      	nop
 8004c68:	e002      	b.n	8004c70 <follow_path+0xd8>
				break;
 8004c6a:	bf00      	nop
 8004c6c:	e000      	b.n	8004c70 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c6e:	bf00      	nop
			}
		}
	}

	return res;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b087      	sub	sp, #28
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c86:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d031      	beq.n	8004cf4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e002      	b.n	8004c9e <get_ldnumber+0x24>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d903      	bls.n	8004cae <get_ldnumber+0x34>
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b3a      	cmp	r3, #58	@ 0x3a
 8004cac:	d1f4      	bne.n	8004c98 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b3a      	cmp	r3, #58	@ 0x3a
 8004cb4:	d11c      	bne.n	8004cf0 <get_ldnumber+0x76>
			tp = *path;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	60fa      	str	r2, [r7, #12]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	3b30      	subs	r3, #48	@ 0x30
 8004cc6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b09      	cmp	r3, #9
 8004ccc:	d80e      	bhi.n	8004cec <get_ldnumber+0x72>
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10a      	bne.n	8004cec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d107      	bne.n	8004cec <get_ldnumber+0x72>
					vol = (int)i;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	e002      	b.n	8004cf6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004cf4:	693b      	ldr	r3, [r7, #16]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	70da      	strb	r2, [r3, #3]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff f8dc 	bl	8003edc <move_window>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <check_fs+0x2a>
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	e038      	b.n	8004da0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3330      	adds	r3, #48	@ 0x30
 8004d32:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fe20 	bl	800397c <ld_word>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <check_fs+0x48>
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e029      	b.n	8004da0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d52:	2be9      	cmp	r3, #233	@ 0xe9
 8004d54:	d009      	beq.n	8004d6a <check_fs+0x66>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d5c:	2beb      	cmp	r3, #235	@ 0xeb
 8004d5e:	d11e      	bne.n	8004d9e <check_fs+0x9a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004d66:	2b90      	cmp	r3, #144	@ 0x90
 8004d68:	d119      	bne.n	8004d9e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3330      	adds	r3, #48	@ 0x30
 8004d6e:	3336      	adds	r3, #54	@ 0x36
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe fe1b 	bl	80039ac <ld_dword>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <check_fs+0xa4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d101      	bne.n	8004d86 <check_fs+0x82>
 8004d82:	2300      	movs	r3, #0
 8004d84:	e00c      	b.n	8004da0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3330      	adds	r3, #48	@ 0x30
 8004d8a:	3352      	adds	r3, #82	@ 0x52
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe fe0d 	bl	80039ac <ld_dword>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a05      	ldr	r2, [pc, #20]	@ (8004dac <check_fs+0xa8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d101      	bne.n	8004d9e <check_fs+0x9a>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004d9e:	2302      	movs	r3, #2
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	00544146 	.word	0x00544146
 8004dac:	33544146 	.word	0x33544146

08004db0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b096      	sub	sp, #88	@ 0x58
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7ff ff58 	bl	8004c7a <get_ldnumber>
 8004dca:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	da01      	bge.n	8004dd6 <find_volume+0x26>
 8004dd2:	230b      	movs	r3, #11
 8004dd4:	e22d      	b.n	8005232 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004dd6:	4aa1      	ldr	r2, [pc, #644]	@ (800505c <find_volume+0x2ac>)
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <find_volume+0x3a>
 8004de6:	230c      	movs	r3, #12
 8004de8:	e223      	b.n	8005232 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01a      	beq.n	8004e36 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fe fd19 	bl	800383c <disk_status>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004e10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10c      	bne.n	8004e36 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <find_volume+0x82>
 8004e22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004e2e:	230a      	movs	r3, #10
 8004e30:	e1ff      	b.n	8005232 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004e32:	2300      	movs	r3, #0
 8004e34:	e1fd      	b.n	8005232 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e42:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe fd11 	bl	8003870 <disk_initialize>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004e54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004e60:	2303      	movs	r3, #3
 8004e62:	e1e6      	b.n	8005232 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <find_volume+0xca>
 8004e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004e76:	230a      	movs	r3, #10
 8004e78:	e1db      	b.n	8005232 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004e7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004e80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e82:	f7ff ff3f 	bl	8004d04 <check_fs>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d149      	bne.n	8004f28 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004e94:	2300      	movs	r3, #0
 8004e96:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e98:	e01e      	b.n	8004ed8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004ea8:	4413      	add	r3, r2
 8004eaa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	3304      	adds	r3, #4
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d006      	beq.n	8004ec4 <find_volume+0x114>
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	3308      	adds	r3, #8
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fe fd76 	bl	80039ac <ld_dword>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	e000      	b.n	8004ec6 <find_volume+0x116>
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	3358      	adds	r3, #88	@ 0x58
 8004ecc:	443b      	add	r3, r7
 8004ece:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d9dd      	bls.n	8004e9a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004ede:	2300      	movs	r3, #0
 8004ee0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <find_volume+0x13e>
 8004ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eea:	3b01      	subs	r3, #1
 8004eec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	3358      	adds	r3, #88	@ 0x58
 8004ef4:	443b      	add	r3, r7
 8004ef6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004efa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <find_volume+0x15e>
 8004f02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f06:	f7ff fefd 	bl	8004d04 <check_fs>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	e000      	b.n	8004f10 <find_volume+0x160>
 8004f0e:	2303      	movs	r3, #3
 8004f10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004f14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d905      	bls.n	8004f28 <find_volume+0x178>
 8004f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f1e:	3301      	adds	r3, #1
 8004f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d9e2      	bls.n	8004eee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004f28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d101      	bne.n	8004f34 <find_volume+0x184>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e17e      	b.n	8005232 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004f34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d901      	bls.n	8004f40 <find_volume+0x190>
 8004f3c:	230d      	movs	r3, #13
 8004f3e:	e178      	b.n	8005232 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	3330      	adds	r3, #48	@ 0x30
 8004f44:	330b      	adds	r3, #11
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fd18 	bl	800397c <ld_word>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f52:	d001      	beq.n	8004f58 <find_volume+0x1a8>
 8004f54:	230d      	movs	r3, #13
 8004f56:	e16c      	b.n	8005232 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5a:	3330      	adds	r3, #48	@ 0x30
 8004f5c:	3316      	adds	r3, #22
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fd0c 	bl	800397c <ld_word>
 8004f64:	4603      	mov	r3, r0
 8004f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <find_volume+0x1cc>
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f70:	3330      	adds	r3, #48	@ 0x30
 8004f72:	3324      	adds	r3, #36	@ 0x24
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fe fd19 	bl	80039ac <ld_dword>
 8004f7a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f80:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8e:	789b      	ldrb	r3, [r3, #2]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d005      	beq.n	8004fa0 <find_volume+0x1f0>
 8004f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f96:	789b      	ldrb	r3, [r3, #2]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d001      	beq.n	8004fa0 <find_volume+0x1f0>
 8004f9c:	230d      	movs	r3, #13
 8004f9e:	e148      	b.n	8005232 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa2:	789b      	ldrb	r3, [r3, #2]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fa8:	fb02 f303 	mul.w	r3, r2, r3
 8004fac:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbc:	895b      	ldrh	r3, [r3, #10]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d008      	beq.n	8004fd4 <find_volume+0x224>
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc4:	895b      	ldrh	r3, [r3, #10]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fca:	895b      	ldrh	r3, [r3, #10]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <find_volume+0x228>
 8004fd4:	230d      	movs	r3, #13
 8004fd6:	e12c      	b.n	8005232 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fda:	3330      	adds	r3, #48	@ 0x30
 8004fdc:	3311      	adds	r3, #17
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe fccc 	bl	800397c <ld_word>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fee:	891b      	ldrh	r3, [r3, #8]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <find_volume+0x24e>
 8004ffa:	230d      	movs	r3, #13
 8004ffc:	e119      	b.n	8005232 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005000:	3330      	adds	r3, #48	@ 0x30
 8005002:	3313      	adds	r3, #19
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe fcb9 	bl	800397c <ld_word>
 800500a:	4603      	mov	r3, r0
 800500c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800500e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <find_volume+0x272>
 8005014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005016:	3330      	adds	r3, #48	@ 0x30
 8005018:	3320      	adds	r3, #32
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fcc6 	bl	80039ac <ld_dword>
 8005020:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005024:	3330      	adds	r3, #48	@ 0x30
 8005026:	330e      	adds	r3, #14
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fca7 	bl	800397c <ld_word>
 800502e:	4603      	mov	r3, r0
 8005030:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005032:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <find_volume+0x28c>
 8005038:	230d      	movs	r3, #13
 800503a:	e0fa      	b.n	8005232 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800503c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800503e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005040:	4413      	add	r3, r2
 8005042:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005044:	8912      	ldrh	r2, [r2, #8]
 8005046:	0912      	lsrs	r2, r2, #4
 8005048:	b292      	uxth	r2, r2
 800504a:	4413      	add	r3, r2
 800504c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800504e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005052:	429a      	cmp	r2, r3
 8005054:	d204      	bcs.n	8005060 <find_volume+0x2b0>
 8005056:	230d      	movs	r3, #13
 8005058:	e0eb      	b.n	8005232 <find_volume+0x482>
 800505a:	bf00      	nop
 800505c:	200005bc 	.word	0x200005bc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005060:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005068:	8952      	ldrh	r2, [r2, #10]
 800506a:	fbb3 f3f2 	udiv	r3, r3, r2
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <find_volume+0x2ca>
 8005076:	230d      	movs	r3, #13
 8005078:	e0db      	b.n	8005232 <find_volume+0x482>
		fmt = FS_FAT32;
 800507a:	2303      	movs	r3, #3
 800507c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005086:	4293      	cmp	r3, r2
 8005088:	d802      	bhi.n	8005090 <find_volume+0x2e0>
 800508a:	2302      	movs	r3, #2
 800508c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005096:	4293      	cmp	r3, r2
 8005098:	d802      	bhi.n	80050a0 <find_volume+0x2f0>
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	1c9a      	adds	r2, r3, #2
 80050a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80050a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80050ac:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80050ae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80050b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050b2:	441a      	add	r2, r3
 80050b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80050b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80050ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050bc:	441a      	add	r2, r3
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80050c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d11e      	bne.n	8005108 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	3330      	adds	r3, #48	@ 0x30
 80050ce:	332a      	adds	r3, #42	@ 0x2a
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe fc53 	bl	800397c <ld_word>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <find_volume+0x330>
 80050dc:	230d      	movs	r3, #13
 80050de:	e0a8      	b.n	8005232 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80050e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e2:	891b      	ldrh	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <find_volume+0x33c>
 80050e8:	230d      	movs	r3, #13
 80050ea:	e0a2      	b.n	8005232 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80050ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ee:	3330      	adds	r3, #48	@ 0x30
 80050f0:	332c      	adds	r3, #44	@ 0x2c
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe fc5a 	bl	80039ac <ld_dword>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	647b      	str	r3, [r7, #68]	@ 0x44
 8005106:	e01f      	b.n	8005148 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	891b      	ldrh	r3, [r3, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <find_volume+0x364>
 8005110:	230d      	movs	r3, #13
 8005112:	e08e      	b.n	8005232 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005116:	6a1a      	ldr	r2, [r3, #32]
 8005118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511a:	441a      	add	r2, r3
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005120:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005124:	2b02      	cmp	r3, #2
 8005126:	d103      	bne.n	8005130 <find_volume+0x380>
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	e00a      	b.n	8005146 <find_volume+0x396>
 8005130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005132:	695a      	ldr	r2, [r3, #20]
 8005134:	4613      	mov	r3, r2
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4413      	add	r3, r2
 800513a:	085a      	lsrs	r2, r3, #1
 800513c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005146:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005152:	0a5b      	lsrs	r3, r3, #9
 8005154:	429a      	cmp	r2, r3
 8005156:	d201      	bcs.n	800515c <find_volume+0x3ac>
 8005158:	230d      	movs	r3, #13
 800515a:	e06a      	b.n	8005232 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800515c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005162:	611a      	str	r2, [r3, #16]
 8005164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516e:	2280      	movs	r2, #128	@ 0x80
 8005170:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005172:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005176:	2b03      	cmp	r3, #3
 8005178:	d149      	bne.n	800520e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800517a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517c:	3330      	adds	r3, #48	@ 0x30
 800517e:	3330      	adds	r3, #48	@ 0x30
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe fbfb 	bl	800397c <ld_word>
 8005186:	4603      	mov	r3, r0
 8005188:	2b01      	cmp	r3, #1
 800518a:	d140      	bne.n	800520e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800518c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800518e:	3301      	adds	r3, #1
 8005190:	4619      	mov	r1, r3
 8005192:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005194:	f7fe fea2 	bl	8003edc <move_window>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d137      	bne.n	800520e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800519e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a0:	2200      	movs	r2, #0
 80051a2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80051a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a6:	3330      	adds	r3, #48	@ 0x30
 80051a8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe fbe5 	bl	800397c <ld_word>
 80051b2:	4603      	mov	r3, r0
 80051b4:	461a      	mov	r2, r3
 80051b6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d127      	bne.n	800520e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	3330      	adds	r3, #48	@ 0x30
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe fbf2 	bl	80039ac <ld_dword>
 80051c8:	4603      	mov	r3, r0
 80051ca:	4a1c      	ldr	r2, [pc, #112]	@ (800523c <find_volume+0x48c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d11e      	bne.n	800520e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80051d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d2:	3330      	adds	r3, #48	@ 0x30
 80051d4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe fbe7 	bl	80039ac <ld_dword>
 80051de:	4603      	mov	r3, r0
 80051e0:	4a17      	ldr	r2, [pc, #92]	@ (8005240 <find_volume+0x490>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d113      	bne.n	800520e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	3330      	adds	r3, #48	@ 0x30
 80051ea:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fbdc 	bl	80039ac <ld_dword>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fc:	3330      	adds	r3, #48	@ 0x30
 80051fe:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fbd2 	bl	80039ac <ld_dword>
 8005208:	4602      	mov	r2, r0
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800520e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005210:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005214:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005216:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <find_volume+0x494>)
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	3301      	adds	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <find_volume+0x494>)
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	4b08      	ldr	r3, [pc, #32]	@ (8005244 <find_volume+0x494>)
 8005224:	881a      	ldrh	r2, [r3, #0]
 8005226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005228:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800522a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800522c:	f7fe fdee 	bl	8003e0c <clear_lock>
#endif
	return FR_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3758      	adds	r7, #88	@ 0x58
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	41615252 	.word	0x41615252
 8005240:	61417272 	.word	0x61417272
 8005244:	200005c0 	.word	0x200005c0

08005248 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005252:	2309      	movs	r3, #9
 8005254:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01c      	beq.n	8005296 <validate+0x4e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d018      	beq.n	8005296 <validate+0x4e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d013      	beq.n	8005296 <validate+0x4e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	889a      	ldrh	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	88db      	ldrh	r3, [r3, #6]
 8005278:	429a      	cmp	r2, r3
 800527a:	d10c      	bne.n	8005296 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fada 	bl	800383c <disk_status>
 8005288:	4603      	mov	r3, r0
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <validate+0x4e>
			res = FR_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d102      	bne.n	80052a2 <validate+0x5a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	e000      	b.n	80052a4 <validate+0x5c>
 80052a2:	2300      	movs	r3, #0
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	6013      	str	r3, [r2, #0]
	return res;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80052c6:	f107 0310 	add.w	r3, r7, #16
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fcd5 	bl	8004c7a <get_ldnumber>
 80052d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	da01      	bge.n	80052dc <f_mount+0x28>
 80052d8:	230b      	movs	r3, #11
 80052da:	e02b      	b.n	8005334 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80052dc:	4a17      	ldr	r2, [pc, #92]	@ (800533c <f_mount+0x88>)
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80052ec:	69b8      	ldr	r0, [r7, #24]
 80052ee:	f7fe fd8d 	bl	8003e0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	490d      	ldr	r1, [pc, #52]	@ (800533c <f_mount+0x88>)
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <f_mount+0x66>
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d001      	beq.n	800531e <f_mount+0x6a>
 800531a:	2300      	movs	r3, #0
 800531c:	e00a      	b.n	8005334 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800531e:	f107 010c 	add.w	r1, r7, #12
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	2200      	movs	r2, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fd41 	bl	8004db0 <find_volume>
 800532e:	4603      	mov	r3, r0
 8005330:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005332:	7dfb      	ldrb	r3, [r7, #23]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	200005bc 	.word	0x200005bc

08005340 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b098      	sub	sp, #96	@ 0x60
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <f_open+0x18>
 8005354:	2309      	movs	r3, #9
 8005356:	e1a9      	b.n	80056ac <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800535e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005360:	79fa      	ldrb	r2, [r7, #7]
 8005362:	f107 0110 	add.w	r1, r7, #16
 8005366:	f107 0308 	add.w	r3, r7, #8
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fd20 	bl	8004db0 <find_volume>
 8005370:	4603      	mov	r3, r0
 8005372:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005376:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800537a:	2b00      	cmp	r3, #0
 800537c:	f040 818d 	bne.w	800569a <f_open+0x35a>
		dj.obj.fs = fs;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	f107 0314 	add.w	r3, r7, #20
 800538a:	4611      	mov	r1, r2
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff fc03 	bl	8004b98 <follow_path>
 8005392:	4603      	mov	r3, r0
 8005394:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005398:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800539c:	2b00      	cmp	r3, #0
 800539e:	d118      	bne.n	80053d2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80053a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80053a4:	b25b      	sxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	da03      	bge.n	80053b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80053aa:	2306      	movs	r3, #6
 80053ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80053b0:	e00f      	b.n	80053d2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	bf8c      	ite	hi
 80053b8:	2301      	movhi	r3, #1
 80053ba:	2300      	movls	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	f107 0314 	add.w	r3, r7, #20
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe fbd8 	bl	8003b7c <chk_lock>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	f003 031c 	and.w	r3, r3, #28
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d07f      	beq.n	80054dc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80053dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d017      	beq.n	8005414 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80053e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d10e      	bne.n	800540a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80053ec:	f7fe fc22 	bl	8003c34 <enq_lock>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d006      	beq.n	8005404 <f_open+0xc4>
 80053f6:	f107 0314 	add.w	r3, r7, #20
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff fb06 	bl	8004a0c <dir_register>
 8005400:	4603      	mov	r3, r0
 8005402:	e000      	b.n	8005406 <f_open+0xc6>
 8005404:	2312      	movs	r3, #18
 8005406:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	f043 0308 	orr.w	r3, r3, #8
 8005410:	71fb      	strb	r3, [r7, #7]
 8005412:	e010      	b.n	8005436 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005414:	7ebb      	ldrb	r3, [r7, #26]
 8005416:	f003 0311 	and.w	r3, r3, #17
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <f_open+0xe6>
					res = FR_DENIED;
 800541e:	2307      	movs	r3, #7
 8005420:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005424:	e007      	b.n	8005436 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <f_open+0xf6>
 8005430:	2308      	movs	r3, #8
 8005432:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005436:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800543a:	2b00      	cmp	r3, #0
 800543c:	d168      	bne.n	8005510 <f_open+0x1d0>
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d063      	beq.n	8005510 <f_open+0x1d0>
				dw = GET_FATTIME();
 8005448:	f7fd fcc0 	bl	8002dcc <get_fattime>
 800544c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800544e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005450:	330e      	adds	r3, #14
 8005452:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe fae7 	bl	8003a28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800545a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545c:	3316      	adds	r3, #22
 800545e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005460:	4618      	mov	r0, r3
 8005462:	f7fe fae1 	bl	8003a28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005468:	330b      	adds	r3, #11
 800546a:	2220      	movs	r2, #32
 800546c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005472:	4611      	mov	r1, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff fa35 	bl	80048e4 <ld_clust>
 800547a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005480:	2200      	movs	r2, #0
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff fa4d 	bl	8004922 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548a:	331c      	adds	r3, #28
 800548c:	2100      	movs	r1, #0
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe faca 	bl	8003a28 <st_dword>
					fs->wflag = 1;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2201      	movs	r2, #1
 8005498:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800549a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d037      	beq.n	8005510 <f_open+0x1d0>
						dw = fs->winsect;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80054a6:	f107 0314 	add.w	r3, r7, #20
 80054aa:	2200      	movs	r2, #0
 80054ac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe ff60 	bl	8004374 <remove_chain>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80054ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d126      	bne.n	8005510 <f_open+0x1d0>
							res = move_window(fs, dw);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe fd08 	bl	8003edc <move_window>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054d6:	3a01      	subs	r2, #1
 80054d8:	60da      	str	r2, [r3, #12]
 80054da:	e019      	b.n	8005510 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80054dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d115      	bne.n	8005510 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80054e4:	7ebb      	ldrb	r3, [r7, #26]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <f_open+0x1b6>
					res = FR_NO_FILE;
 80054ee:	2304      	movs	r3, #4
 80054f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80054f4:	e00c      	b.n	8005510 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <f_open+0x1d0>
 8005500:	7ebb      	ldrb	r3, [r7, #26]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <f_open+0x1d0>
						res = FR_DENIED;
 800550a:	2307      	movs	r3, #7
 800550c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005510:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005514:	2b00      	cmp	r3, #0
 8005516:	d126      	bne.n	8005566 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005528:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005532:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	2b01      	cmp	r3, #1
 800553c:	bf8c      	ite	hi
 800553e:	2301      	movhi	r3, #1
 8005540:	2300      	movls	r3, #0
 8005542:	b2db      	uxtb	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	f107 0314 	add.w	r3, r7, #20
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fb93 	bl	8003c78 <inc_lock>
 8005552:	4602      	mov	r2, r0
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <f_open+0x226>
 8005560:	2302      	movs	r3, #2
 8005562:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005566:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800556a:	2b00      	cmp	r3, #0
 800556c:	f040 8095 	bne.w	800569a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff f9b4 	bl	80048e4 <ld_clust>
 800557c:	4602      	mov	r2, r0
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005584:	331c      	adds	r3, #28
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fa10 	bl	80039ac <ld_dword>
 800558c:	4602      	mov	r2, r0
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	88da      	ldrh	r2, [r3, #6]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	79fa      	ldrb	r2, [r7, #7]
 80055aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3330      	adds	r3, #48	@ 0x30
 80055c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055c6:	2100      	movs	r1, #0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fa7a 	bl	8003ac2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d060      	beq.n	800569a <f_open+0x35a>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d05c      	beq.n	800569a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	895b      	ldrh	r3, [r3, #10]
 80055ec:	025b      	lsls	r3, r3, #9
 80055ee:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80055fc:	e016      	b.n	800562c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe fd25 	bl	8004052 <get_fat>
 8005608:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800560a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800560c:	2b01      	cmp	r3, #1
 800560e:	d802      	bhi.n	8005616 <f_open+0x2d6>
 8005610:	2302      	movs	r3, #2
 8005612:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005616:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800561c:	d102      	bne.n	8005624 <f_open+0x2e4>
 800561e:	2301      	movs	r3, #1
 8005620:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005624:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	657b      	str	r3, [r7, #84]	@ 0x54
 800562c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005630:	2b00      	cmp	r3, #0
 8005632:	d103      	bne.n	800563c <f_open+0x2fc>
 8005634:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005638:	429a      	cmp	r2, r3
 800563a:	d8e0      	bhi.n	80055fe <f_open+0x2be>
				}
				fp->clust = clst;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005640:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005642:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005646:	2b00      	cmp	r3, #0
 8005648:	d127      	bne.n	800569a <f_open+0x35a>
 800564a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800564c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005650:	2b00      	cmp	r3, #0
 8005652:	d022      	beq.n	800569a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe fcdb 	bl	8004014 <clust2sect>
 800565e:	6478      	str	r0, [r7, #68]	@ 0x44
 8005660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <f_open+0x32e>
						res = FR_INT_ERR;
 8005666:	2302      	movs	r3, #2
 8005668:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800566c:	e015      	b.n	800569a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800566e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005670:	0a5a      	lsrs	r2, r3, #9
 8005672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005674:	441a      	add	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	7858      	ldrb	r0, [r3, #1]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	2301      	movs	r3, #1
 800568a:	f7fe f919 	bl	80038c0 <disk_read>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <f_open+0x35a>
 8005694:	2301      	movs	r3, #1
 8005696:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800569a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <f_open+0x368>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80056a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3760      	adds	r7, #96	@ 0x60
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08e      	sub	sp, #56	@ 0x38
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f107 0214 	add.w	r2, r7, #20
 80056d2:	4611      	mov	r1, r2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff fdb7 	bl	8005248 <validate>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80056e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <f_read+0x44>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	7d5b      	ldrb	r3, [r3, #21]
 80056ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80056f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <f_read+0x4a>
 80056f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056fc:	e115      	b.n	800592a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	7d1b      	ldrb	r3, [r3, #20]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <f_read+0x5a>
 800570a:	2307      	movs	r3, #7
 800570c:	e10d      	b.n	800592a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	429a      	cmp	r2, r3
 8005720:	f240 80fe 	bls.w	8005920 <f_read+0x26c>
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005728:	e0fa      	b.n	8005920 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005732:	2b00      	cmp	r3, #0
 8005734:	f040 80c6 	bne.w	80058c4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	0a5b      	lsrs	r3, r3, #9
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	8952      	ldrh	r2, [r2, #10]
 8005742:	3a01      	subs	r2, #1
 8005744:	4013      	ands	r3, r2
 8005746:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d12f      	bne.n	80057ae <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	633b      	str	r3, [r7, #48]	@ 0x30
 800575c:	e013      	b.n	8005786 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	4619      	mov	r1, r3
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7fe fefe 	bl	800456e <clmt_clust>
 8005772:	6338      	str	r0, [r7, #48]	@ 0x30
 8005774:	e007      	b.n	8005786 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f7fe fc67 	bl	8004052 <get_fat>
 8005784:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	2b01      	cmp	r3, #1
 800578a:	d804      	bhi.n	8005796 <f_read+0xe2>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2202      	movs	r2, #2
 8005790:	755a      	strb	r2, [r3, #21]
 8005792:	2302      	movs	r3, #2
 8005794:	e0c9      	b.n	800592a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800579c:	d104      	bne.n	80057a8 <f_read+0xf4>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	755a      	strb	r2, [r3, #21]
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0c0      	b.n	800592a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f7fe fc2c 	bl	8004014 <clust2sect>
 80057bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <f_read+0x11a>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2202      	movs	r2, #2
 80057c8:	755a      	strb	r2, [r3, #21]
 80057ca:	2302      	movs	r3, #2
 80057cc:	e0ad      	b.n	800592a <f_read+0x276>
			sect += csect;
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	0a5b      	lsrs	r3, r3, #9
 80057da:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d039      	beq.n	8005856 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e6:	4413      	add	r3, r2
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	8952      	ldrh	r2, [r2, #10]
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d905      	bls.n	80057fc <f_read+0x148>
					cc = fs->csize - csect;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	895b      	ldrh	r3, [r3, #10]
 80057f4:	461a      	mov	r2, r3
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	7858      	ldrb	r0, [r3, #1]
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005806:	f7fe f85b 	bl	80038c0 <disk_read>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <f_read+0x166>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	755a      	strb	r2, [r3, #21]
 8005816:	2301      	movs	r3, #1
 8005818:	e087      	b.n	800592a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	7d1b      	ldrb	r3, [r3, #20]
 800581e:	b25b      	sxtb	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	da14      	bge.n	800584e <f_read+0x19a>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800582e:	429a      	cmp	r2, r3
 8005830:	d90d      	bls.n	800584e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1a      	ldr	r2, [r3, #32]
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	025b      	lsls	r3, r3, #9
 800583c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800583e:	18d0      	adds	r0, r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3330      	adds	r3, #48	@ 0x30
 8005844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005848:	4619      	mov	r1, r3
 800584a:	f7fe f919 	bl	8003a80 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800584e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005850:	025b      	lsls	r3, r3, #9
 8005852:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005854:	e050      	b.n	80058f8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	429a      	cmp	r2, r3
 800585e:	d02e      	beq.n	80058be <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	7d1b      	ldrb	r3, [r3, #20]
 8005864:	b25b      	sxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	da18      	bge.n	800589c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	7858      	ldrb	r0, [r3, #1]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	2301      	movs	r3, #1
 800587a:	f7fe f841 	bl	8003900 <disk_write>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <f_read+0x1da>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	755a      	strb	r2, [r3, #21]
 800588a:	2301      	movs	r3, #1
 800588c:	e04d      	b.n	800592a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	7d1b      	ldrb	r3, [r3, #20]
 8005892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005896:	b2da      	uxtb	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	7858      	ldrb	r0, [r3, #1]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80058a6:	2301      	movs	r3, #1
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	f7fe f809 	bl	80038c0 <disk_read>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <f_read+0x20a>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	755a      	strb	r2, [r3, #21]
 80058ba:	2301      	movs	r3, #1
 80058bc:	e035      	b.n	800592a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058cc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80058d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80058d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d901      	bls.n	80058de <f_read+0x22a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ec:	4413      	add	r3, r2
 80058ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058f0:	4619      	mov	r1, r3
 80058f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058f4:	f7fe f8c4 	bl	8003a80 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80058f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	4413      	add	r3, r2
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005906:	441a      	add	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	619a      	str	r2, [r3, #24]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005912:	441a      	add	r2, r3
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f47f af01 	bne.w	800572a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3738      	adds	r7, #56	@ 0x38
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b08c      	sub	sp, #48	@ 0x30
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	607a      	str	r2, [r7, #4]
 800593e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f107 0210 	add.w	r2, r7, #16
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff fc78 	bl	8005248 <validate>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800595e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005962:	2b00      	cmp	r3, #0
 8005964:	d107      	bne.n	8005976 <f_write+0x44>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	7d5b      	ldrb	r3, [r3, #21]
 800596a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800596e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <f_write+0x4a>
 8005976:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800597a:	e14b      	b.n	8005c14 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	7d1b      	ldrb	r3, [r3, #20]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <f_write+0x5a>
 8005988:	2307      	movs	r3, #7
 800598a:	e143      	b.n	8005c14 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	699a      	ldr	r2, [r3, #24]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	441a      	add	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	429a      	cmp	r2, r3
 800599a:	f080 812d 	bcs.w	8005bf8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80059a6:	e127      	b.n	8005bf8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 80e3 	bne.w	8005b7c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	0a5b      	lsrs	r3, r3, #9
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	8952      	ldrh	r2, [r2, #10]
 80059c0:	3a01      	subs	r2, #1
 80059c2:	4013      	ands	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d143      	bne.n	8005a54 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10c      	bne.n	80059ee <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80059da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d11a      	bne.n	8005a16 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2100      	movs	r1, #0
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fe fd2a 	bl	800443e <create_chain>
 80059ea:	62b8      	str	r0, [r7, #40]	@ 0x28
 80059ec:	e013      	b.n	8005a16 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	4619      	mov	r1, r3
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7fe fdb6 	bl	800456e <clmt_clust>
 8005a02:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005a04:	e007      	b.n	8005a16 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f7fe fd15 	bl	800443e <create_chain>
 8005a14:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80f2 	beq.w	8005c02 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d104      	bne.n	8005a2e <f_write+0xfc>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2202      	movs	r2, #2
 8005a28:	755a      	strb	r2, [r3, #21]
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e0f2      	b.n	8005c14 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a34:	d104      	bne.n	8005a40 <f_write+0x10e>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	755a      	strb	r2, [r3, #21]
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0e9      	b.n	8005c14 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a44:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d102      	bne.n	8005a54 <f_write+0x122>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a52:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	7d1b      	ldrb	r3, [r3, #20]
 8005a58:	b25b      	sxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da18      	bge.n	8005a90 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	7858      	ldrb	r0, [r3, #1]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a1a      	ldr	r2, [r3, #32]
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f7fd ff47 	bl	8003900 <disk_write>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <f_write+0x150>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	755a      	strb	r2, [r3, #21]
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e0c8      	b.n	8005c14 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	7d1b      	ldrb	r3, [r3, #20]
 8005a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f7fe fabb 	bl	8004014 <clust2sect>
 8005a9e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <f_write+0x17e>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	755a      	strb	r2, [r3, #21]
 8005aac:	2302      	movs	r3, #2
 8005aae:	e0b1      	b.n	8005c14 <f_write+0x2e2>
			sect += csect;
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	0a5b      	lsrs	r3, r3, #9
 8005abc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d03c      	beq.n	8005b3e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	4413      	add	r3, r2
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	8952      	ldrh	r2, [r2, #10]
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d905      	bls.n	8005ade <f_write+0x1ac>
					cc = fs->csize - csect;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	895b      	ldrh	r3, [r3, #10]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	7858      	ldrb	r0, [r3, #1]
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	69f9      	ldr	r1, [r7, #28]
 8005ae8:	f7fd ff0a 	bl	8003900 <disk_write>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d004      	beq.n	8005afc <f_write+0x1ca>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	755a      	strb	r2, [r3, #21]
 8005af8:	2301      	movs	r3, #1
 8005afa:	e08b      	b.n	8005c14 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	6a3a      	ldr	r2, [r7, #32]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d915      	bls.n	8005b36 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1a      	ldr	r2, [r3, #32]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	025b      	lsls	r3, r3, #9
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b22:	4619      	mov	r1, r3
 8005b24:	f7fd ffac 	bl	8003a80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	7d1b      	ldrb	r3, [r3, #20]
 8005b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	025b      	lsls	r3, r3, #9
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8005b3c:	e03f      	b.n	8005bbe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d016      	beq.n	8005b76 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	699a      	ldr	r2, [r3, #24]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d210      	bcs.n	8005b76 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	7858      	ldrb	r0, [r3, #1]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005b5e:	2301      	movs	r3, #1
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	f7fd fead 	bl	80038c0 <disk_read>
 8005b66:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	755a      	strb	r2, [r3, #21]
 8005b72:	2301      	movs	r3, #1
 8005b74:	e04e      	b.n	8005c14 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b84:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d901      	bls.n	8005b96 <f_write+0x264>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba4:	4413      	add	r3, r2
 8005ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba8:	69f9      	ldr	r1, [r7, #28]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fd ff68 	bl	8003a80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	7d1b      	ldrb	r3, [r3, #20]
 8005bb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	4413      	add	r3, r2
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	441a      	add	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	619a      	str	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	bf38      	it	cc
 8005bde:	461a      	movcc	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	441a      	add	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f47f aed4 	bne.w	80059a8 <f_write+0x76>
 8005c00:	e000      	b.n	8005c04 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005c02:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	7d1b      	ldrb	r3, [r3, #20]
 8005c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3730      	adds	r7, #48	@ 0x30
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f107 0208 	add.w	r2, r7, #8
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff fb0b 	bl	8005248 <validate>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d168      	bne.n	8005d0e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	7d1b      	ldrb	r3, [r3, #20]
 8005c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d062      	beq.n	8005d0e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	7d1b      	ldrb	r3, [r3, #20]
 8005c4c:	b25b      	sxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	da15      	bge.n	8005c7e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	7858      	ldrb	r0, [r3, #1]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1a      	ldr	r2, [r3, #32]
 8005c60:	2301      	movs	r3, #1
 8005c62:	f7fd fe4d 	bl	8003900 <disk_write>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <f_sync+0x54>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e04f      	b.n	8005d10 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7d1b      	ldrb	r3, [r3, #20]
 8005c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005c7e:	f7fd f8a5 	bl	8002dcc <get_fattime>
 8005c82:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7fe f925 	bl	8003edc <move_window>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d138      	bne.n	8005d0e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	330b      	adds	r3, #11
 8005ca6:	781a      	ldrb	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	330b      	adds	r3, #11
 8005cac:	f042 0220 	orr.w	r2, r2, #32
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	f7fe fe2f 	bl	8004922 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f103 021c 	add.w	r2, r3, #28
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f7fd fea9 	bl	8003a28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3316      	adds	r3, #22
 8005cda:	6939      	ldr	r1, [r7, #16]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fd fea3 	bl	8003a28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3312      	adds	r3, #18
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fd fe82 	bl	80039f2 <st_word>
					fs->wflag = 1;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe f91e 	bl	8003f38 <sync_fs>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	7d1b      	ldrb	r3, [r3, #20]
 8005d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff ff7b 	bl	8005c1c <f_sync>
 8005d26:	4603      	mov	r3, r0
 8005d28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d118      	bne.n	8005d62 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f107 0208 	add.w	r2, r7, #8
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff fa85 	bl	8005248 <validate>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10c      	bne.n	8005d62 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fe f821 	bl	8003d94 <dec_lock>
 8005d52:	4603      	mov	r3, r0
 8005d54:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005d80:	e01c      	b.n	8005dbc <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005d82:	f107 0310 	add.w	r3, r7, #16
 8005d86:	f107 0114 	add.w	r1, r7, #20
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff fc91 	bl	80056b4 <f_read>
		if (rc != 1) break;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d117      	bne.n	8005dc8 <f_gets+0x5c>
		c = s[0];
 8005d98:	7d3b      	ldrb	r3, [r7, #20]
 8005d9a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	2b0d      	cmp	r3, #13
 8005da0:	d00b      	beq.n	8005dba <f_gets+0x4e>
		*p++ = c;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	61ba      	str	r2, [r7, #24]
 8005da8:	7dfa      	ldrb	r2, [r7, #23]
 8005daa:	701a      	strb	r2, [r3, #0]
		n++;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	3301      	adds	r3, #1
 8005db0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	2b0a      	cmp	r3, #10
 8005db6:	d009      	beq.n	8005dcc <f_gets+0x60>
 8005db8:	e000      	b.n	8005dbc <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005dba:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	dbdd      	blt.n	8005d82 <f_gets+0x16>
 8005dc6:	e002      	b.n	8005dce <f_gets+0x62>
		if (rc != 1) break;
 8005dc8:	bf00      	nop
 8005dca:	e000      	b.n	8005dce <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8005dcc:	bf00      	nop
	}
	*p = 0;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <f_gets+0x72>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	e000      	b.n	8005de0 <f_gets+0x74>
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3720      	adds	r7, #32
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	4613      	mov	r3, r2
 8005df4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005df6:	2301      	movs	r3, #1
 8005df8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e00:	7a5b      	ldrb	r3, [r3, #9]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d131      	bne.n	8005e6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005e08:	4b1c      	ldr	r3, [pc, #112]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e0a:	7a5b      	ldrb	r3, [r3, #9]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4b1a      	ldr	r3, [pc, #104]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e12:	2100      	movs	r1, #0
 8005e14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005e16:	4b19      	ldr	r3, [pc, #100]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e18:	7a5b      	ldrb	r3, [r3, #9]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4a17      	ldr	r2, [pc, #92]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005e26:	4b15      	ldr	r3, [pc, #84]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e28:	7a5b      	ldrb	r3, [r3, #9]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b13      	ldr	r3, [pc, #76]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e30:	4413      	add	r3, r2
 8005e32:	79fa      	ldrb	r2, [r7, #7]
 8005e34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005e36:	4b11      	ldr	r3, [pc, #68]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e38:	7a5b      	ldrb	r3, [r3, #9]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	b2d1      	uxtb	r1, r2
 8005e40:	4a0e      	ldr	r2, [pc, #56]	@ (8005e7c <FATFS_LinkDriverEx+0x94>)
 8005e42:	7251      	strb	r1, [r2, #9]
 8005e44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005e46:	7dbb      	ldrb	r3, [r7, #22]
 8005e48:	3330      	adds	r3, #48	@ 0x30
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3301      	adds	r3, #1
 8005e54:	223a      	movs	r2, #58	@ 0x3a
 8005e56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	222f      	movs	r2, #47	@ 0x2f
 8005e5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	3303      	adds	r3, #3
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	200005e4 	.word	0x200005e4

08005e80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7ff ffaa 	bl	8005de8 <FATFS_LinkDriverEx>
 8005e94:	4603      	mov	r3, r0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <std>:
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	b510      	push	{r4, lr}
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8005eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eae:	6083      	str	r3, [r0, #8]
 8005eb0:	8181      	strh	r1, [r0, #12]
 8005eb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005eb4:	81c2      	strh	r2, [r0, #14]
 8005eb6:	6183      	str	r3, [r0, #24]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	2208      	movs	r2, #8
 8005ebc:	305c      	adds	r0, #92	@ 0x5c
 8005ebe:	f000 f9f9 	bl	80062b4 <memset>
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef8 <std+0x58>)
 8005ec4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <std+0x5c>)
 8005ec8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eca:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <std+0x60>)
 8005ecc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ece:	4b0d      	ldr	r3, [pc, #52]	@ (8005f04 <std+0x64>)
 8005ed0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f08 <std+0x68>)
 8005ed4:	6224      	str	r4, [r4, #32]
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	d006      	beq.n	8005ee8 <std+0x48>
 8005eda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ede:	4294      	cmp	r4, r2
 8005ee0:	d002      	beq.n	8005ee8 <std+0x48>
 8005ee2:	33d0      	adds	r3, #208	@ 0xd0
 8005ee4:	429c      	cmp	r4, r3
 8005ee6:	d105      	bne.n	8005ef4 <std+0x54>
 8005ee8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ef0:	f000 ba58 	b.w	80063a4 <__retarget_lock_init_recursive>
 8005ef4:	bd10      	pop	{r4, pc}
 8005ef6:	bf00      	nop
 8005ef8:	08006105 	.word	0x08006105
 8005efc:	08006127 	.word	0x08006127
 8005f00:	0800615f 	.word	0x0800615f
 8005f04:	08006183 	.word	0x08006183
 8005f08:	200005f0 	.word	0x200005f0

08005f0c <stdio_exit_handler>:
 8005f0c:	4a02      	ldr	r2, [pc, #8]	@ (8005f18 <stdio_exit_handler+0xc>)
 8005f0e:	4903      	ldr	r1, [pc, #12]	@ (8005f1c <stdio_exit_handler+0x10>)
 8005f10:	4803      	ldr	r0, [pc, #12]	@ (8005f20 <stdio_exit_handler+0x14>)
 8005f12:	f000 b869 	b.w	8005fe8 <_fwalk_sglue>
 8005f16:	bf00      	nop
 8005f18:	20000024 	.word	0x20000024
 8005f1c:	08006c45 	.word	0x08006c45
 8005f20:	20000034 	.word	0x20000034

08005f24 <cleanup_stdio>:
 8005f24:	6841      	ldr	r1, [r0, #4]
 8005f26:	4b0c      	ldr	r3, [pc, #48]	@ (8005f58 <cleanup_stdio+0x34>)
 8005f28:	4299      	cmp	r1, r3
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	d001      	beq.n	8005f34 <cleanup_stdio+0x10>
 8005f30:	f000 fe88 	bl	8006c44 <_fflush_r>
 8005f34:	68a1      	ldr	r1, [r4, #8]
 8005f36:	4b09      	ldr	r3, [pc, #36]	@ (8005f5c <cleanup_stdio+0x38>)
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	d002      	beq.n	8005f42 <cleanup_stdio+0x1e>
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 fe81 	bl	8006c44 <_fflush_r>
 8005f42:	68e1      	ldr	r1, [r4, #12]
 8005f44:	4b06      	ldr	r3, [pc, #24]	@ (8005f60 <cleanup_stdio+0x3c>)
 8005f46:	4299      	cmp	r1, r3
 8005f48:	d004      	beq.n	8005f54 <cleanup_stdio+0x30>
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f50:	f000 be78 	b.w	8006c44 <_fflush_r>
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	bf00      	nop
 8005f58:	200005f0 	.word	0x200005f0
 8005f5c:	20000658 	.word	0x20000658
 8005f60:	200006c0 	.word	0x200006c0

08005f64 <global_stdio_init.part.0>:
 8005f64:	b510      	push	{r4, lr}
 8005f66:	4b0b      	ldr	r3, [pc, #44]	@ (8005f94 <global_stdio_init.part.0+0x30>)
 8005f68:	4c0b      	ldr	r4, [pc, #44]	@ (8005f98 <global_stdio_init.part.0+0x34>)
 8005f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f9c <global_stdio_init.part.0+0x38>)
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	4620      	mov	r0, r4
 8005f70:	2200      	movs	r2, #0
 8005f72:	2104      	movs	r1, #4
 8005f74:	f7ff ff94 	bl	8005ea0 <std>
 8005f78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	2109      	movs	r1, #9
 8005f80:	f7ff ff8e 	bl	8005ea0 <std>
 8005f84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f88:	2202      	movs	r2, #2
 8005f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f8e:	2112      	movs	r1, #18
 8005f90:	f7ff bf86 	b.w	8005ea0 <std>
 8005f94:	20000728 	.word	0x20000728
 8005f98:	200005f0 	.word	0x200005f0
 8005f9c:	08005f0d 	.word	0x08005f0d

08005fa0 <__sfp_lock_acquire>:
 8005fa0:	4801      	ldr	r0, [pc, #4]	@ (8005fa8 <__sfp_lock_acquire+0x8>)
 8005fa2:	f000 ba00 	b.w	80063a6 <__retarget_lock_acquire_recursive>
 8005fa6:	bf00      	nop
 8005fa8:	20000731 	.word	0x20000731

08005fac <__sfp_lock_release>:
 8005fac:	4801      	ldr	r0, [pc, #4]	@ (8005fb4 <__sfp_lock_release+0x8>)
 8005fae:	f000 b9fb 	b.w	80063a8 <__retarget_lock_release_recursive>
 8005fb2:	bf00      	nop
 8005fb4:	20000731 	.word	0x20000731

08005fb8 <__sinit>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	4604      	mov	r4, r0
 8005fbc:	f7ff fff0 	bl	8005fa0 <__sfp_lock_acquire>
 8005fc0:	6a23      	ldr	r3, [r4, #32]
 8005fc2:	b11b      	cbz	r3, 8005fcc <__sinit+0x14>
 8005fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc8:	f7ff bff0 	b.w	8005fac <__sfp_lock_release>
 8005fcc:	4b04      	ldr	r3, [pc, #16]	@ (8005fe0 <__sinit+0x28>)
 8005fce:	6223      	str	r3, [r4, #32]
 8005fd0:	4b04      	ldr	r3, [pc, #16]	@ (8005fe4 <__sinit+0x2c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1f5      	bne.n	8005fc4 <__sinit+0xc>
 8005fd8:	f7ff ffc4 	bl	8005f64 <global_stdio_init.part.0>
 8005fdc:	e7f2      	b.n	8005fc4 <__sinit+0xc>
 8005fde:	bf00      	nop
 8005fe0:	08005f25 	.word	0x08005f25
 8005fe4:	20000728 	.word	0x20000728

08005fe8 <_fwalk_sglue>:
 8005fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fec:	4607      	mov	r7, r0
 8005fee:	4688      	mov	r8, r1
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	2600      	movs	r6, #0
 8005ff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8005ffc:	d505      	bpl.n	800600a <_fwalk_sglue+0x22>
 8005ffe:	6824      	ldr	r4, [r4, #0]
 8006000:	2c00      	cmp	r4, #0
 8006002:	d1f7      	bne.n	8005ff4 <_fwalk_sglue+0xc>
 8006004:	4630      	mov	r0, r6
 8006006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800600a:	89ab      	ldrh	r3, [r5, #12]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d907      	bls.n	8006020 <_fwalk_sglue+0x38>
 8006010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006014:	3301      	adds	r3, #1
 8006016:	d003      	beq.n	8006020 <_fwalk_sglue+0x38>
 8006018:	4629      	mov	r1, r5
 800601a:	4638      	mov	r0, r7
 800601c:	47c0      	blx	r8
 800601e:	4306      	orrs	r6, r0
 8006020:	3568      	adds	r5, #104	@ 0x68
 8006022:	e7e9      	b.n	8005ff8 <_fwalk_sglue+0x10>

08006024 <iprintf>:
 8006024:	b40f      	push	{r0, r1, r2, r3}
 8006026:	b507      	push	{r0, r1, r2, lr}
 8006028:	4906      	ldr	r1, [pc, #24]	@ (8006044 <iprintf+0x20>)
 800602a:	ab04      	add	r3, sp, #16
 800602c:	6808      	ldr	r0, [r1, #0]
 800602e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006032:	6881      	ldr	r1, [r0, #8]
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	f000 fadb 	bl	80065f0 <_vfiprintf_r>
 800603a:	b003      	add	sp, #12
 800603c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006040:	b004      	add	sp, #16
 8006042:	4770      	bx	lr
 8006044:	20000030 	.word	0x20000030

08006048 <_puts_r>:
 8006048:	6a03      	ldr	r3, [r0, #32]
 800604a:	b570      	push	{r4, r5, r6, lr}
 800604c:	6884      	ldr	r4, [r0, #8]
 800604e:	4605      	mov	r5, r0
 8006050:	460e      	mov	r6, r1
 8006052:	b90b      	cbnz	r3, 8006058 <_puts_r+0x10>
 8006054:	f7ff ffb0 	bl	8005fb8 <__sinit>
 8006058:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800605a:	07db      	lsls	r3, r3, #31
 800605c:	d405      	bmi.n	800606a <_puts_r+0x22>
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	0598      	lsls	r0, r3, #22
 8006062:	d402      	bmi.n	800606a <_puts_r+0x22>
 8006064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006066:	f000 f99e 	bl	80063a6 <__retarget_lock_acquire_recursive>
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	0719      	lsls	r1, r3, #28
 800606e:	d502      	bpl.n	8006076 <_puts_r+0x2e>
 8006070:	6923      	ldr	r3, [r4, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d135      	bne.n	80060e2 <_puts_r+0x9a>
 8006076:	4621      	mov	r1, r4
 8006078:	4628      	mov	r0, r5
 800607a:	f000 f8c5 	bl	8006208 <__swsetup_r>
 800607e:	b380      	cbz	r0, 80060e2 <_puts_r+0x9a>
 8006080:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006084:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006086:	07da      	lsls	r2, r3, #31
 8006088:	d405      	bmi.n	8006096 <_puts_r+0x4e>
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	059b      	lsls	r3, r3, #22
 800608e:	d402      	bmi.n	8006096 <_puts_r+0x4e>
 8006090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006092:	f000 f989 	bl	80063a8 <__retarget_lock_release_recursive>
 8006096:	4628      	mov	r0, r5
 8006098:	bd70      	pop	{r4, r5, r6, pc}
 800609a:	2b00      	cmp	r3, #0
 800609c:	da04      	bge.n	80060a8 <_puts_r+0x60>
 800609e:	69a2      	ldr	r2, [r4, #24]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	dc17      	bgt.n	80060d4 <_puts_r+0x8c>
 80060a4:	290a      	cmp	r1, #10
 80060a6:	d015      	beq.n	80060d4 <_puts_r+0x8c>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	6022      	str	r2, [r4, #0]
 80060ae:	7019      	strb	r1, [r3, #0]
 80060b0:	68a3      	ldr	r3, [r4, #8]
 80060b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060b6:	3b01      	subs	r3, #1
 80060b8:	60a3      	str	r3, [r4, #8]
 80060ba:	2900      	cmp	r1, #0
 80060bc:	d1ed      	bne.n	800609a <_puts_r+0x52>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	da11      	bge.n	80060e6 <_puts_r+0x9e>
 80060c2:	4622      	mov	r2, r4
 80060c4:	210a      	movs	r1, #10
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 f85f 	bl	800618a <__swbuf_r>
 80060cc:	3001      	adds	r0, #1
 80060ce:	d0d7      	beq.n	8006080 <_puts_r+0x38>
 80060d0:	250a      	movs	r5, #10
 80060d2:	e7d7      	b.n	8006084 <_puts_r+0x3c>
 80060d4:	4622      	mov	r2, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 f857 	bl	800618a <__swbuf_r>
 80060dc:	3001      	adds	r0, #1
 80060de:	d1e7      	bne.n	80060b0 <_puts_r+0x68>
 80060e0:	e7ce      	b.n	8006080 <_puts_r+0x38>
 80060e2:	3e01      	subs	r6, #1
 80060e4:	e7e4      	b.n	80060b0 <_puts_r+0x68>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	6022      	str	r2, [r4, #0]
 80060ec:	220a      	movs	r2, #10
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e7ee      	b.n	80060d0 <_puts_r+0x88>
	...

080060f4 <puts>:
 80060f4:	4b02      	ldr	r3, [pc, #8]	@ (8006100 <puts+0xc>)
 80060f6:	4601      	mov	r1, r0
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	f7ff bfa5 	b.w	8006048 <_puts_r>
 80060fe:	bf00      	nop
 8006100:	20000030 	.word	0x20000030

08006104 <__sread>:
 8006104:	b510      	push	{r4, lr}
 8006106:	460c      	mov	r4, r1
 8006108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610c:	f000 f8fc 	bl	8006308 <_read_r>
 8006110:	2800      	cmp	r0, #0
 8006112:	bfab      	itete	ge
 8006114:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006116:	89a3      	ldrhlt	r3, [r4, #12]
 8006118:	181b      	addge	r3, r3, r0
 800611a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800611e:	bfac      	ite	ge
 8006120:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006122:	81a3      	strhlt	r3, [r4, #12]
 8006124:	bd10      	pop	{r4, pc}

08006126 <__swrite>:
 8006126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612a:	461f      	mov	r7, r3
 800612c:	898b      	ldrh	r3, [r1, #12]
 800612e:	05db      	lsls	r3, r3, #23
 8006130:	4605      	mov	r5, r0
 8006132:	460c      	mov	r4, r1
 8006134:	4616      	mov	r6, r2
 8006136:	d505      	bpl.n	8006144 <__swrite+0x1e>
 8006138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800613c:	2302      	movs	r3, #2
 800613e:	2200      	movs	r2, #0
 8006140:	f000 f8d0 	bl	80062e4 <_lseek_r>
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800614a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800614e:	81a3      	strh	r3, [r4, #12]
 8006150:	4632      	mov	r2, r6
 8006152:	463b      	mov	r3, r7
 8006154:	4628      	mov	r0, r5
 8006156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800615a:	f000 b8e7 	b.w	800632c <_write_r>

0800615e <__sseek>:
 800615e:	b510      	push	{r4, lr}
 8006160:	460c      	mov	r4, r1
 8006162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006166:	f000 f8bd 	bl	80062e4 <_lseek_r>
 800616a:	1c43      	adds	r3, r0, #1
 800616c:	89a3      	ldrh	r3, [r4, #12]
 800616e:	bf15      	itete	ne
 8006170:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006172:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006176:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800617a:	81a3      	strheq	r3, [r4, #12]
 800617c:	bf18      	it	ne
 800617e:	81a3      	strhne	r3, [r4, #12]
 8006180:	bd10      	pop	{r4, pc}

08006182 <__sclose>:
 8006182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006186:	f000 b89d 	b.w	80062c4 <_close_r>

0800618a <__swbuf_r>:
 800618a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618c:	460e      	mov	r6, r1
 800618e:	4614      	mov	r4, r2
 8006190:	4605      	mov	r5, r0
 8006192:	b118      	cbz	r0, 800619c <__swbuf_r+0x12>
 8006194:	6a03      	ldr	r3, [r0, #32]
 8006196:	b90b      	cbnz	r3, 800619c <__swbuf_r+0x12>
 8006198:	f7ff ff0e 	bl	8005fb8 <__sinit>
 800619c:	69a3      	ldr	r3, [r4, #24]
 800619e:	60a3      	str	r3, [r4, #8]
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	071a      	lsls	r2, r3, #28
 80061a4:	d501      	bpl.n	80061aa <__swbuf_r+0x20>
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	b943      	cbnz	r3, 80061bc <__swbuf_r+0x32>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 f82b 	bl	8006208 <__swsetup_r>
 80061b2:	b118      	cbz	r0, 80061bc <__swbuf_r+0x32>
 80061b4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80061b8:	4638      	mov	r0, r7
 80061ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	6922      	ldr	r2, [r4, #16]
 80061c0:	1a98      	subs	r0, r3, r2
 80061c2:	6963      	ldr	r3, [r4, #20]
 80061c4:	b2f6      	uxtb	r6, r6
 80061c6:	4283      	cmp	r3, r0
 80061c8:	4637      	mov	r7, r6
 80061ca:	dc05      	bgt.n	80061d8 <__swbuf_r+0x4e>
 80061cc:	4621      	mov	r1, r4
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 fd38 	bl	8006c44 <_fflush_r>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d1ed      	bne.n	80061b4 <__swbuf_r+0x2a>
 80061d8:	68a3      	ldr	r3, [r4, #8]
 80061da:	3b01      	subs	r3, #1
 80061dc:	60a3      	str	r3, [r4, #8]
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	6022      	str	r2, [r4, #0]
 80061e4:	701e      	strb	r6, [r3, #0]
 80061e6:	6962      	ldr	r2, [r4, #20]
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d004      	beq.n	80061f8 <__swbuf_r+0x6e>
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	07db      	lsls	r3, r3, #31
 80061f2:	d5e1      	bpl.n	80061b8 <__swbuf_r+0x2e>
 80061f4:	2e0a      	cmp	r6, #10
 80061f6:	d1df      	bne.n	80061b8 <__swbuf_r+0x2e>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4628      	mov	r0, r5
 80061fc:	f000 fd22 	bl	8006c44 <_fflush_r>
 8006200:	2800      	cmp	r0, #0
 8006202:	d0d9      	beq.n	80061b8 <__swbuf_r+0x2e>
 8006204:	e7d6      	b.n	80061b4 <__swbuf_r+0x2a>
	...

08006208 <__swsetup_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4b29      	ldr	r3, [pc, #164]	@ (80062b0 <__swsetup_r+0xa8>)
 800620c:	4605      	mov	r5, r0
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	460c      	mov	r4, r1
 8006212:	b118      	cbz	r0, 800621c <__swsetup_r+0x14>
 8006214:	6a03      	ldr	r3, [r0, #32]
 8006216:	b90b      	cbnz	r3, 800621c <__swsetup_r+0x14>
 8006218:	f7ff fece 	bl	8005fb8 <__sinit>
 800621c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006220:	0719      	lsls	r1, r3, #28
 8006222:	d422      	bmi.n	800626a <__swsetup_r+0x62>
 8006224:	06da      	lsls	r2, r3, #27
 8006226:	d407      	bmi.n	8006238 <__swsetup_r+0x30>
 8006228:	2209      	movs	r2, #9
 800622a:	602a      	str	r2, [r5, #0]
 800622c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006230:	81a3      	strh	r3, [r4, #12]
 8006232:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006236:	e033      	b.n	80062a0 <__swsetup_r+0x98>
 8006238:	0758      	lsls	r0, r3, #29
 800623a:	d512      	bpl.n	8006262 <__swsetup_r+0x5a>
 800623c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800623e:	b141      	cbz	r1, 8006252 <__swsetup_r+0x4a>
 8006240:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006244:	4299      	cmp	r1, r3
 8006246:	d002      	beq.n	800624e <__swsetup_r+0x46>
 8006248:	4628      	mov	r0, r5
 800624a:	f000 f8af 	bl	80063ac <_free_r>
 800624e:	2300      	movs	r3, #0
 8006250:	6363      	str	r3, [r4, #52]	@ 0x34
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006258:	81a3      	strh	r3, [r4, #12]
 800625a:	2300      	movs	r3, #0
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	f043 0308 	orr.w	r3, r3, #8
 8006268:	81a3      	strh	r3, [r4, #12]
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	b94b      	cbnz	r3, 8006282 <__swsetup_r+0x7a>
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006278:	d003      	beq.n	8006282 <__swsetup_r+0x7a>
 800627a:	4621      	mov	r1, r4
 800627c:	4628      	mov	r0, r5
 800627e:	f000 fd2f 	bl	8006ce0 <__smakebuf_r>
 8006282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006286:	f013 0201 	ands.w	r2, r3, #1
 800628a:	d00a      	beq.n	80062a2 <__swsetup_r+0x9a>
 800628c:	2200      	movs	r2, #0
 800628e:	60a2      	str	r2, [r4, #8]
 8006290:	6962      	ldr	r2, [r4, #20]
 8006292:	4252      	negs	r2, r2
 8006294:	61a2      	str	r2, [r4, #24]
 8006296:	6922      	ldr	r2, [r4, #16]
 8006298:	b942      	cbnz	r2, 80062ac <__swsetup_r+0xa4>
 800629a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800629e:	d1c5      	bne.n	800622c <__swsetup_r+0x24>
 80062a0:	bd38      	pop	{r3, r4, r5, pc}
 80062a2:	0799      	lsls	r1, r3, #30
 80062a4:	bf58      	it	pl
 80062a6:	6962      	ldrpl	r2, [r4, #20]
 80062a8:	60a2      	str	r2, [r4, #8]
 80062aa:	e7f4      	b.n	8006296 <__swsetup_r+0x8e>
 80062ac:	2000      	movs	r0, #0
 80062ae:	e7f7      	b.n	80062a0 <__swsetup_r+0x98>
 80062b0:	20000030 	.word	0x20000030

080062b4 <memset>:
 80062b4:	4402      	add	r2, r0
 80062b6:	4603      	mov	r3, r0
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d100      	bne.n	80062be <memset+0xa>
 80062bc:	4770      	bx	lr
 80062be:	f803 1b01 	strb.w	r1, [r3], #1
 80062c2:	e7f9      	b.n	80062b8 <memset+0x4>

080062c4 <_close_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d06      	ldr	r5, [pc, #24]	@ (80062e0 <_close_r+0x1c>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fa fcd2 	bl	8000c78 <_close>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_close_r+0x1a>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_close_r+0x1a>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	2000072c 	.word	0x2000072c

080062e4 <_lseek_r>:
 80062e4:	b538      	push	{r3, r4, r5, lr}
 80062e6:	4d07      	ldr	r5, [pc, #28]	@ (8006304 <_lseek_r+0x20>)
 80062e8:	4604      	mov	r4, r0
 80062ea:	4608      	mov	r0, r1
 80062ec:	4611      	mov	r1, r2
 80062ee:	2200      	movs	r2, #0
 80062f0:	602a      	str	r2, [r5, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	f7fa fce7 	bl	8000cc6 <_lseek>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_lseek_r+0x1e>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_lseek_r+0x1e>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	2000072c 	.word	0x2000072c

08006308 <_read_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4d07      	ldr	r5, [pc, #28]	@ (8006328 <_read_r+0x20>)
 800630c:	4604      	mov	r4, r0
 800630e:	4608      	mov	r0, r1
 8006310:	4611      	mov	r1, r2
 8006312:	2200      	movs	r2, #0
 8006314:	602a      	str	r2, [r5, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f7fa fc91 	bl	8000c3e <_read>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_read_r+0x1e>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	b103      	cbz	r3, 8006326 <_read_r+0x1e>
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	2000072c 	.word	0x2000072c

0800632c <_write_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4d07      	ldr	r5, [pc, #28]	@ (800634c <_write_r+0x20>)
 8006330:	4604      	mov	r4, r0
 8006332:	4608      	mov	r0, r1
 8006334:	4611      	mov	r1, r2
 8006336:	2200      	movs	r2, #0
 8006338:	602a      	str	r2, [r5, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	f7fa fa9c 	bl	8000878 <_write>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d102      	bne.n	800634a <_write_r+0x1e>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	b103      	cbz	r3, 800634a <_write_r+0x1e>
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	2000072c 	.word	0x2000072c

08006350 <__errno>:
 8006350:	4b01      	ldr	r3, [pc, #4]	@ (8006358 <__errno+0x8>)
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	20000030 	.word	0x20000030

0800635c <__libc_init_array>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	4d0d      	ldr	r5, [pc, #52]	@ (8006394 <__libc_init_array+0x38>)
 8006360:	4c0d      	ldr	r4, [pc, #52]	@ (8006398 <__libc_init_array+0x3c>)
 8006362:	1b64      	subs	r4, r4, r5
 8006364:	10a4      	asrs	r4, r4, #2
 8006366:	2600      	movs	r6, #0
 8006368:	42a6      	cmp	r6, r4
 800636a:	d109      	bne.n	8006380 <__libc_init_array+0x24>
 800636c:	4d0b      	ldr	r5, [pc, #44]	@ (800639c <__libc_init_array+0x40>)
 800636e:	4c0c      	ldr	r4, [pc, #48]	@ (80063a0 <__libc_init_array+0x44>)
 8006370:	f000 fd24 	bl	8006dbc <_init>
 8006374:	1b64      	subs	r4, r4, r5
 8006376:	10a4      	asrs	r4, r4, #2
 8006378:	2600      	movs	r6, #0
 800637a:	42a6      	cmp	r6, r4
 800637c:	d105      	bne.n	800638a <__libc_init_array+0x2e>
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	f855 3b04 	ldr.w	r3, [r5], #4
 8006384:	4798      	blx	r3
 8006386:	3601      	adds	r6, #1
 8006388:	e7ee      	b.n	8006368 <__libc_init_array+0xc>
 800638a:	f855 3b04 	ldr.w	r3, [r5], #4
 800638e:	4798      	blx	r3
 8006390:	3601      	adds	r6, #1
 8006392:	e7f2      	b.n	800637a <__libc_init_array+0x1e>
 8006394:	080070d0 	.word	0x080070d0
 8006398:	080070d0 	.word	0x080070d0
 800639c:	080070d0 	.word	0x080070d0
 80063a0:	080070d4 	.word	0x080070d4

080063a4 <__retarget_lock_init_recursive>:
 80063a4:	4770      	bx	lr

080063a6 <__retarget_lock_acquire_recursive>:
 80063a6:	4770      	bx	lr

080063a8 <__retarget_lock_release_recursive>:
 80063a8:	4770      	bx	lr
	...

080063ac <_free_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	4605      	mov	r5, r0
 80063b0:	2900      	cmp	r1, #0
 80063b2:	d041      	beq.n	8006438 <_free_r+0x8c>
 80063b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b8:	1f0c      	subs	r4, r1, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bfb8      	it	lt
 80063be:	18e4      	addlt	r4, r4, r3
 80063c0:	f000 f8e0 	bl	8006584 <__malloc_lock>
 80063c4:	4a1d      	ldr	r2, [pc, #116]	@ (800643c <_free_r+0x90>)
 80063c6:	6813      	ldr	r3, [r2, #0]
 80063c8:	b933      	cbnz	r3, 80063d8 <_free_r+0x2c>
 80063ca:	6063      	str	r3, [r4, #4]
 80063cc:	6014      	str	r4, [r2, #0]
 80063ce:	4628      	mov	r0, r5
 80063d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063d4:	f000 b8dc 	b.w	8006590 <__malloc_unlock>
 80063d8:	42a3      	cmp	r3, r4
 80063da:	d908      	bls.n	80063ee <_free_r+0x42>
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	1821      	adds	r1, r4, r0
 80063e0:	428b      	cmp	r3, r1
 80063e2:	bf01      	itttt	eq
 80063e4:	6819      	ldreq	r1, [r3, #0]
 80063e6:	685b      	ldreq	r3, [r3, #4]
 80063e8:	1809      	addeq	r1, r1, r0
 80063ea:	6021      	streq	r1, [r4, #0]
 80063ec:	e7ed      	b.n	80063ca <_free_r+0x1e>
 80063ee:	461a      	mov	r2, r3
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	b10b      	cbz	r3, 80063f8 <_free_r+0x4c>
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	d9fa      	bls.n	80063ee <_free_r+0x42>
 80063f8:	6811      	ldr	r1, [r2, #0]
 80063fa:	1850      	adds	r0, r2, r1
 80063fc:	42a0      	cmp	r0, r4
 80063fe:	d10b      	bne.n	8006418 <_free_r+0x6c>
 8006400:	6820      	ldr	r0, [r4, #0]
 8006402:	4401      	add	r1, r0
 8006404:	1850      	adds	r0, r2, r1
 8006406:	4283      	cmp	r3, r0
 8006408:	6011      	str	r1, [r2, #0]
 800640a:	d1e0      	bne.n	80063ce <_free_r+0x22>
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	6053      	str	r3, [r2, #4]
 8006412:	4408      	add	r0, r1
 8006414:	6010      	str	r0, [r2, #0]
 8006416:	e7da      	b.n	80063ce <_free_r+0x22>
 8006418:	d902      	bls.n	8006420 <_free_r+0x74>
 800641a:	230c      	movs	r3, #12
 800641c:	602b      	str	r3, [r5, #0]
 800641e:	e7d6      	b.n	80063ce <_free_r+0x22>
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	1821      	adds	r1, r4, r0
 8006424:	428b      	cmp	r3, r1
 8006426:	bf04      	itt	eq
 8006428:	6819      	ldreq	r1, [r3, #0]
 800642a:	685b      	ldreq	r3, [r3, #4]
 800642c:	6063      	str	r3, [r4, #4]
 800642e:	bf04      	itt	eq
 8006430:	1809      	addeq	r1, r1, r0
 8006432:	6021      	streq	r1, [r4, #0]
 8006434:	6054      	str	r4, [r2, #4]
 8006436:	e7ca      	b.n	80063ce <_free_r+0x22>
 8006438:	bd38      	pop	{r3, r4, r5, pc}
 800643a:	bf00      	nop
 800643c:	20000738 	.word	0x20000738

08006440 <sbrk_aligned>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	4e0f      	ldr	r6, [pc, #60]	@ (8006480 <sbrk_aligned+0x40>)
 8006444:	460c      	mov	r4, r1
 8006446:	6831      	ldr	r1, [r6, #0]
 8006448:	4605      	mov	r5, r0
 800644a:	b911      	cbnz	r1, 8006452 <sbrk_aligned+0x12>
 800644c:	f000 fca6 	bl	8006d9c <_sbrk_r>
 8006450:	6030      	str	r0, [r6, #0]
 8006452:	4621      	mov	r1, r4
 8006454:	4628      	mov	r0, r5
 8006456:	f000 fca1 	bl	8006d9c <_sbrk_r>
 800645a:	1c43      	adds	r3, r0, #1
 800645c:	d103      	bne.n	8006466 <sbrk_aligned+0x26>
 800645e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006462:	4620      	mov	r0, r4
 8006464:	bd70      	pop	{r4, r5, r6, pc}
 8006466:	1cc4      	adds	r4, r0, #3
 8006468:	f024 0403 	bic.w	r4, r4, #3
 800646c:	42a0      	cmp	r0, r4
 800646e:	d0f8      	beq.n	8006462 <sbrk_aligned+0x22>
 8006470:	1a21      	subs	r1, r4, r0
 8006472:	4628      	mov	r0, r5
 8006474:	f000 fc92 	bl	8006d9c <_sbrk_r>
 8006478:	3001      	adds	r0, #1
 800647a:	d1f2      	bne.n	8006462 <sbrk_aligned+0x22>
 800647c:	e7ef      	b.n	800645e <sbrk_aligned+0x1e>
 800647e:	bf00      	nop
 8006480:	20000734 	.word	0x20000734

08006484 <_malloc_r>:
 8006484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006488:	1ccd      	adds	r5, r1, #3
 800648a:	f025 0503 	bic.w	r5, r5, #3
 800648e:	3508      	adds	r5, #8
 8006490:	2d0c      	cmp	r5, #12
 8006492:	bf38      	it	cc
 8006494:	250c      	movcc	r5, #12
 8006496:	2d00      	cmp	r5, #0
 8006498:	4606      	mov	r6, r0
 800649a:	db01      	blt.n	80064a0 <_malloc_r+0x1c>
 800649c:	42a9      	cmp	r1, r5
 800649e:	d904      	bls.n	80064aa <_malloc_r+0x26>
 80064a0:	230c      	movs	r3, #12
 80064a2:	6033      	str	r3, [r6, #0]
 80064a4:	2000      	movs	r0, #0
 80064a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006580 <_malloc_r+0xfc>
 80064ae:	f000 f869 	bl	8006584 <__malloc_lock>
 80064b2:	f8d8 3000 	ldr.w	r3, [r8]
 80064b6:	461c      	mov	r4, r3
 80064b8:	bb44      	cbnz	r4, 800650c <_malloc_r+0x88>
 80064ba:	4629      	mov	r1, r5
 80064bc:	4630      	mov	r0, r6
 80064be:	f7ff ffbf 	bl	8006440 <sbrk_aligned>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	4604      	mov	r4, r0
 80064c6:	d158      	bne.n	800657a <_malloc_r+0xf6>
 80064c8:	f8d8 4000 	ldr.w	r4, [r8]
 80064cc:	4627      	mov	r7, r4
 80064ce:	2f00      	cmp	r7, #0
 80064d0:	d143      	bne.n	800655a <_malloc_r+0xd6>
 80064d2:	2c00      	cmp	r4, #0
 80064d4:	d04b      	beq.n	800656e <_malloc_r+0xea>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	4639      	mov	r1, r7
 80064da:	4630      	mov	r0, r6
 80064dc:	eb04 0903 	add.w	r9, r4, r3
 80064e0:	f000 fc5c 	bl	8006d9c <_sbrk_r>
 80064e4:	4581      	cmp	r9, r0
 80064e6:	d142      	bne.n	800656e <_malloc_r+0xea>
 80064e8:	6821      	ldr	r1, [r4, #0]
 80064ea:	1a6d      	subs	r5, r5, r1
 80064ec:	4629      	mov	r1, r5
 80064ee:	4630      	mov	r0, r6
 80064f0:	f7ff ffa6 	bl	8006440 <sbrk_aligned>
 80064f4:	3001      	adds	r0, #1
 80064f6:	d03a      	beq.n	800656e <_malloc_r+0xea>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	442b      	add	r3, r5
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	bb62      	cbnz	r2, 8006560 <_malloc_r+0xdc>
 8006506:	f8c8 7000 	str.w	r7, [r8]
 800650a:	e00f      	b.n	800652c <_malloc_r+0xa8>
 800650c:	6822      	ldr	r2, [r4, #0]
 800650e:	1b52      	subs	r2, r2, r5
 8006510:	d420      	bmi.n	8006554 <_malloc_r+0xd0>
 8006512:	2a0b      	cmp	r2, #11
 8006514:	d917      	bls.n	8006546 <_malloc_r+0xc2>
 8006516:	1961      	adds	r1, r4, r5
 8006518:	42a3      	cmp	r3, r4
 800651a:	6025      	str	r5, [r4, #0]
 800651c:	bf18      	it	ne
 800651e:	6059      	strne	r1, [r3, #4]
 8006520:	6863      	ldr	r3, [r4, #4]
 8006522:	bf08      	it	eq
 8006524:	f8c8 1000 	streq.w	r1, [r8]
 8006528:	5162      	str	r2, [r4, r5]
 800652a:	604b      	str	r3, [r1, #4]
 800652c:	4630      	mov	r0, r6
 800652e:	f000 f82f 	bl	8006590 <__malloc_unlock>
 8006532:	f104 000b 	add.w	r0, r4, #11
 8006536:	1d23      	adds	r3, r4, #4
 8006538:	f020 0007 	bic.w	r0, r0, #7
 800653c:	1ac2      	subs	r2, r0, r3
 800653e:	bf1c      	itt	ne
 8006540:	1a1b      	subne	r3, r3, r0
 8006542:	50a3      	strne	r3, [r4, r2]
 8006544:	e7af      	b.n	80064a6 <_malloc_r+0x22>
 8006546:	6862      	ldr	r2, [r4, #4]
 8006548:	42a3      	cmp	r3, r4
 800654a:	bf0c      	ite	eq
 800654c:	f8c8 2000 	streq.w	r2, [r8]
 8006550:	605a      	strne	r2, [r3, #4]
 8006552:	e7eb      	b.n	800652c <_malloc_r+0xa8>
 8006554:	4623      	mov	r3, r4
 8006556:	6864      	ldr	r4, [r4, #4]
 8006558:	e7ae      	b.n	80064b8 <_malloc_r+0x34>
 800655a:	463c      	mov	r4, r7
 800655c:	687f      	ldr	r7, [r7, #4]
 800655e:	e7b6      	b.n	80064ce <_malloc_r+0x4a>
 8006560:	461a      	mov	r2, r3
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	42a3      	cmp	r3, r4
 8006566:	d1fb      	bne.n	8006560 <_malloc_r+0xdc>
 8006568:	2300      	movs	r3, #0
 800656a:	6053      	str	r3, [r2, #4]
 800656c:	e7de      	b.n	800652c <_malloc_r+0xa8>
 800656e:	230c      	movs	r3, #12
 8006570:	6033      	str	r3, [r6, #0]
 8006572:	4630      	mov	r0, r6
 8006574:	f000 f80c 	bl	8006590 <__malloc_unlock>
 8006578:	e794      	b.n	80064a4 <_malloc_r+0x20>
 800657a:	6005      	str	r5, [r0, #0]
 800657c:	e7d6      	b.n	800652c <_malloc_r+0xa8>
 800657e:	bf00      	nop
 8006580:	20000738 	.word	0x20000738

08006584 <__malloc_lock>:
 8006584:	4801      	ldr	r0, [pc, #4]	@ (800658c <__malloc_lock+0x8>)
 8006586:	f7ff bf0e 	b.w	80063a6 <__retarget_lock_acquire_recursive>
 800658a:	bf00      	nop
 800658c:	20000730 	.word	0x20000730

08006590 <__malloc_unlock>:
 8006590:	4801      	ldr	r0, [pc, #4]	@ (8006598 <__malloc_unlock+0x8>)
 8006592:	f7ff bf09 	b.w	80063a8 <__retarget_lock_release_recursive>
 8006596:	bf00      	nop
 8006598:	20000730 	.word	0x20000730

0800659c <__sfputc_r>:
 800659c:	6893      	ldr	r3, [r2, #8]
 800659e:	3b01      	subs	r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	b410      	push	{r4}
 80065a4:	6093      	str	r3, [r2, #8]
 80065a6:	da08      	bge.n	80065ba <__sfputc_r+0x1e>
 80065a8:	6994      	ldr	r4, [r2, #24]
 80065aa:	42a3      	cmp	r3, r4
 80065ac:	db01      	blt.n	80065b2 <__sfputc_r+0x16>
 80065ae:	290a      	cmp	r1, #10
 80065b0:	d103      	bne.n	80065ba <__sfputc_r+0x1e>
 80065b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065b6:	f7ff bde8 	b.w	800618a <__swbuf_r>
 80065ba:	6813      	ldr	r3, [r2, #0]
 80065bc:	1c58      	adds	r0, r3, #1
 80065be:	6010      	str	r0, [r2, #0]
 80065c0:	7019      	strb	r1, [r3, #0]
 80065c2:	4608      	mov	r0, r1
 80065c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <__sfputs_r>:
 80065ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065cc:	4606      	mov	r6, r0
 80065ce:	460f      	mov	r7, r1
 80065d0:	4614      	mov	r4, r2
 80065d2:	18d5      	adds	r5, r2, r3
 80065d4:	42ac      	cmp	r4, r5
 80065d6:	d101      	bne.n	80065dc <__sfputs_r+0x12>
 80065d8:	2000      	movs	r0, #0
 80065da:	e007      	b.n	80065ec <__sfputs_r+0x22>
 80065dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e0:	463a      	mov	r2, r7
 80065e2:	4630      	mov	r0, r6
 80065e4:	f7ff ffda 	bl	800659c <__sfputc_r>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d1f3      	bne.n	80065d4 <__sfputs_r+0xa>
 80065ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065f0 <_vfiprintf_r>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	460d      	mov	r5, r1
 80065f6:	b09d      	sub	sp, #116	@ 0x74
 80065f8:	4614      	mov	r4, r2
 80065fa:	4698      	mov	r8, r3
 80065fc:	4606      	mov	r6, r0
 80065fe:	b118      	cbz	r0, 8006608 <_vfiprintf_r+0x18>
 8006600:	6a03      	ldr	r3, [r0, #32]
 8006602:	b90b      	cbnz	r3, 8006608 <_vfiprintf_r+0x18>
 8006604:	f7ff fcd8 	bl	8005fb8 <__sinit>
 8006608:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800660a:	07d9      	lsls	r1, r3, #31
 800660c:	d405      	bmi.n	800661a <_vfiprintf_r+0x2a>
 800660e:	89ab      	ldrh	r3, [r5, #12]
 8006610:	059a      	lsls	r2, r3, #22
 8006612:	d402      	bmi.n	800661a <_vfiprintf_r+0x2a>
 8006614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006616:	f7ff fec6 	bl	80063a6 <__retarget_lock_acquire_recursive>
 800661a:	89ab      	ldrh	r3, [r5, #12]
 800661c:	071b      	lsls	r3, r3, #28
 800661e:	d501      	bpl.n	8006624 <_vfiprintf_r+0x34>
 8006620:	692b      	ldr	r3, [r5, #16]
 8006622:	b99b      	cbnz	r3, 800664c <_vfiprintf_r+0x5c>
 8006624:	4629      	mov	r1, r5
 8006626:	4630      	mov	r0, r6
 8006628:	f7ff fdee 	bl	8006208 <__swsetup_r>
 800662c:	b170      	cbz	r0, 800664c <_vfiprintf_r+0x5c>
 800662e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006630:	07dc      	lsls	r4, r3, #31
 8006632:	d504      	bpl.n	800663e <_vfiprintf_r+0x4e>
 8006634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006638:	b01d      	add	sp, #116	@ 0x74
 800663a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	0598      	lsls	r0, r3, #22
 8006642:	d4f7      	bmi.n	8006634 <_vfiprintf_r+0x44>
 8006644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006646:	f7ff feaf 	bl	80063a8 <__retarget_lock_release_recursive>
 800664a:	e7f3      	b.n	8006634 <_vfiprintf_r+0x44>
 800664c:	2300      	movs	r3, #0
 800664e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006650:	2320      	movs	r3, #32
 8006652:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006656:	f8cd 800c 	str.w	r8, [sp, #12]
 800665a:	2330      	movs	r3, #48	@ 0x30
 800665c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800680c <_vfiprintf_r+0x21c>
 8006660:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006664:	f04f 0901 	mov.w	r9, #1
 8006668:	4623      	mov	r3, r4
 800666a:	469a      	mov	sl, r3
 800666c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006670:	b10a      	cbz	r2, 8006676 <_vfiprintf_r+0x86>
 8006672:	2a25      	cmp	r2, #37	@ 0x25
 8006674:	d1f9      	bne.n	800666a <_vfiprintf_r+0x7a>
 8006676:	ebba 0b04 	subs.w	fp, sl, r4
 800667a:	d00b      	beq.n	8006694 <_vfiprintf_r+0xa4>
 800667c:	465b      	mov	r3, fp
 800667e:	4622      	mov	r2, r4
 8006680:	4629      	mov	r1, r5
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff ffa1 	bl	80065ca <__sfputs_r>
 8006688:	3001      	adds	r0, #1
 800668a:	f000 80a7 	beq.w	80067dc <_vfiprintf_r+0x1ec>
 800668e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006690:	445a      	add	r2, fp
 8006692:	9209      	str	r2, [sp, #36]	@ 0x24
 8006694:	f89a 3000 	ldrb.w	r3, [sl]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 809f 	beq.w	80067dc <_vfiprintf_r+0x1ec>
 800669e:	2300      	movs	r3, #0
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066a8:	f10a 0a01 	add.w	sl, sl, #1
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80066b6:	4654      	mov	r4, sl
 80066b8:	2205      	movs	r2, #5
 80066ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066be:	4853      	ldr	r0, [pc, #332]	@ (800680c <_vfiprintf_r+0x21c>)
 80066c0:	f7f9 fdae 	bl	8000220 <memchr>
 80066c4:	9a04      	ldr	r2, [sp, #16]
 80066c6:	b9d8      	cbnz	r0, 8006700 <_vfiprintf_r+0x110>
 80066c8:	06d1      	lsls	r1, r2, #27
 80066ca:	bf44      	itt	mi
 80066cc:	2320      	movmi	r3, #32
 80066ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066d2:	0713      	lsls	r3, r2, #28
 80066d4:	bf44      	itt	mi
 80066d6:	232b      	movmi	r3, #43	@ 0x2b
 80066d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066dc:	f89a 3000 	ldrb.w	r3, [sl]
 80066e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066e2:	d015      	beq.n	8006710 <_vfiprintf_r+0x120>
 80066e4:	9a07      	ldr	r2, [sp, #28]
 80066e6:	4654      	mov	r4, sl
 80066e8:	2000      	movs	r0, #0
 80066ea:	f04f 0c0a 	mov.w	ip, #10
 80066ee:	4621      	mov	r1, r4
 80066f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f4:	3b30      	subs	r3, #48	@ 0x30
 80066f6:	2b09      	cmp	r3, #9
 80066f8:	d94b      	bls.n	8006792 <_vfiprintf_r+0x1a2>
 80066fa:	b1b0      	cbz	r0, 800672a <_vfiprintf_r+0x13a>
 80066fc:	9207      	str	r2, [sp, #28]
 80066fe:	e014      	b.n	800672a <_vfiprintf_r+0x13a>
 8006700:	eba0 0308 	sub.w	r3, r0, r8
 8006704:	fa09 f303 	lsl.w	r3, r9, r3
 8006708:	4313      	orrs	r3, r2
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	46a2      	mov	sl, r4
 800670e:	e7d2      	b.n	80066b6 <_vfiprintf_r+0xc6>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	1d19      	adds	r1, r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	9103      	str	r1, [sp, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	bfbb      	ittet	lt
 800671c:	425b      	neglt	r3, r3
 800671e:	f042 0202 	orrlt.w	r2, r2, #2
 8006722:	9307      	strge	r3, [sp, #28]
 8006724:	9307      	strlt	r3, [sp, #28]
 8006726:	bfb8      	it	lt
 8006728:	9204      	strlt	r2, [sp, #16]
 800672a:	7823      	ldrb	r3, [r4, #0]
 800672c:	2b2e      	cmp	r3, #46	@ 0x2e
 800672e:	d10a      	bne.n	8006746 <_vfiprintf_r+0x156>
 8006730:	7863      	ldrb	r3, [r4, #1]
 8006732:	2b2a      	cmp	r3, #42	@ 0x2a
 8006734:	d132      	bne.n	800679c <_vfiprintf_r+0x1ac>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	1d1a      	adds	r2, r3, #4
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	9203      	str	r2, [sp, #12]
 800673e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006742:	3402      	adds	r4, #2
 8006744:	9305      	str	r3, [sp, #20]
 8006746:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800681c <_vfiprintf_r+0x22c>
 800674a:	7821      	ldrb	r1, [r4, #0]
 800674c:	2203      	movs	r2, #3
 800674e:	4650      	mov	r0, sl
 8006750:	f7f9 fd66 	bl	8000220 <memchr>
 8006754:	b138      	cbz	r0, 8006766 <_vfiprintf_r+0x176>
 8006756:	9b04      	ldr	r3, [sp, #16]
 8006758:	eba0 000a 	sub.w	r0, r0, sl
 800675c:	2240      	movs	r2, #64	@ 0x40
 800675e:	4082      	lsls	r2, r0
 8006760:	4313      	orrs	r3, r2
 8006762:	3401      	adds	r4, #1
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676a:	4829      	ldr	r0, [pc, #164]	@ (8006810 <_vfiprintf_r+0x220>)
 800676c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006770:	2206      	movs	r2, #6
 8006772:	f7f9 fd55 	bl	8000220 <memchr>
 8006776:	2800      	cmp	r0, #0
 8006778:	d03f      	beq.n	80067fa <_vfiprintf_r+0x20a>
 800677a:	4b26      	ldr	r3, [pc, #152]	@ (8006814 <_vfiprintf_r+0x224>)
 800677c:	bb1b      	cbnz	r3, 80067c6 <_vfiprintf_r+0x1d6>
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	3307      	adds	r3, #7
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	3308      	adds	r3, #8
 8006788:	9303      	str	r3, [sp, #12]
 800678a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800678c:	443b      	add	r3, r7
 800678e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006790:	e76a      	b.n	8006668 <_vfiprintf_r+0x78>
 8006792:	fb0c 3202 	mla	r2, ip, r2, r3
 8006796:	460c      	mov	r4, r1
 8006798:	2001      	movs	r0, #1
 800679a:	e7a8      	b.n	80066ee <_vfiprintf_r+0xfe>
 800679c:	2300      	movs	r3, #0
 800679e:	3401      	adds	r4, #1
 80067a0:	9305      	str	r3, [sp, #20]
 80067a2:	4619      	mov	r1, r3
 80067a4:	f04f 0c0a 	mov.w	ip, #10
 80067a8:	4620      	mov	r0, r4
 80067aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ae:	3a30      	subs	r2, #48	@ 0x30
 80067b0:	2a09      	cmp	r2, #9
 80067b2:	d903      	bls.n	80067bc <_vfiprintf_r+0x1cc>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0c6      	beq.n	8006746 <_vfiprintf_r+0x156>
 80067b8:	9105      	str	r1, [sp, #20]
 80067ba:	e7c4      	b.n	8006746 <_vfiprintf_r+0x156>
 80067bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80067c0:	4604      	mov	r4, r0
 80067c2:	2301      	movs	r3, #1
 80067c4:	e7f0      	b.n	80067a8 <_vfiprintf_r+0x1b8>
 80067c6:	ab03      	add	r3, sp, #12
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	462a      	mov	r2, r5
 80067cc:	4b12      	ldr	r3, [pc, #72]	@ (8006818 <_vfiprintf_r+0x228>)
 80067ce:	a904      	add	r1, sp, #16
 80067d0:	4630      	mov	r0, r6
 80067d2:	f3af 8000 	nop.w
 80067d6:	4607      	mov	r7, r0
 80067d8:	1c78      	adds	r0, r7, #1
 80067da:	d1d6      	bne.n	800678a <_vfiprintf_r+0x19a>
 80067dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067de:	07d9      	lsls	r1, r3, #31
 80067e0:	d405      	bmi.n	80067ee <_vfiprintf_r+0x1fe>
 80067e2:	89ab      	ldrh	r3, [r5, #12]
 80067e4:	059a      	lsls	r2, r3, #22
 80067e6:	d402      	bmi.n	80067ee <_vfiprintf_r+0x1fe>
 80067e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ea:	f7ff fddd 	bl	80063a8 <__retarget_lock_release_recursive>
 80067ee:	89ab      	ldrh	r3, [r5, #12]
 80067f0:	065b      	lsls	r3, r3, #25
 80067f2:	f53f af1f 	bmi.w	8006634 <_vfiprintf_r+0x44>
 80067f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067f8:	e71e      	b.n	8006638 <_vfiprintf_r+0x48>
 80067fa:	ab03      	add	r3, sp, #12
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	462a      	mov	r2, r5
 8006800:	4b05      	ldr	r3, [pc, #20]	@ (8006818 <_vfiprintf_r+0x228>)
 8006802:	a904      	add	r1, sp, #16
 8006804:	4630      	mov	r0, r6
 8006806:	f000 f879 	bl	80068fc <_printf_i>
 800680a:	e7e4      	b.n	80067d6 <_vfiprintf_r+0x1e6>
 800680c:	08007094 	.word	0x08007094
 8006810:	0800709e 	.word	0x0800709e
 8006814:	00000000 	.word	0x00000000
 8006818:	080065cb 	.word	0x080065cb
 800681c:	0800709a 	.word	0x0800709a

08006820 <_printf_common>:
 8006820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006824:	4616      	mov	r6, r2
 8006826:	4698      	mov	r8, r3
 8006828:	688a      	ldr	r2, [r1, #8]
 800682a:	690b      	ldr	r3, [r1, #16]
 800682c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006830:	4293      	cmp	r3, r2
 8006832:	bfb8      	it	lt
 8006834:	4613      	movlt	r3, r2
 8006836:	6033      	str	r3, [r6, #0]
 8006838:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800683c:	4607      	mov	r7, r0
 800683e:	460c      	mov	r4, r1
 8006840:	b10a      	cbz	r2, 8006846 <_printf_common+0x26>
 8006842:	3301      	adds	r3, #1
 8006844:	6033      	str	r3, [r6, #0]
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	0699      	lsls	r1, r3, #26
 800684a:	bf42      	ittt	mi
 800684c:	6833      	ldrmi	r3, [r6, #0]
 800684e:	3302      	addmi	r3, #2
 8006850:	6033      	strmi	r3, [r6, #0]
 8006852:	6825      	ldr	r5, [r4, #0]
 8006854:	f015 0506 	ands.w	r5, r5, #6
 8006858:	d106      	bne.n	8006868 <_printf_common+0x48>
 800685a:	f104 0a19 	add.w	sl, r4, #25
 800685e:	68e3      	ldr	r3, [r4, #12]
 8006860:	6832      	ldr	r2, [r6, #0]
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	42ab      	cmp	r3, r5
 8006866:	dc26      	bgt.n	80068b6 <_printf_common+0x96>
 8006868:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800686c:	6822      	ldr	r2, [r4, #0]
 800686e:	3b00      	subs	r3, #0
 8006870:	bf18      	it	ne
 8006872:	2301      	movne	r3, #1
 8006874:	0692      	lsls	r2, r2, #26
 8006876:	d42b      	bmi.n	80068d0 <_printf_common+0xb0>
 8006878:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800687c:	4641      	mov	r1, r8
 800687e:	4638      	mov	r0, r7
 8006880:	47c8      	blx	r9
 8006882:	3001      	adds	r0, #1
 8006884:	d01e      	beq.n	80068c4 <_printf_common+0xa4>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	6922      	ldr	r2, [r4, #16]
 800688a:	f003 0306 	and.w	r3, r3, #6
 800688e:	2b04      	cmp	r3, #4
 8006890:	bf02      	ittt	eq
 8006892:	68e5      	ldreq	r5, [r4, #12]
 8006894:	6833      	ldreq	r3, [r6, #0]
 8006896:	1aed      	subeq	r5, r5, r3
 8006898:	68a3      	ldr	r3, [r4, #8]
 800689a:	bf0c      	ite	eq
 800689c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068a0:	2500      	movne	r5, #0
 80068a2:	4293      	cmp	r3, r2
 80068a4:	bfc4      	itt	gt
 80068a6:	1a9b      	subgt	r3, r3, r2
 80068a8:	18ed      	addgt	r5, r5, r3
 80068aa:	2600      	movs	r6, #0
 80068ac:	341a      	adds	r4, #26
 80068ae:	42b5      	cmp	r5, r6
 80068b0:	d11a      	bne.n	80068e8 <_printf_common+0xc8>
 80068b2:	2000      	movs	r0, #0
 80068b4:	e008      	b.n	80068c8 <_printf_common+0xa8>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4652      	mov	r2, sl
 80068ba:	4641      	mov	r1, r8
 80068bc:	4638      	mov	r0, r7
 80068be:	47c8      	blx	r9
 80068c0:	3001      	adds	r0, #1
 80068c2:	d103      	bne.n	80068cc <_printf_common+0xac>
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068cc:	3501      	adds	r5, #1
 80068ce:	e7c6      	b.n	800685e <_printf_common+0x3e>
 80068d0:	18e1      	adds	r1, r4, r3
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	2030      	movs	r0, #48	@ 0x30
 80068d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068da:	4422      	add	r2, r4
 80068dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068e4:	3302      	adds	r3, #2
 80068e6:	e7c7      	b.n	8006878 <_printf_common+0x58>
 80068e8:	2301      	movs	r3, #1
 80068ea:	4622      	mov	r2, r4
 80068ec:	4641      	mov	r1, r8
 80068ee:	4638      	mov	r0, r7
 80068f0:	47c8      	blx	r9
 80068f2:	3001      	adds	r0, #1
 80068f4:	d0e6      	beq.n	80068c4 <_printf_common+0xa4>
 80068f6:	3601      	adds	r6, #1
 80068f8:	e7d9      	b.n	80068ae <_printf_common+0x8e>
	...

080068fc <_printf_i>:
 80068fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006900:	7e0f      	ldrb	r7, [r1, #24]
 8006902:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006904:	2f78      	cmp	r7, #120	@ 0x78
 8006906:	4691      	mov	r9, r2
 8006908:	4680      	mov	r8, r0
 800690a:	460c      	mov	r4, r1
 800690c:	469a      	mov	sl, r3
 800690e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006912:	d807      	bhi.n	8006924 <_printf_i+0x28>
 8006914:	2f62      	cmp	r7, #98	@ 0x62
 8006916:	d80a      	bhi.n	800692e <_printf_i+0x32>
 8006918:	2f00      	cmp	r7, #0
 800691a:	f000 80d2 	beq.w	8006ac2 <_printf_i+0x1c6>
 800691e:	2f58      	cmp	r7, #88	@ 0x58
 8006920:	f000 80b9 	beq.w	8006a96 <_printf_i+0x19a>
 8006924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800692c:	e03a      	b.n	80069a4 <_printf_i+0xa8>
 800692e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006932:	2b15      	cmp	r3, #21
 8006934:	d8f6      	bhi.n	8006924 <_printf_i+0x28>
 8006936:	a101      	add	r1, pc, #4	@ (adr r1, 800693c <_printf_i+0x40>)
 8006938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800693c:	08006995 	.word	0x08006995
 8006940:	080069a9 	.word	0x080069a9
 8006944:	08006925 	.word	0x08006925
 8006948:	08006925 	.word	0x08006925
 800694c:	08006925 	.word	0x08006925
 8006950:	08006925 	.word	0x08006925
 8006954:	080069a9 	.word	0x080069a9
 8006958:	08006925 	.word	0x08006925
 800695c:	08006925 	.word	0x08006925
 8006960:	08006925 	.word	0x08006925
 8006964:	08006925 	.word	0x08006925
 8006968:	08006aa9 	.word	0x08006aa9
 800696c:	080069d3 	.word	0x080069d3
 8006970:	08006a63 	.word	0x08006a63
 8006974:	08006925 	.word	0x08006925
 8006978:	08006925 	.word	0x08006925
 800697c:	08006acb 	.word	0x08006acb
 8006980:	08006925 	.word	0x08006925
 8006984:	080069d3 	.word	0x080069d3
 8006988:	08006925 	.word	0x08006925
 800698c:	08006925 	.word	0x08006925
 8006990:	08006a6b 	.word	0x08006a6b
 8006994:	6833      	ldr	r3, [r6, #0]
 8006996:	1d1a      	adds	r2, r3, #4
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6032      	str	r2, [r6, #0]
 800699c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069a4:	2301      	movs	r3, #1
 80069a6:	e09d      	b.n	8006ae4 <_printf_i+0x1e8>
 80069a8:	6833      	ldr	r3, [r6, #0]
 80069aa:	6820      	ldr	r0, [r4, #0]
 80069ac:	1d19      	adds	r1, r3, #4
 80069ae:	6031      	str	r1, [r6, #0]
 80069b0:	0606      	lsls	r6, r0, #24
 80069b2:	d501      	bpl.n	80069b8 <_printf_i+0xbc>
 80069b4:	681d      	ldr	r5, [r3, #0]
 80069b6:	e003      	b.n	80069c0 <_printf_i+0xc4>
 80069b8:	0645      	lsls	r5, r0, #25
 80069ba:	d5fb      	bpl.n	80069b4 <_printf_i+0xb8>
 80069bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	da03      	bge.n	80069cc <_printf_i+0xd0>
 80069c4:	232d      	movs	r3, #45	@ 0x2d
 80069c6:	426d      	negs	r5, r5
 80069c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069cc:	4859      	ldr	r0, [pc, #356]	@ (8006b34 <_printf_i+0x238>)
 80069ce:	230a      	movs	r3, #10
 80069d0:	e011      	b.n	80069f6 <_printf_i+0xfa>
 80069d2:	6821      	ldr	r1, [r4, #0]
 80069d4:	6833      	ldr	r3, [r6, #0]
 80069d6:	0608      	lsls	r0, r1, #24
 80069d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80069dc:	d402      	bmi.n	80069e4 <_printf_i+0xe8>
 80069de:	0649      	lsls	r1, r1, #25
 80069e0:	bf48      	it	mi
 80069e2:	b2ad      	uxthmi	r5, r5
 80069e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80069e6:	4853      	ldr	r0, [pc, #332]	@ (8006b34 <_printf_i+0x238>)
 80069e8:	6033      	str	r3, [r6, #0]
 80069ea:	bf14      	ite	ne
 80069ec:	230a      	movne	r3, #10
 80069ee:	2308      	moveq	r3, #8
 80069f0:	2100      	movs	r1, #0
 80069f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069f6:	6866      	ldr	r6, [r4, #4]
 80069f8:	60a6      	str	r6, [r4, #8]
 80069fa:	2e00      	cmp	r6, #0
 80069fc:	bfa2      	ittt	ge
 80069fe:	6821      	ldrge	r1, [r4, #0]
 8006a00:	f021 0104 	bicge.w	r1, r1, #4
 8006a04:	6021      	strge	r1, [r4, #0]
 8006a06:	b90d      	cbnz	r5, 8006a0c <_printf_i+0x110>
 8006a08:	2e00      	cmp	r6, #0
 8006a0a:	d04b      	beq.n	8006aa4 <_printf_i+0x1a8>
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a12:	fb03 5711 	mls	r7, r3, r1, r5
 8006a16:	5dc7      	ldrb	r7, [r0, r7]
 8006a18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a1c:	462f      	mov	r7, r5
 8006a1e:	42bb      	cmp	r3, r7
 8006a20:	460d      	mov	r5, r1
 8006a22:	d9f4      	bls.n	8006a0e <_printf_i+0x112>
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d10b      	bne.n	8006a40 <_printf_i+0x144>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	07df      	lsls	r7, r3, #31
 8006a2c:	d508      	bpl.n	8006a40 <_printf_i+0x144>
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	6861      	ldr	r1, [r4, #4]
 8006a32:	4299      	cmp	r1, r3
 8006a34:	bfde      	ittt	le
 8006a36:	2330      	movle	r3, #48	@ 0x30
 8006a38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a3c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006a40:	1b92      	subs	r2, r2, r6
 8006a42:	6122      	str	r2, [r4, #16]
 8006a44:	f8cd a000 	str.w	sl, [sp]
 8006a48:	464b      	mov	r3, r9
 8006a4a:	aa03      	add	r2, sp, #12
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7ff fee6 	bl	8006820 <_printf_common>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d14a      	bne.n	8006aee <_printf_i+0x1f2>
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a5c:	b004      	add	sp, #16
 8006a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	f043 0320 	orr.w	r3, r3, #32
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	4833      	ldr	r0, [pc, #204]	@ (8006b38 <_printf_i+0x23c>)
 8006a6c:	2778      	movs	r7, #120	@ 0x78
 8006a6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	6831      	ldr	r1, [r6, #0]
 8006a76:	061f      	lsls	r7, r3, #24
 8006a78:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a7c:	d402      	bmi.n	8006a84 <_printf_i+0x188>
 8006a7e:	065f      	lsls	r7, r3, #25
 8006a80:	bf48      	it	mi
 8006a82:	b2ad      	uxthmi	r5, r5
 8006a84:	6031      	str	r1, [r6, #0]
 8006a86:	07d9      	lsls	r1, r3, #31
 8006a88:	bf44      	itt	mi
 8006a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a8e:	6023      	strmi	r3, [r4, #0]
 8006a90:	b11d      	cbz	r5, 8006a9a <_printf_i+0x19e>
 8006a92:	2310      	movs	r3, #16
 8006a94:	e7ac      	b.n	80069f0 <_printf_i+0xf4>
 8006a96:	4827      	ldr	r0, [pc, #156]	@ (8006b34 <_printf_i+0x238>)
 8006a98:	e7e9      	b.n	8006a6e <_printf_i+0x172>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	f023 0320 	bic.w	r3, r3, #32
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	e7f6      	b.n	8006a92 <_printf_i+0x196>
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	e7bd      	b.n	8006a24 <_printf_i+0x128>
 8006aa8:	6833      	ldr	r3, [r6, #0]
 8006aaa:	6825      	ldr	r5, [r4, #0]
 8006aac:	6961      	ldr	r1, [r4, #20]
 8006aae:	1d18      	adds	r0, r3, #4
 8006ab0:	6030      	str	r0, [r6, #0]
 8006ab2:	062e      	lsls	r6, r5, #24
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	d501      	bpl.n	8006abc <_printf_i+0x1c0>
 8006ab8:	6019      	str	r1, [r3, #0]
 8006aba:	e002      	b.n	8006ac2 <_printf_i+0x1c6>
 8006abc:	0668      	lsls	r0, r5, #25
 8006abe:	d5fb      	bpl.n	8006ab8 <_printf_i+0x1bc>
 8006ac0:	8019      	strh	r1, [r3, #0]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	4616      	mov	r6, r2
 8006ac8:	e7bc      	b.n	8006a44 <_printf_i+0x148>
 8006aca:	6833      	ldr	r3, [r6, #0]
 8006acc:	1d1a      	adds	r2, r3, #4
 8006ace:	6032      	str	r2, [r6, #0]
 8006ad0:	681e      	ldr	r6, [r3, #0]
 8006ad2:	6862      	ldr	r2, [r4, #4]
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7f9 fba2 	bl	8000220 <memchr>
 8006adc:	b108      	cbz	r0, 8006ae2 <_printf_i+0x1e6>
 8006ade:	1b80      	subs	r0, r0, r6
 8006ae0:	6060      	str	r0, [r4, #4]
 8006ae2:	6863      	ldr	r3, [r4, #4]
 8006ae4:	6123      	str	r3, [r4, #16]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aec:	e7aa      	b.n	8006a44 <_printf_i+0x148>
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	4632      	mov	r2, r6
 8006af2:	4649      	mov	r1, r9
 8006af4:	4640      	mov	r0, r8
 8006af6:	47d0      	blx	sl
 8006af8:	3001      	adds	r0, #1
 8006afa:	d0ad      	beq.n	8006a58 <_printf_i+0x15c>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	079b      	lsls	r3, r3, #30
 8006b00:	d413      	bmi.n	8006b2a <_printf_i+0x22e>
 8006b02:	68e0      	ldr	r0, [r4, #12]
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	4298      	cmp	r0, r3
 8006b08:	bfb8      	it	lt
 8006b0a:	4618      	movlt	r0, r3
 8006b0c:	e7a6      	b.n	8006a5c <_printf_i+0x160>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4632      	mov	r2, r6
 8006b12:	4649      	mov	r1, r9
 8006b14:	4640      	mov	r0, r8
 8006b16:	47d0      	blx	sl
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d09d      	beq.n	8006a58 <_printf_i+0x15c>
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	68e3      	ldr	r3, [r4, #12]
 8006b20:	9903      	ldr	r1, [sp, #12]
 8006b22:	1a5b      	subs	r3, r3, r1
 8006b24:	42ab      	cmp	r3, r5
 8006b26:	dcf2      	bgt.n	8006b0e <_printf_i+0x212>
 8006b28:	e7eb      	b.n	8006b02 <_printf_i+0x206>
 8006b2a:	2500      	movs	r5, #0
 8006b2c:	f104 0619 	add.w	r6, r4, #25
 8006b30:	e7f5      	b.n	8006b1e <_printf_i+0x222>
 8006b32:	bf00      	nop
 8006b34:	080070a5 	.word	0x080070a5
 8006b38:	080070b6 	.word	0x080070b6

08006b3c <__sflush_r>:
 8006b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b44:	0716      	lsls	r6, r2, #28
 8006b46:	4605      	mov	r5, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	d454      	bmi.n	8006bf6 <__sflush_r+0xba>
 8006b4c:	684b      	ldr	r3, [r1, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	dc02      	bgt.n	8006b58 <__sflush_r+0x1c>
 8006b52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dd48      	ble.n	8006bea <__sflush_r+0xae>
 8006b58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b5a:	2e00      	cmp	r6, #0
 8006b5c:	d045      	beq.n	8006bea <__sflush_r+0xae>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b64:	682f      	ldr	r7, [r5, #0]
 8006b66:	6a21      	ldr	r1, [r4, #32]
 8006b68:	602b      	str	r3, [r5, #0]
 8006b6a:	d030      	beq.n	8006bce <__sflush_r+0x92>
 8006b6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	0759      	lsls	r1, r3, #29
 8006b72:	d505      	bpl.n	8006b80 <__sflush_r+0x44>
 8006b74:	6863      	ldr	r3, [r4, #4]
 8006b76:	1ad2      	subs	r2, r2, r3
 8006b78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b7a:	b10b      	cbz	r3, 8006b80 <__sflush_r+0x44>
 8006b7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b7e:	1ad2      	subs	r2, r2, r3
 8006b80:	2300      	movs	r3, #0
 8006b82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b84:	6a21      	ldr	r1, [r4, #32]
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b0      	blx	r6
 8006b8a:	1c43      	adds	r3, r0, #1
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	d106      	bne.n	8006b9e <__sflush_r+0x62>
 8006b90:	6829      	ldr	r1, [r5, #0]
 8006b92:	291d      	cmp	r1, #29
 8006b94:	d82b      	bhi.n	8006bee <__sflush_r+0xb2>
 8006b96:	4a2a      	ldr	r2, [pc, #168]	@ (8006c40 <__sflush_r+0x104>)
 8006b98:	410a      	asrs	r2, r1
 8006b9a:	07d6      	lsls	r6, r2, #31
 8006b9c:	d427      	bmi.n	8006bee <__sflush_r+0xb2>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	6062      	str	r2, [r4, #4]
 8006ba2:	04d9      	lsls	r1, r3, #19
 8006ba4:	6922      	ldr	r2, [r4, #16]
 8006ba6:	6022      	str	r2, [r4, #0]
 8006ba8:	d504      	bpl.n	8006bb4 <__sflush_r+0x78>
 8006baa:	1c42      	adds	r2, r0, #1
 8006bac:	d101      	bne.n	8006bb2 <__sflush_r+0x76>
 8006bae:	682b      	ldr	r3, [r5, #0]
 8006bb0:	b903      	cbnz	r3, 8006bb4 <__sflush_r+0x78>
 8006bb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bb6:	602f      	str	r7, [r5, #0]
 8006bb8:	b1b9      	cbz	r1, 8006bea <__sflush_r+0xae>
 8006bba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bbe:	4299      	cmp	r1, r3
 8006bc0:	d002      	beq.n	8006bc8 <__sflush_r+0x8c>
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f7ff fbf2 	bl	80063ac <_free_r>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bcc:	e00d      	b.n	8006bea <__sflush_r+0xae>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b0      	blx	r6
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	1c50      	adds	r0, r2, #1
 8006bd8:	d1c9      	bne.n	8006b6e <__sflush_r+0x32>
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0c6      	beq.n	8006b6e <__sflush_r+0x32>
 8006be0:	2b1d      	cmp	r3, #29
 8006be2:	d001      	beq.n	8006be8 <__sflush_r+0xac>
 8006be4:	2b16      	cmp	r3, #22
 8006be6:	d11e      	bne.n	8006c26 <__sflush_r+0xea>
 8006be8:	602f      	str	r7, [r5, #0]
 8006bea:	2000      	movs	r0, #0
 8006bec:	e022      	b.n	8006c34 <__sflush_r+0xf8>
 8006bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf2:	b21b      	sxth	r3, r3
 8006bf4:	e01b      	b.n	8006c2e <__sflush_r+0xf2>
 8006bf6:	690f      	ldr	r7, [r1, #16]
 8006bf8:	2f00      	cmp	r7, #0
 8006bfa:	d0f6      	beq.n	8006bea <__sflush_r+0xae>
 8006bfc:	0793      	lsls	r3, r2, #30
 8006bfe:	680e      	ldr	r6, [r1, #0]
 8006c00:	bf08      	it	eq
 8006c02:	694b      	ldreq	r3, [r1, #20]
 8006c04:	600f      	str	r7, [r1, #0]
 8006c06:	bf18      	it	ne
 8006c08:	2300      	movne	r3, #0
 8006c0a:	eba6 0807 	sub.w	r8, r6, r7
 8006c0e:	608b      	str	r3, [r1, #8]
 8006c10:	f1b8 0f00 	cmp.w	r8, #0
 8006c14:	dde9      	ble.n	8006bea <__sflush_r+0xae>
 8006c16:	6a21      	ldr	r1, [r4, #32]
 8006c18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c1a:	4643      	mov	r3, r8
 8006c1c:	463a      	mov	r2, r7
 8006c1e:	4628      	mov	r0, r5
 8006c20:	47b0      	blx	r6
 8006c22:	2800      	cmp	r0, #0
 8006c24:	dc08      	bgt.n	8006c38 <__sflush_r+0xfc>
 8006c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c38:	4407      	add	r7, r0
 8006c3a:	eba8 0800 	sub.w	r8, r8, r0
 8006c3e:	e7e7      	b.n	8006c10 <__sflush_r+0xd4>
 8006c40:	dfbffffe 	.word	0xdfbffffe

08006c44 <_fflush_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	690b      	ldr	r3, [r1, #16]
 8006c48:	4605      	mov	r5, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	b913      	cbnz	r3, 8006c54 <_fflush_r+0x10>
 8006c4e:	2500      	movs	r5, #0
 8006c50:	4628      	mov	r0, r5
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	b118      	cbz	r0, 8006c5e <_fflush_r+0x1a>
 8006c56:	6a03      	ldr	r3, [r0, #32]
 8006c58:	b90b      	cbnz	r3, 8006c5e <_fflush_r+0x1a>
 8006c5a:	f7ff f9ad 	bl	8005fb8 <__sinit>
 8006c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f3      	beq.n	8006c4e <_fflush_r+0xa>
 8006c66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c68:	07d0      	lsls	r0, r2, #31
 8006c6a:	d404      	bmi.n	8006c76 <_fflush_r+0x32>
 8006c6c:	0599      	lsls	r1, r3, #22
 8006c6e:	d402      	bmi.n	8006c76 <_fflush_r+0x32>
 8006c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c72:	f7ff fb98 	bl	80063a6 <__retarget_lock_acquire_recursive>
 8006c76:	4628      	mov	r0, r5
 8006c78:	4621      	mov	r1, r4
 8006c7a:	f7ff ff5f 	bl	8006b3c <__sflush_r>
 8006c7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c80:	07da      	lsls	r2, r3, #31
 8006c82:	4605      	mov	r5, r0
 8006c84:	d4e4      	bmi.n	8006c50 <_fflush_r+0xc>
 8006c86:	89a3      	ldrh	r3, [r4, #12]
 8006c88:	059b      	lsls	r3, r3, #22
 8006c8a:	d4e1      	bmi.n	8006c50 <_fflush_r+0xc>
 8006c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c8e:	f7ff fb8b 	bl	80063a8 <__retarget_lock_release_recursive>
 8006c92:	e7dd      	b.n	8006c50 <_fflush_r+0xc>

08006c94 <__swhatbuf_r>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	460c      	mov	r4, r1
 8006c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	b096      	sub	sp, #88	@ 0x58
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	461e      	mov	r6, r3
 8006ca4:	da0d      	bge.n	8006cc2 <__swhatbuf_r+0x2e>
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cac:	f04f 0100 	mov.w	r1, #0
 8006cb0:	bf14      	ite	ne
 8006cb2:	2340      	movne	r3, #64	@ 0x40
 8006cb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006cb8:	2000      	movs	r0, #0
 8006cba:	6031      	str	r1, [r6, #0]
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	b016      	add	sp, #88	@ 0x58
 8006cc0:	bd70      	pop	{r4, r5, r6, pc}
 8006cc2:	466a      	mov	r2, sp
 8006cc4:	f000 f848 	bl	8006d58 <_fstat_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	dbec      	blt.n	8006ca6 <__swhatbuf_r+0x12>
 8006ccc:	9901      	ldr	r1, [sp, #4]
 8006cce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006cd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006cd6:	4259      	negs	r1, r3
 8006cd8:	4159      	adcs	r1, r3
 8006cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cde:	e7eb      	b.n	8006cb8 <__swhatbuf_r+0x24>

08006ce0 <__smakebuf_r>:
 8006ce0:	898b      	ldrh	r3, [r1, #12]
 8006ce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ce4:	079d      	lsls	r5, r3, #30
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460c      	mov	r4, r1
 8006cea:	d507      	bpl.n	8006cfc <__smakebuf_r+0x1c>
 8006cec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	6163      	str	r3, [r4, #20]
 8006cf8:	b003      	add	sp, #12
 8006cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cfc:	ab01      	add	r3, sp, #4
 8006cfe:	466a      	mov	r2, sp
 8006d00:	f7ff ffc8 	bl	8006c94 <__swhatbuf_r>
 8006d04:	9f00      	ldr	r7, [sp, #0]
 8006d06:	4605      	mov	r5, r0
 8006d08:	4639      	mov	r1, r7
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7ff fbba 	bl	8006484 <_malloc_r>
 8006d10:	b948      	cbnz	r0, 8006d26 <__smakebuf_r+0x46>
 8006d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d16:	059a      	lsls	r2, r3, #22
 8006d18:	d4ee      	bmi.n	8006cf8 <__smakebuf_r+0x18>
 8006d1a:	f023 0303 	bic.w	r3, r3, #3
 8006d1e:	f043 0302 	orr.w	r3, r3, #2
 8006d22:	81a3      	strh	r3, [r4, #12]
 8006d24:	e7e2      	b.n	8006cec <__smakebuf_r+0xc>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	6020      	str	r0, [r4, #0]
 8006d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	9b01      	ldr	r3, [sp, #4]
 8006d32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d36:	b15b      	cbz	r3, 8006d50 <__smakebuf_r+0x70>
 8006d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f000 f81d 	bl	8006d7c <_isatty_r>
 8006d42:	b128      	cbz	r0, 8006d50 <__smakebuf_r+0x70>
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	f023 0303 	bic.w	r3, r3, #3
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	81a3      	strh	r3, [r4, #12]
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	431d      	orrs	r5, r3
 8006d54:	81a5      	strh	r5, [r4, #12]
 8006d56:	e7cf      	b.n	8006cf8 <__smakebuf_r+0x18>

08006d58 <_fstat_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d07      	ldr	r5, [pc, #28]	@ (8006d78 <_fstat_r+0x20>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	4611      	mov	r1, r2
 8006d64:	602b      	str	r3, [r5, #0]
 8006d66:	f7f9 ff93 	bl	8000c90 <_fstat>
 8006d6a:	1c43      	adds	r3, r0, #1
 8006d6c:	d102      	bne.n	8006d74 <_fstat_r+0x1c>
 8006d6e:	682b      	ldr	r3, [r5, #0]
 8006d70:	b103      	cbz	r3, 8006d74 <_fstat_r+0x1c>
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	bd38      	pop	{r3, r4, r5, pc}
 8006d76:	bf00      	nop
 8006d78:	2000072c 	.word	0x2000072c

08006d7c <_isatty_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d06      	ldr	r5, [pc, #24]	@ (8006d98 <_isatty_r+0x1c>)
 8006d80:	2300      	movs	r3, #0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	602b      	str	r3, [r5, #0]
 8006d88:	f7f9 ff92 	bl	8000cb0 <_isatty>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_isatty_r+0x1a>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_isatty_r+0x1a>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	2000072c 	.word	0x2000072c

08006d9c <_sbrk_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d06      	ldr	r5, [pc, #24]	@ (8006db8 <_sbrk_r+0x1c>)
 8006da0:	2300      	movs	r3, #0
 8006da2:	4604      	mov	r4, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	602b      	str	r3, [r5, #0]
 8006da8:	f7f9 ff9a 	bl	8000ce0 <_sbrk>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_sbrk_r+0x1a>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_sbrk_r+0x1a>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	2000072c 	.word	0x2000072c

08006dbc <_init>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_fini>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr
