
audio_recorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dd4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  08009fa4  08009fa4  0000afa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5b8  0800a5b8  0000c0a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5b8  0800a5b8  0000b5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5c0  0800a5c0  0000c0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5c0  0800a5c0  0000b5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5c4  0800a5c4  0000b5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0800a5c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003418  200000a4  0800a66c  0000c0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034bc  0800a66c  0000c4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001000d  00000000  00000000  0000c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003184  00000000  00000000  0001c0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4a  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025726  00000000  00000000  00020cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015596  00000000  00000000  000463f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0908  00000000  00000000  0005b98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c296  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004374  00000000  00000000  0012c2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00130650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009f8c 	.word	0x08009f8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	08009f8c 	.word	0x08009f8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <sd_card_init>:
static FIL wavFile;
static uint32_t wav_file_size;
static uint8_t first_time = 0;

void sd_card_init()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	490c      	ldr	r1, [pc, #48]	@ (80005d8 <sd_card_init+0x38>)
 80005a8:	480c      	ldr	r0, [pc, #48]	@ (80005dc <sd_card_init+0x3c>)
 80005aa:	f007 fd99 	bl	80080e0 <f_mount>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <sd_card_init+0x40>)
 80005b4:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <sd_card_init+0x40>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d007      	beq.n	80005ce <sd_card_init+0x2e>
	{
		printf("error in mounting an sd card: %d \n", sd_result);
 80005be:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <sd_card_init+0x40>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <sd_card_init+0x44>)
 80005c6:	f008 fec3 	bl	8009350 <iprintf>
		while(1);
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <sd_card_init+0x2a>
	}
	else
	{
		printf("succeded in mounting an sd card \n");
 80005ce:	4806      	ldr	r0, [pc, #24]	@ (80005e8 <sd_card_init+0x48>)
 80005d0:	f008 ff26 	bl	8009420 <puts>
	}
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20003338 	.word	0x20003338
 80005dc:	200000c4 	.word	0x200000c4
 80005e0:	200000c0 	.word	0x200000c0
 80005e4:	08009fa4 	.word	0x08009fa4
 80005e8:	08009fc8 	.word	0x08009fc8

080005ec <start_recording>:

void start_recording(uint32_t frequency)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	static char file_name[] = "w_000.wav";
	static uint8_t file_counter = 1;
	int file_number_digits = file_counter;
 80005f4:	4b4b      	ldr	r3, [pc, #300]	@ (8000724 <start_recording+0x138>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t)frequency;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b48      	ldr	r3, [pc, #288]	@ (8000728 <start_recording+0x13c>)
 8000606:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b46      	ldr	r3, [pc, #280]	@ (8000728 <start_recording+0x13c>)
 8000610:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	0c1b      	lsrs	r3, r3, #16
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b43      	ldr	r3, [pc, #268]	@ (8000728 <start_recording+0x13c>)
 800061a:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	0e1b      	lsrs	r3, r3, #24
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b41      	ldr	r3, [pc, #260]	@ (8000728 <start_recording+0x13c>)
 8000624:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b3f      	ldr	r3, [pc, #252]	@ (8000728 <start_recording+0x13c>)
 800062c:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b3c      	ldr	r3, [pc, #240]	@ (8000728 <start_recording+0x13c>)
 8000636:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b3a      	ldr	r3, [pc, #232]	@ (8000728 <start_recording+0x13c>)
 8000640:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	0e1b      	lsrs	r3, r3, #24
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <start_recording+0x13c>)
 800064a:	77da      	strb	r2, [r3, #31]

	// defining a wave file name
	file_name[4] = file_number_digits%10 + 48;
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	4b37      	ldr	r3, [pc, #220]	@ (800072c <start_recording+0x140>)
 8000650:	fb83 1302 	smull	r1, r3, r3, r2
 8000654:	1099      	asrs	r1, r3, #2
 8000656:	17d3      	asrs	r3, r2, #31
 8000658:	1ac9      	subs	r1, r1, r3
 800065a:	460b      	mov	r3, r1
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	440b      	add	r3, r1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	1ad1      	subs	r1, r2, r3
 8000664:	b2cb      	uxtb	r3, r1
 8000666:	3330      	adds	r3, #48	@ 0x30
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <start_recording+0x144>)
 800066c:	711a      	strb	r2, [r3, #4]
	file_number_digits /= 10;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4a2e      	ldr	r2, [pc, #184]	@ (800072c <start_recording+0x140>)
 8000672:	fb82 1203 	smull	r1, r2, r2, r3
 8000676:	1092      	asrs	r2, r2, #2
 8000678:	17db      	asrs	r3, r3, #31
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	60fb      	str	r3, [r7, #12]
	file_name[3] = file_number_digits%10 + 48;
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4b2a      	ldr	r3, [pc, #168]	@ (800072c <start_recording+0x140>)
 8000682:	fb83 1302 	smull	r1, r3, r3, r2
 8000686:	1099      	asrs	r1, r3, #2
 8000688:	17d3      	asrs	r3, r2, #31
 800068a:	1ac9      	subs	r1, r1, r3
 800068c:	460b      	mov	r3, r1
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	440b      	add	r3, r1
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	1ad1      	subs	r1, r2, r3
 8000696:	b2cb      	uxtb	r3, r1
 8000698:	3330      	adds	r3, #48	@ 0x30
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <start_recording+0x144>)
 800069e:	70da      	strb	r2, [r3, #3]
	file_number_digits /= 10;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4a22      	ldr	r2, [pc, #136]	@ (800072c <start_recording+0x140>)
 80006a4:	fb82 1203 	smull	r1, r2, r2, r3
 80006a8:	1092      	asrs	r2, r2, #2
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	60fb      	str	r3, [r7, #12]
	file_name[2] = file_number_digits%10 + 48;
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <start_recording+0x140>)
 80006b4:	fb83 1302 	smull	r1, r3, r3, r2
 80006b8:	1099      	asrs	r1, r3, #2
 80006ba:	17d3      	asrs	r3, r2, #31
 80006bc:	1ac9      	subs	r1, r1, r3
 80006be:	460b      	mov	r3, r1
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	440b      	add	r3, r1
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	1ad1      	subs	r1, r2, r3
 80006c8:	b2cb      	uxtb	r3, r1
 80006ca:	3330      	adds	r3, #48	@ 0x30
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <start_recording+0x144>)
 80006d0:	709a      	strb	r2, [r3, #2]
	printf("file name %s \n", file_name);
 80006d2:	4917      	ldr	r1, [pc, #92]	@ (8000730 <start_recording+0x144>)
 80006d4:	4817      	ldr	r0, [pc, #92]	@ (8000734 <start_recording+0x148>)
 80006d6:	f008 fe3b 	bl	8009350 <iprintf>
	file_counter++;
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <start_recording+0x138>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <start_recording+0x138>)
 80006e4:	701a      	strb	r2, [r3, #0]

	// creating a file
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 80006e6:	220a      	movs	r2, #10
 80006e8:	4911      	ldr	r1, [pc, #68]	@ (8000730 <start_recording+0x144>)
 80006ea:	4813      	ldr	r0, [pc, #76]	@ (8000738 <start_recording+0x14c>)
 80006ec:	f007 fd3e 	bl	800816c <f_open>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <start_recording+0x150>)
 80006f6:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80006f8:	4b10      	ldr	r3, [pc, #64]	@ (800073c <start_recording+0x150>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d007      	beq.n	8000710 <start_recording+0x124>
	{
		printf("error in creating a file: %d \n", sd_result);
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <start_recording+0x150>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	480e      	ldr	r0, [pc, #56]	@ (8000740 <start_recording+0x154>)
 8000708:	f008 fe22 	bl	8009350 <iprintf>
		while(1);
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <start_recording+0x120>
	}
	else
	{
		printf("succeeded in opening a file \n");
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <start_recording+0x158>)
 8000712:	f008 fe85 	bl	8009420 <puts>
	}
	wav_file_size = 0;
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <start_recording+0x15c>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000002c 	.word	0x2000002c
 8000728:	20000000 	.word	0x20000000
 800072c:	66666667 	.word	0x66666667
 8000730:	20000030 	.word	0x20000030
 8000734:	08009fec 	.word	0x08009fec
 8000738:	200010fc 	.word	0x200010fc
 800073c:	200000c0 	.word	0x200000c0
 8000740:	08009ffc 	.word	0x08009ffc
 8000744:	0800a01c 	.word	0x0800a01c
 8000748:	2000212c 	.word	0x2000212c

0800074c <stop_recording>:

void stop_recording()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <stop_recording+0xc4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3b08      	subs	r3, #8
 8000758:	4a2d      	ldr	r2, [pc, #180]	@ (8000810 <stop_recording+0xc4>)
 800075a:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 800075c:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <stop_recording+0xc4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b2c      	ldr	r3, [pc, #176]	@ (8000814 <stop_recording+0xc8>)
 8000764:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 8000766:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <stop_recording+0xc4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b29      	ldr	r3, [pc, #164]	@ (8000814 <stop_recording+0xc8>)
 8000770:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 8000772:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <stop_recording+0xc4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	0c1b      	lsrs	r3, r3, #16
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <stop_recording+0xc8>)
 800077c:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 800077e:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <stop_recording+0xc4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	0e1b      	lsrs	r3, r3, #24
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <stop_recording+0xc8>)
 8000788:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 800078a:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <stop_recording+0xc4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	3b24      	subs	r3, #36	@ 0x24
 8000790:	4a1f      	ldr	r2, [pc, #124]	@ (8000810 <stop_recording+0xc4>)
 8000792:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <stop_recording+0xc4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <stop_recording+0xc8>)
 800079c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <stop_recording+0xc4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <stop_recording+0xc8>)
 80007aa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 80007ae:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <stop_recording+0xc4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	0c1b      	lsrs	r3, r3, #16
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <stop_recording+0xc8>)
 80007b8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <stop_recording+0xc4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	0e1b      	lsrs	r3, r3, #24
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <stop_recording+0xc8>)
 80007c6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 80007ca:	2100      	movs	r1, #0
 80007cc:	4812      	ldr	r0, [pc, #72]	@ (8000818 <stop_recording+0xcc>)
 80007ce:	f008 f8e1 	bl	8008994 <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80007d2:	1dbb      	adds	r3, r7, #6
 80007d4:	222c      	movs	r2, #44	@ 0x2c
 80007d6:	490f      	ldr	r1, [pc, #60]	@ (8000814 <stop_recording+0xc8>)
 80007d8:	480f      	ldr	r0, [pc, #60]	@ (8000818 <stop_recording+0xcc>)
 80007da:	f007 fe9f 	bl	800851c <f_write>
	if(sd_result != 0)
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <stop_recording+0xd0>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d007      	beq.n	80007f6 <stop_recording+0xaa>
	{
		printf("error in updating the first sector: %d \n", sd_result);
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <stop_recording+0xd0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <stop_recording+0xd4>)
 80007ee:	f008 fdaf 	bl	8009350 <iprintf>
		while(1);
 80007f2:	bf00      	nop
 80007f4:	e7fd      	b.n	80007f2 <stop_recording+0xa6>
	}
	f_close(&wavFile);
 80007f6:	4808      	ldr	r0, [pc, #32]	@ (8000818 <stop_recording+0xcc>)
 80007f8:	f008 f8a2 	bl	8008940 <f_close>
	first_time = 0;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <stop_recording+0xd8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
	printf("closed the file \n");
 8000802:	4809      	ldr	r0, [pc, #36]	@ (8000828 <stop_recording+0xdc>)
 8000804:	f008 fe0c 	bl	8009420 <puts>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000212c 	.word	0x2000212c
 8000814:	20000000 	.word	0x20000000
 8000818:	200010fc 	.word	0x200010fc
 800081c:	200000c0 	.word	0x200000c0
 8000820:	0800a03c 	.word	0x0800a03c
 8000824:	20002130 	.word	0x20002130
 8000828:	0800a068 	.word	0x0800a068

0800082c <write2wav_file>:

void write2wav_file(uint8_t *data, uint16_t data_size)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	printf("w\n");
 8000838:	481d      	ldr	r0, [pc, #116]	@ (80008b0 <write2wav_file+0x84>)
 800083a:	f008 fdf1 	bl	8009420 <puts>
	if(first_time == 0)
 800083e:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <write2wav_file+0x88>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d113      	bne.n	800086e <write2wav_file+0x42>
	{
		for(int i = 0; i < 44; i++)
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	e00a      	b.n	8000862 <write2wav_file+0x36>
		{
			*(data + i) = wav_file_header[i];
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	4919      	ldr	r1, [pc, #100]	@ (80008b8 <write2wav_file+0x8c>)
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	440a      	add	r2, r1
 8000858:	7812      	ldrb	r2, [r2, #0]
 800085a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3301      	adds	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2b2b      	cmp	r3, #43	@ 0x2b
 8000866:	ddf1      	ble.n	800084c <write2wav_file+0x20>
		}
		first_time = 1;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <write2wav_file+0x88>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 800086e:	887a      	ldrh	r2, [r7, #2]
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	4811      	ldr	r0, [pc, #68]	@ (80008bc <write2wav_file+0x90>)
 8000878:	f007 fe50 	bl	800851c <f_write>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <write2wav_file+0x94>)
 8000882:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 8000884:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <write2wav_file+0x94>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d007      	beq.n	800089c <write2wav_file+0x70>
	{
		printf("error in writing to the file: %d \n", sd_result);
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <write2wav_file+0x94>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <write2wav_file+0x98>)
 8000894:	f008 fd5c 	bl	8009350 <iprintf>
		while(1);
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <write2wav_file+0x6c>
	}
	wav_file_size += data_size;
 800089c:	887a      	ldrh	r2, [r7, #2]
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <write2wav_file+0x9c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <write2wav_file+0x9c>)
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	0800a07c 	.word	0x0800a07c
 80008b4:	20002130 	.word	0x20002130
 80008b8:	20000000 	.word	0x20000000
 80008bc:	200010fc 	.word	0x200010fc
 80008c0:	200000c0 	.word	0x200000c0
 80008c4:	0800a080 	.word	0x0800a080
 80008c8:	2000212c 	.word	0x2000212c

080008cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d013      	beq.n	800090c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80008ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d00b      	beq.n	800090c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80008f4:	e000      	b.n	80008f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80008f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80008f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f9      	beq.n	80008f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000902:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000920:	f000 fd84 	bl	800142c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f882 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f000 f97e 	bl	8000c28 <MX_GPIO_Init>
  MX_DMA_Init();
 800092c:	f000 f93e 	bl	8000bac <MX_DMA_Init>
  MX_I2S2_Init();
 8000930:	f000 f8ee 	bl	8000b10 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8000934:	f000 f91a 	bl	8000b6c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000938:	f005 f866 	bl	8005a08 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_DMAStop(&hi2s2);
 800093c:	4832      	ldr	r0, [pc, #200]	@ (8000a08 <main+0xec>)
 800093e:	f001 fe71 	bl	8002624 <HAL_I2S_DMAStop>
  HAL_Delay(500);
 8000942:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000946:	f000 fde3 	bl	8001510 <HAL_Delay>
  sd_card_init();
 800094a:	f7ff fe29 	bl	80005a0 <sd_card_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(button_flag)
 800094e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a0c <main+0xf0>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d031      	beq.n	80009bc <main+0xa0>
	  {

		  if(start_stop_recording)
 8000958:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <main+0xf4>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d011      	beq.n	8000986 <main+0x6a>
	  	  {
			  HAL_I2S_DMAStop(&hi2s2);
 8000962:	4829      	ldr	r0, [pc, #164]	@ (8000a08 <main+0xec>)
 8000964:	f001 fe5e 	bl	8002624 <HAL_I2S_DMAStop>
			  start_stop_recording = 0;
 8000968:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <main+0xf4>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
	  		  stop_recording();
 800096e:	f7ff feed 	bl	800074c <stop_recording>
	  		  half_i2s = 0;
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <main+0xf8>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
	  		  full_i2s = 0;
 8000978:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <main+0xfc>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
	  		  printf("stop recording \n");
 800097e:	4827      	ldr	r0, [pc, #156]	@ (8000a1c <main+0x100>)
 8000980:	f008 fd4e 	bl	8009420 <puts>
 8000984:	e017      	b.n	80009b6 <main+0x9a>
	  	  }
	  	  else
	  	  {
	  		  start_stop_recording = 1;
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <main+0xf4>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
	  		  start_recording(I2S_AUDIOFREQ_32K);
 800098c:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8000990:	f7ff fe2c 	bl	80005ec <start_recording>
	  		  printf("start_recording %d and %d\n", half_i2s, full_i2s);
 8000994:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <main+0xf8>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4619      	mov	r1, r3
 800099c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <main+0xfc>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	481e      	ldr	r0, [pc, #120]	@ (8000a20 <main+0x104>)
 80009a6:	f008 fcd3 	bl	8009350 <iprintf>
	  		  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s, sizeof(data_i2s) / 2);
 80009aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009ae:	491d      	ldr	r1, [pc, #116]	@ (8000a24 <main+0x108>)
 80009b0:	4815      	ldr	r0, [pc, #84]	@ (8000a08 <main+0xec>)
 80009b2:	f001 fd7f 	bl	80024b4 <HAL_I2S_Receive_DMA>
	  	  }
	  	  button_flag = 0;
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <main+0xf0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(start_stop_recording == 1 && half_i2s == 1)
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <main+0xf4>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d10c      	bne.n	80009e0 <main+0xc4>
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <main+0xf8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d107      	bne.n	80009e0 <main+0xc4>
	  {
		  write2wav_file(((uint8_t*)data_i2s),	 WAV_WRITE_SAMPLE_COUNT);
 80009d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009d4:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <main+0x108>)
 80009d6:	f7ff ff29 	bl	800082c <write2wav_file>
	  	  half_i2s = 0;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <main+0xf8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	  }

	  if(start_stop_recording == 1 && full_i2s == 1)
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <main+0xf4>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d1b1      	bne.n	800094e <main+0x32>
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <main+0xfc>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d1ac      	bne.n	800094e <main+0x32>
	  {
		  write2wav_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <main+0x10c>)
 80009f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff16 	bl	800082c <write2wav_file>
	  	  full_i2s = 0;
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <main+0xfc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
	  if(button_flag)
 8000a06:	e7a2      	b.n	800094e <main+0x32>
 8000a08:	20002134 	.word	0x20002134
 8000a0c:	20003322 	.word	0x20003322
 8000a10:	20003323 	.word	0x20003323
 8000a14:	20003324 	.word	0x20003324
 8000a18:	20003325 	.word	0x20003325
 8000a1c:	0800a0a4 	.word	0x0800a0a4
 8000a20:	0800a0b4 	.word	0x0800a0b4
 8000a24:	20002320 	.word	0x20002320
 8000a28:	20002b20 	.word	0x20002b20

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	@ 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	2234      	movs	r2, #52	@ 0x34
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f008 fdd0 	bl	80095e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b2c      	ldr	r3, [pc, #176]	@ (8000b08 <SystemClock_Config+0xdc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	4a2b      	ldr	r2, [pc, #172]	@ (8000b08 <SystemClock_Config+0xdc>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a60:	4b29      	ldr	r3, [pc, #164]	@ (8000b08 <SystemClock_Config+0xdc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	4b26      	ldr	r3, [pc, #152]	@ (8000b0c <SystemClock_Config+0xe0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a25      	ldr	r2, [pc, #148]	@ (8000b0c <SystemClock_Config+0xe0>)
 8000a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b23      	ldr	r3, [pc, #140]	@ (8000b0c <SystemClock_Config+0xe0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a90:	2310      	movs	r3, #16
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000aa0:	23b4      	movs	r3, #180	@ 0xb4
 8000aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 f84f 	bl	8003b58 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac0:	f000 f984 	bl	8000dcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ac4:	f001 fff4 	bl	8002ab0 <HAL_PWREx_EnableOverDrive>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ace:	f000 f97d 	bl	8000dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ade:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	2105      	movs	r1, #5
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 f82d 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000afc:	f000 f966 	bl	8000dcc <Error_Handler>
  }
}
 8000b00:	bf00      	nop
 8000b02:	3750      	adds	r7, #80	@ 0x50
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000

08000b10 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <MX_I2S2_Init+0x54>)
 8000b16:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <MX_I2S2_Init+0x58>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <MX_I2S2_Init+0x54>)
 8000b1c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b20:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <MX_I2S2_Init+0x54>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_I2S2_Init+0x54>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <MX_I2S2_Init+0x54>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000b34:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <MX_I2S2_Init+0x54>)
 8000b36:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b3a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_I2S2_Init+0x54>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <MX_I2S2_Init+0x54>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <MX_I2S2_Init+0x54>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_I2S2_Init+0x54>)
 8000b50:	f001 fbb8 	bl	80022c4 <HAL_I2S_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000b5a:	f000 f937 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20002134 	.word	0x20002134
 8000b68:	40003800 	.word	0x40003800

08000b6c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_SDIO_SD_Init+0x38>)
 8000b72:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <MX_SDIO_SD_Init+0x3c>)
 8000b74:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_SDIO_SD_Init+0x38>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_SDIO_SD_Init+0x38>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <MX_SDIO_SD_Init+0x38>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_SDIO_SD_Init+0x38>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <MX_SDIO_SD_Init+0x38>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 20;
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <MX_SDIO_SD_Init+0x38>)
 8000b96:	2214      	movs	r2, #20
 8000b98:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	200021dc 	.word	0x200021dc
 8000ba8:	40012c00 	.word	0x40012c00

08000bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <MX_DMA_Init+0x78>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a1a      	ldr	r2, [pc, #104]	@ (8000c24 <MX_DMA_Init+0x78>)
 8000bbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_DMA_Init+0x78>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_DMA_Init+0x78>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a13      	ldr	r2, [pc, #76]	@ (8000c24 <MX_DMA_Init+0x78>)
 8000bd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_DMA_Init+0x78>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	200e      	movs	r0, #14
 8000bf0:	f000 fd8d 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bf4:	200e      	movs	r0, #14
 8000bf6:	f000 fda6 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	203b      	movs	r0, #59	@ 0x3b
 8000c00:	f000 fd85 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c04:	203b      	movs	r0, #59	@ 0x3b
 8000c06:	f000 fd9e 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2045      	movs	r0, #69	@ 0x45
 8000c10:	f000 fd7d 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c14:	2045      	movs	r0, #69	@ 0x45
 8000c16:	f000 fd96 	bl	8001746 <HAL_NVIC_EnableIRQ>

}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b2e      	ldr	r3, [pc, #184]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a2d      	ldr	r2, [pc, #180]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a26      	ldr	r2, [pc, #152]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a18      	ldr	r2, [pc, #96]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <MX_GPIO_Init+0xd4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480e      	ldr	r0, [pc, #56]	@ (8000d00 <MX_GPIO_Init+0xd8>)
 8000cc6:	f001 f939 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000cca:	2340      	movs	r3, #64	@ 0x40
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4808      	ldr	r0, [pc, #32]	@ (8000d00 <MX_GPIO_Init+0xd8>)
 8000cde:	f001 f92d 	bl	8001f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2028      	movs	r0, #40	@ 0x28
 8000ce8:	f000 fd11 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cec:	2028      	movs	r0, #40	@ 0x28
 8000cee:	f000 fd2a 	bl	8001746 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020800 	.word	0x40020800

08000d04 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e009      	b.n	8000d2a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	60ba      	str	r2, [r7, #8]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fdd4 	bl	80008cc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dbf1      	blt.n	8000d16 <_write+0x12>
  }
  return len;
 8000d32:	687b      	ldr	r3, [r7, #4]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

	full_i2s = 1;
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <HAL_I2S_RxCpltCallback+0x1c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20003325 	.word	0x20003325

08000d5c <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	sample_i2s = data_i2s[0];
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_I2S_RxHalfCpltCallback+0x24>)
 8000d66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_I2S_RxHalfCpltCallback+0x28>)
 8000d6c:	801a      	strh	r2, [r3, #0]
	half_i2s = 1;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20002320 	.word	0x20002320
 8000d84:	20003320 	.word	0x20003320
 8000d88:	20003324 	.word	0x20003324

08000d8c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_tick = 0;  // Store last tick value

    if (GPIO_Pin == B1_Pin)  // Check if the interrupt is for your button pin
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d9c:	d10e      	bne.n	8000dbc <HAL_GPIO_EXTI_Callback+0x30>
    {
        uint32_t current_tick = HAL_GetTick();  // Get current tick value
 8000d9e:	f000 fbab 	bl	80014f8 <HAL_GetTick>
 8000da2:	60f8      	str	r0, [r7, #12]
        if ((current_tick - last_tick) > DEBOUNCE_DELAY_MS)  // Check debounce delay
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b96      	cmp	r3, #150	@ 0x96
 8000dae:	d905      	bls.n	8000dbc <HAL_GPIO_EXTI_Callback+0x30>
        {
            button_flag = 1;  // Set the flag for button press
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
            last_tick = current_tick;  // Update last tick time
 8000db6:	4a03      	ldr	r2, [pc, #12]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20003328 	.word	0x20003328
 8000dc8:	20003322 	.word	0x20003322

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <Error_Handler+0x8>

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	4a08      	ldr	r2, [pc, #32]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0a2      	sub	sp, #136	@ 0x88
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	225c      	movs	r2, #92	@ 0x5c
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f008 fbc9 	bl	80095e0 <memset>
  if(hi2s->Instance==SPI2)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a50      	ldr	r2, [pc, #320]	@ (8000f94 <HAL_I2S_MspInit+0x16c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	f040 8099 	bne.w	8000f8c <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000e5e:	2332      	movs	r3, #50	@ 0x32
 8000e60:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000e66:	2308      	movs	r3, #8
 8000e68:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000e76:	2300      	movs	r3, #0
 8000e78:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7a:	f107 0318 	add.w	r3, r7, #24
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 ff4c 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8000e8a:	f7ff ff9f 	bl	8000dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	4b41      	ldr	r3, [pc, #260]	@ (8000f98 <HAL_I2S_MspInit+0x170>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a40      	ldr	r2, [pc, #256]	@ (8000f98 <HAL_I2S_MspInit+0x170>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f98 <HAL_I2S_MspInit+0x170>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b3a      	ldr	r3, [pc, #232]	@ (8000f98 <HAL_I2S_MspInit+0x170>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a39      	ldr	r2, [pc, #228]	@ (8000f98 <HAL_I2S_MspInit+0x170>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <HAL_I2S_MspInit+0x170>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b33      	ldr	r3, [pc, #204]	@ (8000f98 <HAL_I2S_MspInit+0x170>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a32      	ldr	r2, [pc, #200]	@ (8000f98 <HAL_I2S_MspInit+0x170>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b30      	ldr	r3, [pc, #192]	@ (8000f98 <HAL_I2S_MspInit+0x170>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000efe:	4619      	mov	r1, r3
 8000f00:	4826      	ldr	r0, [pc, #152]	@ (8000f9c <HAL_I2S_MspInit+0x174>)
 8000f02:	f001 f81b 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f06:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f0a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f24:	4619      	mov	r1, r3
 8000f26:	481e      	ldr	r0, [pc, #120]	@ (8000fa0 <HAL_I2S_MspInit+0x178>)
 8000f28:	f001 f808 	bl	8001f3c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa8 <HAL_I2S_MspInit+0x180>)
 8000f30:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f44:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f4a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f52:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f62:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f72:	f000 fc03 	bl	800177c <HAL_DMA_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_I2S_MspInit+0x158>
    {
      Error_Handler();
 8000f7c:	f7ff ff26 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f86:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <HAL_I2S_MspInit+0x17c>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3788      	adds	r7, #136	@ 0x88
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40003800 	.word	0x40003800
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	2000217c 	.word	0x2000217c
 8000fa8:	40026058 	.word	0x40026058

08000fac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0a2      	sub	sp, #136	@ 0x88
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	225c      	movs	r2, #92	@ 0x5c
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f008 fb07 	bl	80095e0 <memset>
  if(hsd->Instance==SDIO)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a7f      	ldr	r2, [pc, #508]	@ (80011d4 <HAL_SD_MspInit+0x228>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	f040 80f6 	bne.w	80011ca <HAL_SD_MspInit+0x21e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000fde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fe93 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000ffc:	f7ff fee6 	bl	8000dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	4b74      	ldr	r3, [pc, #464]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 8001006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001008:	4a73      	ldr	r2, [pc, #460]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 800100a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800100e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001010:	4b71      	ldr	r3, [pc, #452]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 8001012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	4b6d      	ldr	r3, [pc, #436]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001024:	4a6c      	ldr	r2, [pc, #432]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	6313      	str	r3, [r2, #48]	@ 0x30
 800102c:	4b6a      	ldr	r3, [pc, #424]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4b66      	ldr	r3, [pc, #408]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001040:	4a65      	ldr	r2, [pc, #404]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6313      	str	r3, [r2, #48]	@ 0x30
 8001048:	4b63      	ldr	r3, [pc, #396]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b5f      	ldr	r3, [pc, #380]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105c:	4a5e      	ldr	r2, [pc, #376]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	6313      	str	r3, [r2, #48]	@ 0x30
 8001064:	4b5c      	ldr	r3, [pc, #368]	@ (80011d8 <HAL_SD_MspInit+0x22c>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001070:	2304      	movs	r3, #4
 8001072:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001082:	230c      	movs	r3, #12
 8001084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800108c:	4619      	mov	r1, r3
 800108e:	4853      	ldr	r0, [pc, #332]	@ (80011dc <HAL_SD_MspInit+0x230>)
 8001090:	f000 ff54 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001094:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001098:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80010a8:	230c      	movs	r3, #12
 80010aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010b2:	4619      	mov	r1, r3
 80010b4:	484a      	ldr	r0, [pc, #296]	@ (80011e0 <HAL_SD_MspInit+0x234>)
 80010b6:	f000 ff41 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ba:	2304      	movs	r3, #4
 80010bc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80010cc:	230c      	movs	r3, #12
 80010ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010d6:	4619      	mov	r1, r3
 80010d8:	4842      	ldr	r0, [pc, #264]	@ (80011e4 <HAL_SD_MspInit+0x238>)
 80010da:	f000 ff2f 	bl	8001f3c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80010de:	4b42      	ldr	r3, [pc, #264]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 80010e0:	4a42      	ldr	r2, [pc, #264]	@ (80011ec <HAL_SD_MspInit+0x240>)
 80010e2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80010e4:	4b40      	ldr	r3, [pc, #256]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 80010e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010ea:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ec:	4b3e      	ldr	r3, [pc, #248]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f2:	4b3d      	ldr	r3, [pc, #244]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f8:	4b3b      	ldr	r3, [pc, #236]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 80010fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010fe:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001100:	4b39      	ldr	r3, [pc, #228]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 8001102:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001106:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001108:	4b37      	ldr	r3, [pc, #220]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 800110a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800110e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001110:	4b35      	ldr	r3, [pc, #212]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 8001112:	2220      	movs	r2, #32
 8001114:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001116:	4b34      	ldr	r3, [pc, #208]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800111c:	4b32      	ldr	r3, [pc, #200]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 800111e:	2204      	movs	r2, #4
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001122:	4b31      	ldr	r3, [pc, #196]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 8001124:	2203      	movs	r2, #3
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001128:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 800112a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001130:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 8001132:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001136:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001138:	482b      	ldr	r0, [pc, #172]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 800113a:	f000 fb1f 	bl	800177c <HAL_DMA_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8001144:	f7ff fe42 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a27      	ldr	r2, [pc, #156]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 800114c:	641a      	str	r2, [r3, #64]	@ 0x40
 800114e:	4a26      	ldr	r2, [pc, #152]	@ (80011e8 <HAL_SD_MspInit+0x23c>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001154:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 8001156:	4a27      	ldr	r2, [pc, #156]	@ (80011f4 <HAL_SD_MspInit+0x248>)
 8001158:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800115a:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 800115c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001160:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 8001164:	2240      	movs	r2, #64	@ 0x40
 8001166:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 8001170:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001174:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001176:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 8001178:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800117c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800117e:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 8001180:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001184:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 8001188:	2220      	movs	r2, #32
 800118a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 8001194:	2204      	movs	r2, #4
 8001196:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 800119a:	2203      	movs	r2, #3
 800119c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 80011a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 80011a8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80011ac:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80011ae:	4810      	ldr	r0, [pc, #64]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 80011b0:	f000 fae4 	bl	800177c <HAL_DMA_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 80011ba:	f7ff fe07 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a0b      	ldr	r2, [pc, #44]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 80011c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011c4:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <HAL_SD_MspInit+0x244>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80011ca:	bf00      	nop
 80011cc:	3788      	adds	r7, #136	@ 0x88
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40012c00 	.word	0x40012c00
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	20002260 	.word	0x20002260
 80011ec:	40026458 	.word	0x40026458
 80011f0:	200022c0 	.word	0x200022c0
 80011f4:	400264a0 	.word	0x400264a0

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <NMI_Handler+0x4>

08001200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <MemManage_Handler+0x4>

08001210 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <UsageFault_Handler+0x4>

08001220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124e:	f000 f93f 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <DMA1_Stream3_IRQHandler+0x10>)
 800125e:	f000 fc03 	bl	8001a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000217c 	.word	0x2000217c

0800126c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001270:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001274:	f001 f80e 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <DMA2_Stream3_IRQHandler+0x10>)
 8001282:	f000 fbf1 	bl	8001a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20002260 	.word	0x20002260

08001290 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <DMA2_Stream6_IRQHandler+0x10>)
 8001296:	f000 fbe7 	bl	8001a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200022c0 	.word	0x200022c0

080012a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e00a      	b.n	80012cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012b6:	f3af 8000 	nop.w
 80012ba:	4601      	mov	r1, r0
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	60ba      	str	r2, [r7, #8]
 80012c2:	b2ca      	uxtb	r2, r1
 80012c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbf0      	blt.n	80012b6 <_read+0x12>
  }

  return len;
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_close>:
  }
  return len;
}

int _close(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001306:	605a      	str	r2, [r3, #4]
  return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_isatty>:

int _isatty(int file)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	@ (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f008 f990 	bl	800969c <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20020000 	.word	0x20020000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	2000332c 	.word	0x2000332c
 80013b0:	200034c0 	.word	0x200034c0

080013b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001410 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013dc:	f7ff ffea 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e2:	490d      	ldr	r1, [pc, #52]	@ (8001418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e4:	4a0d      	ldr	r2, [pc, #52]	@ (800141c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001406:	f008 f94f 	bl	80096a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff fa87 	bl	800091c <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800141c:	0800a5c8 	.word	0x0800a5c8
  ldr r2, =_sbss
 8001420:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001424:	200034bc 	.word	0x200034bc

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>
	...

0800142c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001430:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <HAL_Init+0x40>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <HAL_Init+0x40>)
 8001442:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	@ (800146c <HAL_Init+0x40>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f94f 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	200f      	movs	r0, #15
 800145c:	f000 f808 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff fcba 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023c00 	.word	0x40023c00

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f967 	bl	8001762 <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014ac:	f000 f92f 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000003c 	.word	0x2000003c
 80014c8:	20000044 	.word	0x20000044
 80014cc:	20000040 	.word	0x20000040

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000044 	.word	0x20000044
 80014f4:	20003330 	.word	0x20003330

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20003330 	.word	0x20003330

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000044 	.word	0x20000044

08001558 <__NVIC_SetPriorityGrouping>:
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	@ (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff29 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff3e 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff31 	bl	80015bc <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff feb6 	bl	80014f8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e099      	b.n	80018cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b8:	e00f      	b.n	80017da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ba:	f7ff fe9d 	bl	80014f8 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d908      	bls.n	80017da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2220      	movs	r2, #32
 80017cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e078      	b.n	80018cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1e8      	bne.n	80017ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <HAL_DMA_Init+0x158>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001830:	2b04      	cmp	r3, #4
 8001832:	d107      	bne.n	8001844 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	4313      	orrs	r3, r2
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4313      	orrs	r3, r2
 8001842:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f023 0307 	bic.w	r3, r3, #7
 800185a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	2b04      	cmp	r3, #4
 800186c:	d117      	bne.n	800189e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00e      	beq.n	800189e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fadf 	bl	8001e44 <DMA_CheckFifoParam>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2240      	movs	r2, #64	@ 0x40
 8001890:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800189a:	2301      	movs	r3, #1
 800189c:	e016      	b.n	80018cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fa96 	bl	8001dd8 <DMA_CalcBaseAndBitshift>
 80018ac:	4603      	mov	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b4:	223f      	movs	r2, #63	@ 0x3f
 80018b6:	409a      	lsls	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	f010803f 	.word	0xf010803f

080018d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_DMA_Start_IT+0x26>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e040      	b.n	8001980 <HAL_DMA_Start_IT+0xa8>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d12f      	bne.n	8001972 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2202      	movs	r2, #2
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 fa28 	bl	8001d7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001930:	223f      	movs	r2, #63	@ 0x3f
 8001932:	409a      	lsls	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0216 	orr.w	r2, r2, #22
 8001946:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0208 	orr.w	r2, r2, #8
 800195e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e005      	b.n	800197e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800197a:	2302      	movs	r3, #2
 800197c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800197e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001994:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001996:	f7ff fdaf 	bl	80014f8 <HAL_GetTick>
 800199a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d008      	beq.n	80019ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2280      	movs	r2, #128	@ 0x80
 80019ac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e052      	b.n	8001a60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0216 	bic.w	r2, r2, #22
 80019c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d103      	bne.n	80019ea <HAL_DMA_Abort+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0208 	bic.w	r2, r2, #8
 80019f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a0a:	e013      	b.n	8001a34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a0c:	f7ff fd74 	bl	80014f8 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d90c      	bls.n	8001a34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2203      	movs	r2, #3
 8001a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e015      	b.n	8001a60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1e4      	bne.n	8001a0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	223f      	movs	r2, #63	@ 0x3f
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a74:	4b8e      	ldr	r3, [pc, #568]	@ (8001cb0 <HAL_DMA_IRQHandler+0x248>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a8e      	ldr	r2, [pc, #568]	@ (8001cb4 <HAL_DMA_IRQHandler+0x24c>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	0a9b      	lsrs	r3, r3, #10
 8001a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a92:	2208      	movs	r2, #8
 8001a94:	409a      	lsls	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d01a      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0204 	bic.w	r2, r2, #4
 8001aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac0:	2208      	movs	r2, #8
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad8:	2201      	movs	r2, #1
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af6:	2201      	movs	r2, #1
 8001af8:	409a      	lsls	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b02:	f043 0202 	orr.w	r2, r3, #2
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0e:	2204      	movs	r2, #4
 8001b10:	409a      	lsls	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d012      	beq.n	8001b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00b      	beq.n	8001b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b38:	f043 0204 	orr.w	r2, r3, #4
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b44:	2210      	movs	r2, #16
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d043      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d03c      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b62:	2210      	movs	r2, #16
 8001b64:	409a      	lsls	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d018      	beq.n	8001baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d108      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d024      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
 8001b96:	e01f      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01b      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
 8001ba8:	e016      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0208 	bic.w	r2, r2, #8
 8001bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bdc:	2220      	movs	r2, #32
 8001bde:	409a      	lsls	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 808f 	beq.w	8001d08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8087 	beq.w	8001d08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfe:	2220      	movs	r2, #32
 8001c00:	409a      	lsls	r2, r3
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	d136      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0216 	bic.w	r2, r2, #22
 8001c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d103      	bne.n	8001c42 <HAL_DMA_IRQHandler+0x1da>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0208 	bic.w	r2, r2, #8
 8001c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c56:	223f      	movs	r2, #63	@ 0x3f
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d07e      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	4798      	blx	r3
        }
        return;
 8001c7e:	e079      	b.n	8001d74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01d      	beq.n	8001cca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d031      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4798      	blx	r3
 8001cac:	e02c      	b.n	8001d08 <HAL_DMA_IRQHandler+0x2a0>
 8001cae:	bf00      	nop
 8001cb0:	2000003c 	.word	0x2000003c
 8001cb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d023      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
 8001cc8:	e01e      	b.n	8001d08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10f      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0210 	bic.w	r2, r2, #16
 8001ce6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d032      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d022      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2205      	movs	r2, #5
 8001d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d307      	bcc.n	8001d50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f2      	bne.n	8001d34 <HAL_DMA_IRQHandler+0x2cc>
 8001d4e:	e000      	b.n	8001d52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
 8001d72:	e000      	b.n	8001d76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d74:	bf00      	nop
    }
  }
}
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b40      	cmp	r3, #64	@ 0x40
 8001da8:	d108      	bne.n	8001dbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dba:	e007      	b.n	8001dcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	3b10      	subs	r3, #16
 8001de8:	4a14      	ldr	r2, [pc, #80]	@ (8001e3c <DMA_CalcBaseAndBitshift+0x64>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001df2:	4a13      	ldr	r2, [pc, #76]	@ (8001e40 <DMA_CalcBaseAndBitshift+0x68>)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d909      	bls.n	8001e1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	1d1a      	adds	r2, r3, #4
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e18:	e007      	b.n	8001e2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e22:	f023 0303 	bic.w	r3, r3, #3
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	aaaaaaab 	.word	0xaaaaaaab
 8001e40:	0800a128 	.word	0x0800a128

08001e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11f      	bne.n	8001e9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d856      	bhi.n	8001f12 <DMA_CheckFifoParam+0xce>
 8001e64:	a201      	add	r2, pc, #4	@ (adr r2, 8001e6c <DMA_CheckFifoParam+0x28>)
 8001e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6a:	bf00      	nop
 8001e6c:	08001e7d 	.word	0x08001e7d
 8001e70:	08001e8f 	.word	0x08001e8f
 8001e74:	08001e7d 	.word	0x08001e7d
 8001e78:	08001f13 	.word	0x08001f13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d046      	beq.n	8001f16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e8c:	e043      	b.n	8001f16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e96:	d140      	bne.n	8001f1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e9c:	e03d      	b.n	8001f1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ea6:	d121      	bne.n	8001eec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d837      	bhi.n	8001f1e <DMA_CheckFifoParam+0xda>
 8001eae:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb4 <DMA_CheckFifoParam+0x70>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	08001ecb 	.word	0x08001ecb
 8001ebc:	08001ec5 	.word	0x08001ec5
 8001ec0:	08001edd 	.word	0x08001edd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec8:	e030      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ece:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d025      	beq.n	8001f22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eda:	e022      	b.n	8001f22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ee4:	d11f      	bne.n	8001f26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eea:	e01c      	b.n	8001f26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d903      	bls.n	8001efa <DMA_CheckFifoParam+0xb6>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d003      	beq.n	8001f00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ef8:	e018      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
      break;
 8001efe:	e015      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00e      	beq.n	8001f2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f10:	e00b      	b.n	8001f2a <DMA_CheckFifoParam+0xe6>
      break;
 8001f12:	bf00      	nop
 8001f14:	e00a      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f16:	bf00      	nop
 8001f18:	e008      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f1a:	bf00      	nop
 8001f1c:	e006      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f1e:	bf00      	nop
 8001f20:	e004      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f22:	bf00      	nop
 8001f24:	e002      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f26:	bf00      	nop
 8001f28:	e000      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f2a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e165      	b.n	8002224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8154 	bne.w	800221e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d005      	beq.n	8001f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d130      	bne.n	8001ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 0201 	and.w	r2, r3, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d017      	beq.n	800202c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80ae 	beq.w	800221e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b5d      	ldr	r3, [pc, #372]	@ (800223c <HAL_GPIO_Init+0x300>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	4a5c      	ldr	r2, [pc, #368]	@ (800223c <HAL_GPIO_Init+0x300>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d2:	4b5a      	ldr	r3, [pc, #360]	@ (800223c <HAL_GPIO_Init+0x300>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a58      	ldr	r2, [pc, #352]	@ (8002240 <HAL_GPIO_Init+0x304>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4f      	ldr	r2, [pc, #316]	@ (8002244 <HAL_GPIO_Init+0x308>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d025      	beq.n	8002156 <HAL_GPIO_Init+0x21a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4e      	ldr	r2, [pc, #312]	@ (8002248 <HAL_GPIO_Init+0x30c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <HAL_GPIO_Init+0x216>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4d      	ldr	r2, [pc, #308]	@ (800224c <HAL_GPIO_Init+0x310>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0x212>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4c      	ldr	r2, [pc, #304]	@ (8002250 <HAL_GPIO_Init+0x314>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0x20e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4b      	ldr	r2, [pc, #300]	@ (8002254 <HAL_GPIO_Init+0x318>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00d      	beq.n	8002146 <HAL_GPIO_Init+0x20a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4a      	ldr	r2, [pc, #296]	@ (8002258 <HAL_GPIO_Init+0x31c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <HAL_GPIO_Init+0x206>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a49      	ldr	r2, [pc, #292]	@ (800225c <HAL_GPIO_Init+0x320>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_GPIO_Init+0x202>
 800213a:	2306      	movs	r3, #6
 800213c:	e00c      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800213e:	2307      	movs	r3, #7
 8002140:	e00a      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002142:	2305      	movs	r3, #5
 8002144:	e008      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002146:	2304      	movs	r3, #4
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800214a:	2303      	movs	r3, #3
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800214e:	2302      	movs	r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002156:	2300      	movs	r3, #0
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002168:	4935      	ldr	r1, [pc, #212]	@ (8002240 <HAL_GPIO_Init+0x304>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002176:	4b3a      	ldr	r3, [pc, #232]	@ (8002260 <HAL_GPIO_Init+0x324>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800219a:	4a31      	ldr	r2, [pc, #196]	@ (8002260 <HAL_GPIO_Init+0x324>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002260 <HAL_GPIO_Init+0x324>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c4:	4a26      	ldr	r2, [pc, #152]	@ (8002260 <HAL_GPIO_Init+0x324>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ca:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <HAL_GPIO_Init+0x324>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002260 <HAL_GPIO_Init+0x324>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <HAL_GPIO_Init+0x324>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002218:	4a11      	ldr	r2, [pc, #68]	@ (8002260 <HAL_GPIO_Init+0x324>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3301      	adds	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	f67f ae96 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3724      	adds	r7, #36	@ 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40013800 	.word	0x40013800
 8002244:	40020000 	.word	0x40020000
 8002248:	40020400 	.word	0x40020400
 800224c:	40020800 	.word	0x40020800
 8002250:	40020c00 	.word	0x40020c00
 8002254:	40021000 	.word	0x40021000
 8002258:	40021400 	.word	0x40021400
 800225c:	40021800 	.word	0x40021800
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e001      	b.n	8002286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fd6a 	bl	8000d8c <HAL_GPIO_EXTI_Callback>
  }
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0e1      	b.n	800249a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a6d      	ldr	r2, [pc, #436]	@ (80024a4 <HAL_I2S_Init+0x1e0>)
 80022ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7fe fd99 	bl	8000e28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800230c:	f023 030f 	bic.w	r3, r3, #15
 8002310:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2202      	movs	r2, #2
 8002318:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d06f      	beq.n	8002402 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800232a:	2310      	movs	r3, #16
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e001      	b.n	8002334 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002330:	2320      	movs	r3, #32
 8002332:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b20      	cmp	r3, #32
 800233a:	d802      	bhi.n	8002342 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a58      	ldr	r2, [pc, #352]	@ (80024a8 <HAL_I2S_Init+0x1e4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_I2S_Init+0x92>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a56      	ldr	r2, [pc, #344]	@ (80024ac <HAL_I2S_Init+0x1e8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d104      	bne.n	8002360 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8002356:	2001      	movs	r0, #1
 8002358:	f001 f80a 	bl	8003370 <HAL_RCCEx_GetPeriphCLKFreq>
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	e003      	b.n	8002368 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002360:	2002      	movs	r0, #2
 8002362:	f001 f805 	bl	8003370 <HAL_RCCEx_GetPeriphCLKFreq>
 8002366:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002370:	d125      	bne.n	80023be <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d010      	beq.n	800239c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	fbb2 f2f3 	udiv	r2, r2, r3
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	461a      	mov	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	3305      	adds	r3, #5
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	e01f      	b.n	80023dc <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	461a      	mov	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	3305      	adds	r3, #5
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	e00e      	b.n	80023dc <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	461a      	mov	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	3305      	adds	r3, #5
 80023da:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4a34      	ldr	r2, [pc, #208]	@ (80024b0 <HAL_I2S_Init+0x1ec>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	08db      	lsrs	r3, r3, #3
 80023e6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e003      	b.n	800240a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002402:	2302      	movs	r3, #2
 8002404:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d902      	bls.n	8002416 <HAL_I2S_Init+0x152>
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2bff      	cmp	r3, #255	@ 0xff
 8002414:	d907      	bls.n	8002426 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f043 0210 	orr.w	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e039      	b.n	800249a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	ea42 0103 	orr.w	r1, r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	430a      	orrs	r2, r1
 8002438:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002444:	f023 030f 	bic.w	r3, r3, #15
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6851      	ldr	r1, [r2, #4]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6892      	ldr	r2, [r2, #8]
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6992      	ldr	r2, [r2, #24]
 800245c:	430a      	orrs	r2, r1
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002468:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b30      	cmp	r3, #48	@ 0x30
 8002470:	d003      	beq.n	800247a <HAL_I2S_Init+0x1b6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2bb0      	cmp	r3, #176	@ 0xb0
 8002478:	d107      	bne.n	800248a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002488:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	08002929 	.word	0x08002929
 80024a8:	40003800 	.word	0x40003800
 80024ac:	40003c00 	.word	0x40003c00
 80024b0:	cccccccd 	.word	0xcccccccd

080024b4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	4613      	mov	r3, r2
 80024c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_I2S_Receive_DMA+0x1a>
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e09d      	b.n	800260e <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d001      	beq.n	80024e2 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
 80024e0:	e095      	b.n	800260e <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_I2S_Receive_DMA+0x3e>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e08d      	b.n	800260e <HAL_I2S_Receive_DMA+0x15a>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2204      	movs	r2, #4
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d002      	beq.n	8002526 <HAL_I2S_Receive_DMA+0x72>
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d10a      	bne.n	800253c <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	865a      	strh	r2, [r3, #50]	@ 0x32
 800253a:	e005      	b.n	8002548 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	88fa      	ldrh	r2, [r7, #6]
 8002546:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254c:	4a32      	ldr	r2, [pc, #200]	@ (8002618 <HAL_I2S_Receive_DMA+0x164>)
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002554:	4a31      	ldr	r2, [pc, #196]	@ (800261c <HAL_I2S_Receive_DMA+0x168>)
 8002556:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255c:	4a30      	ldr	r2, [pc, #192]	@ (8002620 <HAL_I2S_Receive_DMA+0x16c>)
 800255e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800256e:	d10a      	bne.n	8002586 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	330c      	adds	r3, #12
 8002590:	4619      	mov	r1, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002596:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800259c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800259e:	f7ff f99b 	bl	80018d8 <HAL_DMA_Start_IT>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00f      	beq.n	80025c8 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	f043 0208 	orr.w	r2, r3, #8
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e022      	b.n	800260e <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d107      	bne.n	80025ee <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800260a:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	08002807 	.word	0x08002807
 800261c:	080027c5 	.word	0x080027c5
 8002620:	08002823 	.word	0x08002823

08002624 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002638:	d003      	beq.n	8002642 <HAL_I2S_DMAStop+0x1e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d155      	bne.n	80026ee <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00f      	beq.n	800266a <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f99a 	bl	8001988 <HAL_DMA_Abort>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f043 0208 	orr.w	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800266a:	2364      	movs	r3, #100	@ 0x64
 800266c:	2201      	movs	r2, #1
 800266e:	2102      	movs	r1, #2
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f9e3 	bl	8002a3c <I2S_WaitFlagStateUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002694:	2364      	movs	r3, #100	@ 0x64
 8002696:	2200      	movs	r2, #0
 8002698:	2180      	movs	r1, #128	@ 0x80
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f9ce 	bl	8002a3c <I2S_WaitFlagStateUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026cc:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0202 	bic.w	r2, r2, #2
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	e04d      	b.n	800278a <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026f6:	d004      	beq.n	8002702 <HAL_I2S_DMAStop+0xde>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002700:	d143      	bne.n	800278a <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00f      	beq.n	800272a <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f93a 	bl	8001988 <HAL_DMA_Abort>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	f043 0208 	orr.w	r2, r3, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002738:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002768:	d10c      	bne.n	8002784 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	75fb      	strb	r3, [r7, #23]
 8002782:	e002      	b.n	800278a <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8002792:	7dfb      	ldrb	r3, [r7, #23]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10e      	bne.n	80027f8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7fe fa9f 	bl	8000d3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002812:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7fe faa1 	bl	8000d5c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0203 	bic.w	r2, r2, #3
 800283e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	f043 0208 	orr.w	r2, r3, #8
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff ffa5 	bl	80027b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	1c9a      	adds	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10e      	bne.n	80028c2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff6d 	bl	800279c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	b292      	uxth	r2, r2
 80028de:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e4:	1c9a      	adds	r2, r3, #2
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10e      	bne.n	8002920 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002910:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe fa0e 	bl	8000d3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b04      	cmp	r3, #4
 8002942:	d13a      	bne.n	80029ba <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d109      	bne.n	8002962 <I2S_IRQHandler+0x3a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002958:	2b40      	cmp	r3, #64	@ 0x40
 800295a:	d102      	bne.n	8002962 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ffb4 	bl	80028ca <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002968:	2b40      	cmp	r3, #64	@ 0x40
 800296a:	d126      	bne.n	80029ba <I2S_IRQHandler+0x92>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b20      	cmp	r3, #32
 8002978:	d11f      	bne.n	80029ba <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002988:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ac:	f043 0202 	orr.w	r2, r3, #2
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff fefb 	bl	80027b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d136      	bne.n	8002a34 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d109      	bne.n	80029e4 <I2S_IRQHandler+0xbc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029da:	2b80      	cmp	r3, #128	@ 0x80
 80029dc:	d102      	bne.n	80029e4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ff45 	bl	800286e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d122      	bne.n	8002a34 <I2S_IRQHandler+0x10c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d11b      	bne.n	8002a34 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a0a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	f043 0204 	orr.w	r2, r3, #4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff febe 	bl	80027b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4c:	f7fe fd54 	bl	80014f8 <HAL_GetTick>
 8002a50:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002a52:	e018      	b.n	8002a86 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a5a:	d014      	beq.n	8002a86 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002a5c:	f7fe fd4c 	bl	80014f8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d902      	bls.n	8002a72 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e00f      	b.n	8002aa6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1d7      	bne.n	8002a54 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b40 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aca:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <HAL_PWREx_EnableOverDrive+0x90>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <HAL_PWREx_EnableOverDrive+0x94>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002adc:	f7fe fd0c 	bl	80014f8 <HAL_GetTick>
 8002ae0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ae2:	e009      	b.n	8002af8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ae4:	f7fe fd08 	bl	80014f8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002af2:	d901      	bls.n	8002af8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e01f      	b.n	8002b38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b04:	d1ee      	bne.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b06:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b0c:	f7fe fcf4 	bl	80014f8 <HAL_GetTick>
 8002b10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b12:	e009      	b.n	8002b28 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b14:	f7fe fcf0 	bl	80014f8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b22:	d901      	bls.n	8002b28 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e007      	b.n	8002b38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b28:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b34:	d1ee      	bne.n	8002b14 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	420e0040 	.word	0x420e0040
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	420e0044 	.word	0x420e0044

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0cc      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b68      	ldr	r3, [pc, #416]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d90c      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b65      	ldr	r3, [pc, #404]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d044      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d119      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d003      	beq.n	8002c0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e067      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b37      	ldr	r3, [pc, #220]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4934      	ldr	r1, [pc, #208]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c40:	f7fe fc5a 	bl	80014f8 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe fc56 	bl	80014f8 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e04f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d20c      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 fd95 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fbba 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	0800a118 	.word	0x0800a118
 8002d14:	2000003c 	.word	0x2000003c
 8002d18:	20000040 	.word	0x20000040

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	@ 0x30
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d54:	4b6f      	ldr	r3, [pc, #444]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d5a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d62:	496c      	ldr	r1, [pc, #432]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002d72:	2301      	movs	r3, #1
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d82:	4b64      	ldr	r3, [pc, #400]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d88:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d90:	4960      	ldr	r1, [pc, #384]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002da0:	2301      	movs	r3, #1
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d017      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002db0:	4b58      	ldr	r3, [pc, #352]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002db6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4955      	ldr	r1, [pc, #340]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d017      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dec:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002df2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dfa:	4946      	ldr	r1, [pc, #280]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 808a 	beq.w	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	4a38      	ldr	r2, [pc, #224]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e3a:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e46:	4b34      	ldr	r3, [pc, #208]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a33      	ldr	r2, [pc, #204]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e52:	f7fe fb51 	bl	80014f8 <HAL_GetTick>
 8002e56:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe fb4d 	bl	80014f8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e278      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e78:	4b26      	ldr	r3, [pc, #152]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e80:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d02f      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d028      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e96:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002eac:	4a19      	ldr	r2, [pc, #100]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eb2:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d114      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fb1b 	bl	80014f8 <HAL_GetTick>
 8002ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe fb17 	bl	80014f8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e240      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002edc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ee      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ef4:	d114      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002ef6:	4b07      	ldr	r3, [pc, #28]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f0a:	4902      	ldr	r1, [pc, #8]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
 8002f10:	e00c      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	42470e40 	.word	0x42470e40
 8002f20:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a49      	ldr	r2, [pc, #292]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f26:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002f2a:	6093      	str	r3, [r2, #8]
 8002f2c:	4b47      	ldr	r3, [pc, #284]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	4944      	ldr	r1, [pc, #272]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002f50:	4b3f      	ldr	r3, [pc, #252]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002f52:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002f60:	4b3a      	ldr	r3, [pc, #232]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	4937      	ldr	r1, [pc, #220]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f82:	4b32      	ldr	r3, [pc, #200]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f88:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f90:	492e      	ldr	r1, [pc, #184]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d011      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fa4:	4b29      	ldr	r3, [pc, #164]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002faa:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	4926      	ldr	r1, [pc, #152]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fda:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	491a      	ldr	r1, [pc, #104]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d011      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ffc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003004:	4911      	ldr	r1, [pc, #68]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003014:	d101      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003016:	2301      	movs	r3, #1
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d005      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003028:	f040 80ff 	bne.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003032:	f7fe fa61 	bl	80014f8 <HAL_GetTick>
 8003036:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003038:	e00e      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800303a:	f7fe fa5d 	bl	80014f8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d907      	bls.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e188      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800304c:	40023800 	.word	0x40023800
 8003050:	424711e0 	.word	0x424711e0
 8003054:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003058:	4b7e      	ldr	r3, [pc, #504]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ea      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	2b00      	cmp	r3, #0
 8003076:	d009      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003080:	2b00      	cmp	r3, #0
 8003082:	d028      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d124      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800308c:	4b71      	ldr	r3, [pc, #452]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003092:	0c1b      	lsrs	r3, r3, #16
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	3301      	adds	r3, #1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800309e:	4b6d      	ldr	r3, [pc, #436]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a4:	0e1b      	lsrs	r3, r3, #24
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	019b      	lsls	r3, r3, #6
 80030b6:	431a      	orrs	r2, r3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	3b01      	subs	r3, #1
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	431a      	orrs	r2, r3
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	071b      	lsls	r3, r3, #28
 80030ce:	4961      	ldr	r1, [pc, #388]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d035      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003100:	d130      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003102:	4b54      	ldr	r3, [pc, #336]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003114:	4b4f      	ldr	r3, [pc, #316]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800311a:	0f1b      	lsrs	r3, r3, #28
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	019b      	lsls	r3, r3, #6
 800312c:	431a      	orrs	r2, r3
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	3b01      	subs	r3, #1
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	431a      	orrs	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	071b      	lsls	r3, r3, #28
 8003144:	4943      	ldr	r1, [pc, #268]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800314c:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800314e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003152:	f023 021f 	bic.w	r2, r3, #31
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	3b01      	subs	r3, #1
 800315c:	493d      	ldr	r1, [pc, #244]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d029      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003178:	d124      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800317a:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800317c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800318c:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800318e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003192:	0f1b      	lsrs	r3, r3, #28
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	019b      	lsls	r3, r3, #6
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	3b01      	subs	r3, #1
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	431a      	orrs	r2, r3
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	431a      	orrs	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	071b      	lsls	r3, r3, #28
 80031bc:	4925      	ldr	r1, [pc, #148]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d016      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	3b01      	subs	r3, #1
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	071b      	lsls	r3, r3, #28
 80031f6:	4917      	ldr	r1, [pc, #92]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031fe:	4b16      	ldr	r3, [pc, #88]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003204:	f7fe f978 	bl	80014f8 <HAL_GetTick>
 8003208:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800320c:	f7fe f974 	bl	80014f8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e09f      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800322a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322c:	2b01      	cmp	r3, #1
 800322e:	f040 8095 	bne.w	800335c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003232:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003238:	f7fe f95e 	bl	80014f8 <HAL_GetTick>
 800323c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800323e:	e00f      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003240:	f7fe f95a 	bl	80014f8 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d908      	bls.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e085      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	42470068 	.word	0x42470068
 800325c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003260:	4b41      	ldr	r3, [pc, #260]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800326c:	d0e8      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800328a:	2b00      	cmp	r3, #0
 800328c:	d02b      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003292:	2b00      	cmp	r3, #0
 8003294:	d127      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003296:	4b34      	ldr	r3, [pc, #208]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	3301      	adds	r3, #1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	431a      	orrs	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	3b01      	subs	r3, #1
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	4928      	ldr	r1, [pc, #160]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032cc:	4b26      	ldr	r3, [pc, #152]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032d2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	3b01      	subs	r3, #1
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	4922      	ldr	r1, [pc, #136]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01d      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032fa:	d118      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003302:	0e1b      	lsrs	r3, r3, #24
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	019b      	lsls	r3, r3, #6
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	4910      	ldr	r1, [pc, #64]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800332e:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003334:	f7fe f8e0 	bl	80014f8 <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800333c:	f7fe f8dc 	bl	80014f8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e007      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800335a:	d1ef      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3730      	adds	r7, #48	@ 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	42470070 	.word	0x42470070

08003370 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003370:	b480      	push	{r7}
 8003372:	b089      	sub	sp, #36	@ 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	2b07      	cmp	r3, #7
 8003396:	f200 8224 	bhi.w	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800339a:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080035a3 	.word	0x080035a3
 80033a4:	080036cd 	.word	0x080036cd
 80033a8:	080037e3 	.word	0x080037e3
 80033ac:	080033c1 	.word	0x080033c1
 80033b0:	080037e3 	.word	0x080037e3
 80033b4:	080037e3 	.word	0x080037e3
 80033b8:	080037e3 	.word	0x080037e3
 80033bc:	080033c1 	.word	0x080033c1
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80033c0:	4ba8      	ldr	r3, [pc, #672]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033c6:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033d6:	f000 80d6 	beq.w	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033e0:	f200 80dd 	bhi.w	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033ea:	f000 809f 	beq.w	800352c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033f4:	f200 80d3 	bhi.w	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033fe:	d05b      	beq.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003406:	f200 80ca 	bhi.w	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003410:	f000 80b6 	beq.w	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800341a:	f200 80c0 	bhi.w	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003424:	f000 8082 	beq.w	800352c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800342e:	f200 80b6 	bhi.w	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800343e:	d03b      	beq.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 8003440:	e0ad      	b.n	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003442:	4b88      	ldr	r3, [pc, #544]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800344e:	4b85      	ldr	r3, [pc, #532]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003458:	4a83      	ldr	r2, [pc, #524]	@ (8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	e008      	b.n	8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003462:	4b80      	ldr	r3, [pc, #512]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800346c:	4a7f      	ldr	r2, [pc, #508]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003474:	4b7b      	ldr	r3, [pc, #492]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347a:	0e1b      	lsrs	r3, r3, #24
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 8003482:	4b78      	ldr	r3, [pc, #480]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	fb03 f202 	mul.w	r2, r3, r2
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800349c:	4b71      	ldr	r3, [pc, #452]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800349e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	3301      	adds	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	61fb      	str	r3, [r7, #28]
          break;
 80034b6:	e073      	b.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80034b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80034c4:	4b67      	ldr	r3, [pc, #412]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034ce:	4a66      	ldr	r2, [pc, #408]	@ (8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	e008      	b.n	80034ea <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80034d8:	4b62      	ldr	r3, [pc, #392]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034e2:	4a62      	ldr	r2, [pc, #392]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80034ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034f0:	0e1b      	lsrs	r3, r3, #24
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 80034f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	fb03 f202 	mul.w	r2, r3, r2
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003512:	4b54      	ldr	r3, [pc, #336]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	3301      	adds	r3, #1
 800351e:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	61fb      	str	r3, [r7, #28]
          break;
 800352a:	e039      	b.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800352c:	4b4d      	ldr	r3, [pc, #308]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d108      	bne.n	800354a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003538:	4b4a      	ldr	r3, [pc, #296]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003540:	4a49      	ldr	r2, [pc, #292]	@ (8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e007      	b.n	800355a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800354a:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003552:	4a46      	ldr	r2, [pc, #280]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800355a:	4b42      	ldr	r3, [pc, #264]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	0f1b      	lsrs	r3, r3, #28
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 8003566:	4b3f      	ldr	r3, [pc, #252]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	fb03 f202 	mul.w	r2, r3, r2
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	61fb      	str	r3, [r7, #28]
          break;
 800357e:	e00f      	b.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003580:	4b3b      	ldr	r3, [pc, #236]	@ (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003582:	61fb      	str	r3, [r7, #28]
          break;
 8003584:	e00c      	b.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003586:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003592:	4b35      	ldr	r3, [pc, #212]	@ (8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003594:	61fb      	str	r3, [r7, #28]
          break;
 8003596:	e003      	b.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003598:	4b34      	ldr	r3, [pc, #208]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800359a:	61fb      	str	r3, [r7, #28]
          break;
 800359c:	e000      	b.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800359e:	bf00      	nop
        }
      }
      break;
 80035a0:	e120      	b.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80035a2:	4b30      	ldr	r3, [pc, #192]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80035b4:	d079      	beq.n	80036aa <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80035bc:	f200 8082 	bhi.w	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c6:	d03c      	beq.n	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035ce:	d879      	bhi.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035dc:	d172      	bne.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80035de:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80035e0:	61fb      	str	r3, [r7, #28]
          break;
 80035e2:	e072      	b.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035f0:	d109      	bne.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80035f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035fc:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e008      	b.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003606:	4b17      	ldr	r3, [pc, #92]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800360c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003610:	4a15      	ldr	r2, [pc, #84]	@ (8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800361a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800361e:	099b      	lsrs	r3, r3, #6
 8003620:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800362c:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800362e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003632:	0f1b      	lsrs	r3, r3, #28
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	61fb      	str	r3, [r7, #28]
          break;
 8003640:	e043      	b.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003642:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800364e:	d111      	bne.n	8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003658:	4a04      	ldr	r2, [pc, #16]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	e010      	b.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	00f42400 	.word	0x00f42400
 800366c:	017d7840 	.word	0x017d7840
 8003670:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003674:	4b5f      	ldr	r3, [pc, #380]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800367c:	4a5e      	ldr	r2, [pc, #376]	@ (80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003684:	4b5b      	ldr	r3, [pc, #364]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	fb02 f303 	mul.w	r3, r2, r3
 8003694:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003696:	4b57      	ldr	r3, [pc, #348]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	0f1b      	lsrs	r3, r3, #28
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	61fb      	str	r3, [r7, #28]
          break;
 80036a8:	e00f      	b.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036aa:	4b52      	ldr	r3, [pc, #328]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036b6:	d102      	bne.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80036b8:	4b50      	ldr	r3, [pc, #320]	@ (80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80036ba:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80036bc:	e005      	b.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80036be:	4b4e      	ldr	r3, [pc, #312]	@ (80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80036c0:	61fb      	str	r3, [r7, #28]
          break;
 80036c2:	e002      	b.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
          break;
 80036c8:	bf00      	nop
        }
      }
      break;
 80036ca:	e08b      	b.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80036cc:	4b49      	ldr	r3, [pc, #292]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80036ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036d2:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80036de:	d06f      	beq.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80036e6:	d878      	bhi.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ee:	d03c      	beq.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036f6:	d870      	bhi.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003704:	d169      	bne.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003706:	4b3e      	ldr	r3, [pc, #248]	@ (8003800 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8003708:	61fb      	str	r3, [r7, #28]
          break;
 800370a:	e069      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800370c:	4b39      	ldr	r3, [pc, #228]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003714:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003718:	d109      	bne.n	800372e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800371a:	4b36      	ldr	r3, [pc, #216]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800371c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003724:	4a35      	ldr	r2, [pc, #212]	@ (80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	e008      	b.n	8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800372e:	4b31      	ldr	r3, [pc, #196]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003738:	4a2f      	ldr	r2, [pc, #188]	@ (80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003740:	4b2c      	ldr	r3, [pc, #176]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003754:	4b27      	ldr	r3, [pc, #156]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800375a:	0f1b      	lsrs	r3, r3, #28
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	61fb      	str	r3, [r7, #28]
          break;
 8003768:	e03a      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800376a:	4b22      	ldr	r3, [pc, #136]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003776:	d108      	bne.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003778:	4b1e      	ldr	r3, [pc, #120]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003780:	4a1e      	ldr	r2, [pc, #120]	@ (80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	e007      	b.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800378a:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003792:	4a19      	ldr	r2, [pc, #100]	@ (80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800379a:	4b16      	ldr	r3, [pc, #88]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80037ac:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0f1b      	lsrs	r3, r3, #28
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	61fb      	str	r3, [r7, #28]
          break;
 80037be:	e00f      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037c0:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037cc:	d102      	bne.n	80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80037ce:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80037d0:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80037d2:	e005      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80037d4:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80037d6:	61fb      	str	r3, [r7, #28]
          break;
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
          break;
 80037de:	bf00      	nop
        }
      }
      break;
 80037e0:	e000      	b.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 80037e2:	bf00      	nop
    }
  }
  return frequency;
 80037e4:	69fb      	ldr	r3, [r7, #28]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3724      	adds	r7, #36	@ 0x24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	017d7840 	.word	0x017d7840
 8003800:	00bb8000 	.word	0x00bb8000

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003808:	b0a6      	sub	sp, #152	@ 0x98
 800380a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800382a:	4bc8      	ldr	r3, [pc, #800]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b0c      	cmp	r3, #12
 8003834:	f200 817e 	bhi.w	8003b34 <HAL_RCC_GetSysClockFreq+0x330>
 8003838:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <HAL_RCC_GetSysClockFreq+0x3c>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003875 	.word	0x08003875
 8003844:	08003b35 	.word	0x08003b35
 8003848:	08003b35 	.word	0x08003b35
 800384c:	08003b35 	.word	0x08003b35
 8003850:	0800387d 	.word	0x0800387d
 8003854:	08003b35 	.word	0x08003b35
 8003858:	08003b35 	.word	0x08003b35
 800385c:	08003b35 	.word	0x08003b35
 8003860:	08003885 	.word	0x08003885
 8003864:	08003b35 	.word	0x08003b35
 8003868:	08003b35 	.word	0x08003b35
 800386c:	08003b35 	.word	0x08003b35
 8003870:	080039ef 	.word	0x080039ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003874:	4bb6      	ldr	r3, [pc, #728]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003876:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800387a:	e15f      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800387c:	4bb5      	ldr	r3, [pc, #724]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x350>)
 800387e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003882:	e15b      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003884:	4bb1      	ldr	r3, [pc, #708]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800388c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003890:	4bae      	ldr	r3, [pc, #696]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d031      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389c:	4bab      	ldr	r3, [pc, #684]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	2200      	movs	r2, #0
 80038a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80038b0:	2300      	movs	r3, #0
 80038b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80038b4:	4ba7      	ldr	r3, [pc, #668]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x350>)
 80038b6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80038ba:	462a      	mov	r2, r5
 80038bc:	fb03 f202 	mul.w	r2, r3, r2
 80038c0:	2300      	movs	r3, #0
 80038c2:	4621      	mov	r1, r4
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	4aa2      	ldr	r2, [pc, #648]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x350>)
 80038cc:	4621      	mov	r1, r4
 80038ce:	fba1 1202 	umull	r1, r2, r1, r2
 80038d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038d4:	460a      	mov	r2, r1
 80038d6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80038d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80038da:	4413      	add	r3, r2
 80038dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e2:	2200      	movs	r2, #0
 80038e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038e6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80038e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80038f0:	f7fc fcde 	bl	80002b0 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4613      	mov	r3, r2
 80038fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038fe:	e064      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003900:	4b92      	ldr	r3, [pc, #584]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	2200      	movs	r2, #0
 8003908:	653b      	str	r3, [r7, #80]	@ 0x50
 800390a:	657a      	str	r2, [r7, #84]	@ 0x54
 800390c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003914:	2300      	movs	r3, #0
 8003916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003918:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800391c:	4622      	mov	r2, r4
 800391e:	462b      	mov	r3, r5
 8003920:	f04f 0000 	mov.w	r0, #0
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	0159      	lsls	r1, r3, #5
 800392a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800392e:	0150      	lsls	r0, r2, #5
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4621      	mov	r1, r4
 8003936:	1a51      	subs	r1, r2, r1
 8003938:	6139      	str	r1, [r7, #16]
 800393a:	4629      	mov	r1, r5
 800393c:	eb63 0301 	sbc.w	r3, r3, r1
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800394e:	4659      	mov	r1, fp
 8003950:	018b      	lsls	r3, r1, #6
 8003952:	4651      	mov	r1, sl
 8003954:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003958:	4651      	mov	r1, sl
 800395a:	018a      	lsls	r2, r1, #6
 800395c:	4651      	mov	r1, sl
 800395e:	ebb2 0801 	subs.w	r8, r2, r1
 8003962:	4659      	mov	r1, fp
 8003964:	eb63 0901 	sbc.w	r9, r3, r1
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003974:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003978:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800397c:	4690      	mov	r8, r2
 800397e:	4699      	mov	r9, r3
 8003980:	4623      	mov	r3, r4
 8003982:	eb18 0303 	adds.w	r3, r8, r3
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	462b      	mov	r3, r5
 800398a:	eb49 0303 	adc.w	r3, r9, r3
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800399c:	4629      	mov	r1, r5
 800399e:	028b      	lsls	r3, r1, #10
 80039a0:	4621      	mov	r1, r4
 80039a2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a6:	4621      	mov	r1, r4
 80039a8:	028a      	lsls	r2, r1, #10
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b2:	2200      	movs	r2, #0
 80039b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80039b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039bc:	f7fc fc78 	bl	80002b0 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4613      	mov	r3, r2
 80039c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039ca:	4b60      	ldr	r3, [pc, #384]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	3301      	adds	r3, #1
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80039dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80039ec:	e0a6      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ee:	4b57      	ldr	r3, [pc, #348]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fa:	4b54      	ldr	r3, [pc, #336]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d02a      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	4b51      	ldr	r3, [pc, #324]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a1c:	fb03 f201 	mul.w	r2, r3, r1
 8003a20:	2300      	movs	r3, #0
 8003a22:	fb00 f303 	mul.w	r3, r0, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	4a4a      	ldr	r2, [pc, #296]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a2a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a30:	460a      	mov	r2, r1
 8003a32:	673a      	str	r2, [r7, #112]	@ 0x70
 8003a34:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a36:	4413      	add	r3, r2
 8003a38:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a3e:	2200      	movs	r2, #0
 8003a40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a42:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003a48:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003a4c:	f7fc fc30 	bl	80002b0 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4613      	mov	r3, r2
 8003a56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a5a:	e05b      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	2200      	movs	r2, #0
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6e:	623b      	str	r3, [r7, #32]
 8003a70:	2300      	movs	r3, #0
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a78:	4642      	mov	r2, r8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	f04f 0000 	mov.w	r0, #0
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	0159      	lsls	r1, r3, #5
 8003a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a8a:	0150      	lsls	r0, r2, #5
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4641      	mov	r1, r8
 8003a92:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a96:	4649      	mov	r1, r9
 8003a98:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003aa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003aac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ab0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ab4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	00eb      	lsls	r3, r5, #3
 8003ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ac6:	00e2      	lsls	r2, r4, #3
 8003ac8:	4614      	mov	r4, r2
 8003aca:	461d      	mov	r5, r3
 8003acc:	4643      	mov	r3, r8
 8003ace:	18e3      	adds	r3, r4, r3
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	eb45 0303 	adc.w	r3, r5, r3
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	028b      	lsls	r3, r1, #10
 8003aea:	4621      	mov	r1, r4
 8003aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af0:	4621      	mov	r1, r4
 8003af2:	028a      	lsls	r2, r1, #10
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003afc:	2200      	movs	r2, #0
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	61fa      	str	r2, [r7, #28]
 8003b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b06:	f7fc fbd3 	bl	80002b0 <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4613      	mov	r3, r2
 8003b10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b14:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	0f1b      	lsrs	r3, r3, #28
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b32:	e003      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3798      	adds	r7, #152	@ 0x98
 8003b44:	46bd      	mov	sp, r7
 8003b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	00f42400 	.word	0x00f42400
 8003b54:	017d7840 	.word	0x017d7840

08003b58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e28d      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8083 	beq.w	8003c7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b78:	4b94      	ldr	r3, [pc, #592]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d019      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b84:	4b91      	ldr	r3, [pc, #580]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b90:	4b8e      	ldr	r3, [pc, #568]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d112      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003baa:	4b88      	ldr	r3, [pc, #544]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4b84      	ldr	r3, [pc, #528]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d05b      	beq.n	8003c7c <HAL_RCC_OscConfig+0x124>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d157      	bne.n	8003c7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e25a      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x90>
 8003bda:	4b7c      	ldr	r3, [pc, #496]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a7b      	ldr	r2, [pc, #492]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01d      	b.n	8003c24 <HAL_RCC_OscConfig+0xcc>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0xb4>
 8003bf2:	4b76      	ldr	r3, [pc, #472]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a75      	ldr	r2, [pc, #468]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b73      	ldr	r3, [pc, #460]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a72      	ldr	r2, [pc, #456]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0xcc>
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a6e      	ldr	r2, [pc, #440]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b6c      	ldr	r3, [pc, #432]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6b      	ldr	r2, [pc, #428]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fc64 	bl	80014f8 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fd fc60 	bl	80014f8 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	@ 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e21f      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b61      	ldr	r3, [pc, #388]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0xdc>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fd fc50 	bl	80014f8 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fc4c 	bl	80014f8 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	@ 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e20b      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	4b57      	ldr	r3, [pc, #348]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x104>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d06f      	beq.n	8003d6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c8a:	4b50      	ldr	r3, [pc, #320]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d017      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003c96:	4b4d      	ldr	r3, [pc, #308]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d105      	bne.n	8003cae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cae:	4b47      	ldr	r3, [pc, #284]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b44      	ldr	r3, [pc, #272]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d116      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc6:	4b41      	ldr	r3, [pc, #260]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x186>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d001      	beq.n	8003cde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e1d3      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	4b3b      	ldr	r3, [pc, #236]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4937      	ldr	r1, [pc, #220]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	e03a      	b.n	8003d6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d020      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfc:	4b34      	ldr	r3, [pc, #208]	@ (8003dd0 <HAL_RCC_OscConfig+0x278>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fd fbf9 	bl	80014f8 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7fd fbf5 	bl	80014f8 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e1b4      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d28:	4b28      	ldr	r3, [pc, #160]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4925      	ldr	r1, [pc, #148]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	600b      	str	r3, [r1, #0]
 8003d3c:	e015      	b.n	8003d6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3e:	4b24      	ldr	r3, [pc, #144]	@ (8003dd0 <HAL_RCC_OscConfig+0x278>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fd fbd8 	bl	80014f8 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d4c:	f7fd fbd4 	bl	80014f8 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e193      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d036      	beq.n	8003de4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7e:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <HAL_RCC_OscConfig+0x27c>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fd fbb8 	bl	80014f8 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8c:	f7fd fbb4 	bl	80014f8 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e173      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x234>
 8003daa:	e01b      	b.n	8003de4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dac:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <HAL_RCC_OscConfig+0x27c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db2:	f7fd fba1 	bl	80014f8 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db8:	e00e      	b.n	8003dd8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dba:	f7fd fb9d 	bl	80014f8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d907      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e15c      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	42470000 	.word	0x42470000
 8003dd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	4b8a      	ldr	r3, [pc, #552]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ea      	bne.n	8003dba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8097 	beq.w	8003f20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df6:	4b83      	ldr	r3, [pc, #524]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	4b7f      	ldr	r3, [pc, #508]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e12:	4b7c      	ldr	r3, [pc, #496]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b79      	ldr	r3, [pc, #484]	@ (8004008 <HAL_RCC_OscConfig+0x4b0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2e:	4b76      	ldr	r3, [pc, #472]	@ (8004008 <HAL_RCC_OscConfig+0x4b0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a75      	ldr	r2, [pc, #468]	@ (8004008 <HAL_RCC_OscConfig+0x4b0>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fd fb5d 	bl	80014f8 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fd fb59 	bl	80014f8 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e118      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	4b6c      	ldr	r3, [pc, #432]	@ (8004008 <HAL_RCC_OscConfig+0x4b0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x31e>
 8003e68:	4b66      	ldr	r3, [pc, #408]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6c:	4a65      	ldr	r2, [pc, #404]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e74:	e01c      	b.n	8003eb0 <HAL_RCC_OscConfig+0x358>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x340>
 8003e7e:	4b61      	ldr	r3, [pc, #388]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	4a60      	ldr	r2, [pc, #384]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8e:	4a5d      	ldr	r2, [pc, #372]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0x358>
 8003e98:	4b5a      	ldr	r3, [pc, #360]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9c:	4a59      	ldr	r2, [pc, #356]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea4:	4b57      	ldr	r3, [pc, #348]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	4a56      	ldr	r2, [pc, #344]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003eaa:	f023 0304 	bic.w	r3, r3, #4
 8003eae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d015      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7fd fb1e 	bl	80014f8 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec0:	f7fd fb1a 	bl	80014f8 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0d7      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ee      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x368>
 8003ee2:	e014      	b.n	8003f0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fd fb08 	bl	80014f8 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fd fb04 	bl	80014f8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0c1      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f02:	4b40      	ldr	r3, [pc, #256]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1ee      	bne.n	8003eec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f14:	4b3b      	ldr	r3, [pc, #236]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	4a3a      	ldr	r2, [pc, #232]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80ad 	beq.w	8004084 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2a:	4b36      	ldr	r3, [pc, #216]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d060      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d145      	bne.n	8003fca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b33      	ldr	r3, [pc, #204]	@ (800400c <HAL_RCC_OscConfig+0x4b4>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fad8 	bl	80014f8 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fd fad4 	bl	80014f8 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e093      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	4b29      	ldr	r3, [pc, #164]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	019b      	lsls	r3, r3, #6
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	061b      	lsls	r3, r3, #24
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	071b      	lsls	r3, r3, #28
 8003f96:	491b      	ldr	r1, [pc, #108]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800400c <HAL_RCC_OscConfig+0x4b4>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fd faa9 	bl	80014f8 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fd faa5 	bl	80014f8 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e064      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbc:	4b11      	ldr	r3, [pc, #68]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x452>
 8003fc8:	e05c      	b.n	8004084 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b10      	ldr	r3, [pc, #64]	@ (800400c <HAL_RCC_OscConfig+0x4b4>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fa92 	bl	80014f8 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd fa8e 	bl	80014f8 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04d      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x480>
 8003ff6:	e045      	b.n	8004084 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e040      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
 8004004:	40023800 	.word	0x40023800
 8004008:	40007000 	.word	0x40007000
 800400c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004010:	4b1f      	ldr	r3, [pc, #124]	@ (8004090 <HAL_RCC_OscConfig+0x538>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d030      	beq.n	8004080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d129      	bne.n	8004080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d122      	bne.n	8004080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004048:	4293      	cmp	r3, r2
 800404a:	d119      	bne.n	8004080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	3b01      	subs	r3, #1
 800405a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d10f      	bne.n	8004080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d107      	bne.n	8004080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40023800 	.word	0x40023800

08004094 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e022      	b.n	80040ec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d105      	bne.n	80040be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fc ff77 	bl	8000fac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2203      	movs	r2, #3
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f814 	bl	80040f4 <HAL_SD_InitCard>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e00a      	b.n	80040ec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80040f4:	b5b0      	push	{r4, r5, r7, lr}
 80040f6:	b08e      	sub	sp, #56	@ 0x38
 80040f8:	af04      	add	r7, sp, #16
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004110:	2376      	movs	r3, #118	@ 0x76
 8004112:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681d      	ldr	r5, [r3, #0]
 8004118:	466c      	mov	r4, sp
 800411a:	f107 0314 	add.w	r3, r7, #20
 800411e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004126:	f107 0308 	add.w	r3, r7, #8
 800412a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412c:	4628      	mov	r0, r5
 800412e:	f000 ff39 	bl	8004fa4 <SDIO_Init>
 8004132:	4603      	mov	r3, r0
 8004134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e04f      	b.n	80041e4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004144:	4b29      	ldr	r3, [pc, #164]	@ (80041ec <HAL_SD_InitCard+0xf8>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f000 ff71 	bl	8005036 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004154:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <HAL_SD_InitCard+0xf8>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800415a:	2002      	movs	r0, #2
 800415c:	f7fd f9d8 	bl	8001510 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fe69 	bl	8004e38 <SD_PowerON>
 8004166:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e02e      	b.n	80041e4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fd88 	bl	8004c9c <SD_InitCard>
 800418c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e01b      	b.n	80041e4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 ffd0 	bl	800515a <SDMMC_CmdBlockLength>
 80041ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00f      	beq.n	80041e2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a0a      	ldr	r2, [pc, #40]	@ (80041f0 <HAL_SD_InitCard+0xfc>)
 80041c8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3728      	adds	r7, #40	@ 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bdb0      	pop	{r4, r5, r7, pc}
 80041ec:	422580a0 	.word	0x422580a0
 80041f0:	004005ff 	.word	0x004005ff

080041f4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b092      	sub	sp, #72	@ 0x48
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004202:	f7fd f979 	bl	80014f8 <HAL_GetTick>
 8004206:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d107      	bne.n	8004226 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e1bd      	b.n	80045a2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	f040 81b0 	bne.w	8004594 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800423a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	441a      	add	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004244:	429a      	cmp	r2, r3
 8004246:	d907      	bls.n	8004258 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e1a4      	b.n	80045a2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2203      	movs	r2, #3
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2200      	movs	r2, #0
 8004266:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426c:	2b01      	cmp	r3, #1
 800426e:	d002      	beq.n	8004276 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	025b      	lsls	r3, r3, #9
 8004274:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800427a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	025b      	lsls	r3, r3, #9
 8004280:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004282:	2390      	movs	r3, #144	@ 0x90
 8004284:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004286:	2302      	movs	r3, #2
 8004288:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800428a:	2300      	movs	r3, #0
 800428c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800428e:	2301      	movs	r3, #1
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f107 0214 	add.w	r2, r7, #20
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f000 ff30 	bl	8005102 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d90a      	bls.n	80042be <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2202      	movs	r2, #2
 80042ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 ff94 	bl	80051e2 <SDMMC_CmdReadMultiBlock>
 80042ba:	6478      	str	r0, [r7, #68]	@ 0x44
 80042bc:	e009      	b.n	80042d2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 ff67 	bl	800519e <SDMMC_CmdReadSingleBlock>
 80042d0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80042d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a7a      	ldr	r2, [pc, #488]	@ (80044c8 <HAL_SD_ReadBlocks+0x2d4>)
 80042de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e151      	b.n	80045a2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004302:	e061      	b.n	80043c8 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d03c      	beq.n	800438c <HAL_SD_ReadBlocks+0x198>
 8004312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d039      	beq.n	800438c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004318:	2300      	movs	r3, #0
 800431a:	643b      	str	r3, [r7, #64]	@ 0x40
 800431c:	e033      	b.n	8004386 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fe69 	bl	8004ffa <SDIO_ReadFIFO>
 8004328:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800432a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432c:	b2da      	uxtb	r2, r3
 800432e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004330:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004334:	3301      	adds	r3, #1
 8004336:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433a:	3b01      	subs	r3, #1
 800433c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800433e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	b2da      	uxtb	r2, r3
 8004344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004346:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434a:	3301      	adds	r3, #1
 800434c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800434e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004350:	3b01      	subs	r3, #1
 8004352:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004356:	0c1b      	lsrs	r3, r3, #16
 8004358:	b2da      	uxtb	r2, r3
 800435a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800435e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004360:	3301      	adds	r3, #1
 8004362:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004366:	3b01      	subs	r3, #1
 8004368:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800436a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436c:	0e1b      	lsrs	r3, r3, #24
 800436e:	b2da      	uxtb	r2, r3
 8004370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004372:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004376:	3301      	adds	r3, #1
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800437a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437c:	3b01      	subs	r3, #1
 800437e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004382:	3301      	adds	r3, #1
 8004384:	643b      	str	r3, [r7, #64]	@ 0x40
 8004386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004388:	2b07      	cmp	r3, #7
 800438a:	d9c8      	bls.n	800431e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800438c:	f7fd f8b4 	bl	80014f8 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004398:	429a      	cmp	r2, r3
 800439a:	d902      	bls.n	80043a2 <HAL_SD_ReadBlocks+0x1ae>
 800439c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d112      	bne.n	80043c8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a48      	ldr	r2, [pc, #288]	@ (80044c8 <HAL_SD_ReadBlocks+0x2d4>)
 80043a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0ec      	b.n	80045a2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ce:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d096      	beq.n	8004304 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d022      	beq.n	800442a <HAL_SD_ReadBlocks+0x236>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d91f      	bls.n	800442a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d01b      	beq.n	800442a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 ff5a 	bl	80052b0 <SDMMC_CmdStopTransfer>
 80043fc:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80043fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004400:	2b00      	cmp	r3, #0
 8004402:	d012      	beq.n	800442a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2f      	ldr	r2, [pc, #188]	@ (80044c8 <HAL_SD_ReadBlocks+0x2d4>)
 800440a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004412:	431a      	orrs	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e0bb      	b.n	80045a2 <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d012      	beq.n	800445e <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a22      	ldr	r2, [pc, #136]	@ (80044c8 <HAL_SD_ReadBlocks+0x2d4>)
 800443e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	f043 0208 	orr.w	r2, r3, #8
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0a1      	b.n	80045a2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d012      	beq.n	8004492 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a15      	ldr	r2, [pc, #84]	@ (80044c8 <HAL_SD_ReadBlocks+0x2d4>)
 8004472:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	f043 0202 	orr.w	r2, r3, #2
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e087      	b.n	80045a2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b00      	cmp	r3, #0
 800449e:	d064      	beq.n	800456a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a08      	ldr	r2, [pc, #32]	@ (80044c8 <HAL_SD_ReadBlocks+0x2d4>)
 80044a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ac:	f043 0220 	orr.w	r2, r3, #32
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06d      	b.n	80045a2 <HAL_SD_ReadBlocks+0x3ae>
 80044c6:	bf00      	nop
 80044c8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fd92 	bl	8004ffa <SDIO_ReadFIFO>
 80044d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80044d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044de:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80044e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e2:	3301      	adds	r3, #1
 80044e4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80044e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e8:	3b01      	subs	r3, #1
 80044ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80044ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80044f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f8:	3301      	adds	r3, #1
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80044fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fe:	3b01      	subs	r3, #1
 8004500:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	b2da      	uxtb	r2, r3
 8004508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800450c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450e:	3301      	adds	r3, #1
 8004510:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004514:	3b01      	subs	r3, #1
 8004516:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451a:	0e1b      	lsrs	r3, r3, #24
 800451c:	b2da      	uxtb	r2, r3
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004520:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004524:	3301      	adds	r3, #1
 8004526:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800452a:	3b01      	subs	r3, #1
 800452c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800452e:	f7fc ffe3 	bl	80014f8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800453a:	429a      	cmp	r2, r3
 800453c:	d902      	bls.n	8004544 <HAL_SD_ReadBlocks+0x350>
 800453e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004540:	2b00      	cmp	r3, #0
 8004542:	d112      	bne.n	800456a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a18      	ldr	r2, [pc, #96]	@ (80045ac <HAL_SD_ReadBlocks+0x3b8>)
 800454a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e01b      	b.n	80045a2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_SD_ReadBlocks+0x38a>
 8004578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1a6      	bne.n	80044cc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004586:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e006      	b.n	80045a2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004598:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3748      	adds	r7, #72	@ 0x48
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	004005ff 	.word	0x004005ff

080045b0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b092      	sub	sp, #72	@ 0x48
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80045be:	f7fc ff9b 	bl	80014f8 <HAL_GetTick>
 80045c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d107      	bne.n	80045e2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e165      	b.n	80048ae <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	f040 8158 	bne.w	80048a0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	441a      	add	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004600:	429a      	cmp	r2, r3
 8004602:	d907      	bls.n	8004614 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e14c      	b.n	80048ae <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2203      	movs	r2, #3
 8004618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2200      	movs	r2, #0
 8004622:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004628:	2b01      	cmp	r3, #1
 800462a:	d002      	beq.n	8004632 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800462c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462e:	025b      	lsls	r3, r3, #9
 8004630:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004636:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	025b      	lsls	r3, r3, #9
 800463c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800463e:	2390      	movs	r3, #144	@ 0x90
 8004640:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004646:	2300      	movs	r3, #0
 8004648:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800464a:	2301      	movs	r3, #1
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f107 0218 	add.w	r2, r7, #24
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fd52 	bl	8005102 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d90a      	bls.n	800467a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fdfa 	bl	800526a <SDMMC_CmdWriteMultiBlock>
 8004676:	6478      	str	r0, [r7, #68]	@ 0x44
 8004678:	e009      	b.n	800468e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2210      	movs	r2, #16
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fdcd 	bl	8005226 <SDMMC_CmdWriteSingleBlock>
 800468c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800468e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004690:	2b00      	cmp	r3, #0
 8004692:	d012      	beq.n	80046ba <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a87      	ldr	r2, [pc, #540]	@ (80048b8 <HAL_SD_WriteBlocks+0x308>)
 800469a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0f9      	b.n	80048ae <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80046be:	e065      	b.n	800478c <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d040      	beq.n	8004750 <HAL_SD_WriteBlocks+0x1a0>
 80046ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d03d      	beq.n	8004750 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046d8:	e037      	b.n	800474a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80046da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80046e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e2:	3301      	adds	r3, #1
 80046e4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80046e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e8:	3b01      	subs	r3, #1
 80046ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80046ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	021a      	lsls	r2, r3, #8
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80046f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fa:	3301      	adds	r3, #1
 80046fc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80046fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004700:	3b01      	subs	r3, #1
 8004702:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	041a      	lsls	r2, r3, #16
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004712:	3301      	adds	r3, #1
 8004714:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004718:	3b01      	subs	r3, #1
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800471c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	061a      	lsls	r2, r3, #24
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800472a:	3301      	adds	r3, #1
 800472c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800472e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004730:	3b01      	subs	r3, #1
 8004732:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f107 0214 	add.w	r2, r7, #20
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fc68 	bl	8005014 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004746:	3301      	adds	r3, #1
 8004748:	643b      	str	r3, [r7, #64]	@ 0x40
 800474a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800474c:	2b07      	cmp	r3, #7
 800474e:	d9c4      	bls.n	80046da <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004750:	f7fc fed2 	bl	80014f8 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800475c:	429a      	cmp	r2, r3
 800475e:	d902      	bls.n	8004766 <HAL_SD_WriteBlocks+0x1b6>
 8004760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004762:	2b00      	cmp	r3, #0
 8004764:	d112      	bne.n	800478c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a53      	ldr	r2, [pc, #332]	@ (80048b8 <HAL_SD_WriteBlocks+0x308>)
 800476c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004774:	431a      	orrs	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e090      	b.n	80048ae <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004792:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8004796:	2b00      	cmp	r3, #0
 8004798:	d092      	beq.n	80046c0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d022      	beq.n	80047ee <HAL_SD_WriteBlocks+0x23e>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d91f      	bls.n	80047ee <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d01b      	beq.n	80047ee <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fd78 	bl	80052b0 <SDMMC_CmdStopTransfer>
 80047c0:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80047c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d012      	beq.n	80047ee <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3a      	ldr	r2, [pc, #232]	@ (80048b8 <HAL_SD_WriteBlocks+0x308>)
 80047ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047d6:	431a      	orrs	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e05f      	b.n	80048ae <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d012      	beq.n	8004822 <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a2d      	ldr	r2, [pc, #180]	@ (80048b8 <HAL_SD_WriteBlocks+0x308>)
 8004802:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	f043 0208 	orr.w	r2, r3, #8
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e045      	b.n	80048ae <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d012      	beq.n	8004856 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a20      	ldr	r2, [pc, #128]	@ (80048b8 <HAL_SD_WriteBlocks+0x308>)
 8004836:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	f043 0202 	orr.w	r2, r3, #2
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e02b      	b.n	80048ae <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	d012      	beq.n	800488a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a13      	ldr	r2, [pc, #76]	@ (80048b8 <HAL_SD_WriteBlocks+0x308>)
 800486a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	f043 0210 	orr.w	r2, r3, #16
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e011      	b.n	80048ae <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004892:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e006      	b.n	80048ae <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3748      	adds	r7, #72	@ 0x48
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	004005ff 	.word	0x004005ff

080048bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ca:	0f9b      	lsrs	r3, r3, #30
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048d6:	0e9b      	lsrs	r3, r3, #26
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e8:	0e1b      	lsrs	r3, r3, #24
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048fa:	0c1b      	lsrs	r3, r3, #16
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	b2da      	uxtb	r2, r3
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004912:	b2da      	uxtb	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800491c:	0d1b      	lsrs	r3, r3, #20
 800491e:	b29a      	uxth	r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	b2da      	uxtb	r2, r3
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800493a:	0bdb      	lsrs	r3, r3, #15
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	b2da      	uxtb	r2, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800494c:	0b9b      	lsrs	r3, r3, #14
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	b2da      	uxtb	r2, r3
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800495e:	0b5b      	lsrs	r3, r3, #13
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	b2da      	uxtb	r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004970:	0b1b      	lsrs	r3, r3, #12
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	b2da      	uxtb	r2, r3
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2200      	movs	r2, #0
 8004982:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004988:	2b00      	cmp	r3, #0
 800498a:	d163      	bne.n	8004a54 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004990:	009a      	lsls	r2, r3, #2
 8004992:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004996:	4013      	ands	r3, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800499c:	0f92      	lsrs	r2, r2, #30
 800499e:	431a      	orrs	r2, r3
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049a8:	0edb      	lsrs	r3, r3, #27
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ba:	0e1b      	lsrs	r3, r3, #24
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049cc:	0d5b      	lsrs	r3, r3, #21
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049de:	0c9b      	lsrs	r3, r3, #18
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f0:	0bdb      	lsrs	r3, r3, #15
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	7e1b      	ldrb	r3, [r3, #24]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	3302      	adds	r3, #2
 8004a14:	2201      	movs	r2, #1
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004a1e:	fb03 f202 	mul.w	r2, r3, r2
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	7a1b      	ldrb	r3, [r3, #8]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	2201      	movs	r2, #1
 8004a32:	409a      	lsls	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004a40:	0a52      	lsrs	r2, r2, #9
 8004a42:	fb03 f202 	mul.w	r2, r3, r2
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a50:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a52:	e031      	b.n	8004ab8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d11d      	bne.n	8004a98 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a60:	041b      	lsls	r3, r3, #16
 8004a62:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	3301      	adds	r3, #1
 8004a78:	029a      	lsls	r2, r3, #10
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a8c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a96:	e00f      	b.n	8004ab8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a58      	ldr	r2, [pc, #352]	@ (8004c00 <HAL_SD_GetCardCSD+0x344>)
 8004a9e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e09d      	b.n	8004bf4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004abc:	0b9b      	lsrs	r3, r3, #14
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ace:	09db      	lsrs	r3, r3, #7
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af0:	0fdb      	lsrs	r3, r3, #31
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afc:	0f5b      	lsrs	r3, r3, #29
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0e:	0e9b      	lsrs	r3, r3, #26
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b20:	0d9b      	lsrs	r3, r3, #22
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b32:	0d5b      	lsrs	r3, r3, #21
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	0bdb      	lsrs	r3, r3, #15
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b76:	0b9b      	lsrs	r3, r3, #14
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8a:	0b5b      	lsrs	r3, r3, #13
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	0b1b      	lsrs	r3, r3, #12
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	0a9b      	lsrs	r3, r3, #10
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	004005ff 	.word	0x004005ff

08004c04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004c68:	f107 030c 	add.w	r3, r7, #12
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f970 	bl	8004f54 <SD_SendStatus>
 8004c74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	0a5b      	lsrs	r3, r3, #9
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004c92:	693b      	ldr	r3, [r7, #16]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004c9c:	b5b0      	push	{r4, r5, r7, lr}
 8004c9e:	b094      	sub	sp, #80	@ 0x50
 8004ca0:	af04      	add	r7, sp, #16
 8004ca2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 f9d0 	bl	8005052 <SDIO_GetPowerState>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cb8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004cbc:	e0b8      	b.n	8004e30 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d02f      	beq.n	8004d26 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fbb7 	bl	800543e <SDMMC_CmdSendCID>
 8004cd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <SD_InitCard+0x40>
    {
      return errorstate;
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cda:	e0a9      	b.n	8004e30 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f9fa 	bl	80050dc <SDIO_GetResponse>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2104      	movs	r1, #4
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f9f1 	bl	80050dc <SDIO_GetResponse>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2108      	movs	r1, #8
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 f9e8 	bl	80050dc <SDIO_GetResponse>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	210c      	movs	r1, #12
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 f9df 	bl	80050dc <SDIO_GetResponse>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d00d      	beq.n	8004d4a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f107 020e 	add.w	r2, r7, #14
 8004d36:	4611      	mov	r1, r2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fbbd 	bl	80054b8 <SDMMC_CmdSetRelAdd>
 8004d3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <SD_InitCard+0xae>
    {
      return errorstate;
 8004d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d48:	e072      	b.n	8004e30 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d036      	beq.n	8004dc0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004d52:	89fb      	ldrh	r3, [r7, #14]
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f000 fb87 	bl	800547a <SDMMC_CmdSendCSD>
 8004d6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d76:	e05b      	b.n	8004e30 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f9ac 	bl	80050dc <SDIO_GetResponse>
 8004d84:	4602      	mov	r2, r0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2104      	movs	r1, #4
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 f9a3 	bl	80050dc <SDIO_GetResponse>
 8004d96:	4602      	mov	r2, r0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2108      	movs	r1, #8
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f99a 	bl	80050dc <SDIO_GetResponse>
 8004da8:	4602      	mov	r2, r0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	210c      	movs	r1, #12
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 f991 	bl	80050dc <SDIO_GetResponse>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2104      	movs	r1, #4
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 f988 	bl	80050dc <SDIO_GetResponse>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	0d1a      	lsrs	r2, r3, #20
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004dd4:	f107 0310 	add.w	r3, r7, #16
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff fd6e 	bl	80048bc <HAL_SD_GetCardCSD>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004de6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004dea:	e021      	b.n	8004e30 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df4:	041b      	lsls	r3, r3, #16
 8004df6:	2200      	movs	r2, #0
 8004df8:	461c      	mov	r4, r3
 8004dfa:	4615      	mov	r5, r2
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	462b      	mov	r3, r5
 8004e00:	4608      	mov	r0, r1
 8004e02:	f000 fa77 	bl	80052f4 <SDMMC_CmdSelDesel>
 8004e06:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <SD_InitCard+0x176>
  {
    return errorstate;
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e10:	e00e      	b.n	8004e30 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681d      	ldr	r5, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	466c      	mov	r4, sp
 8004e1a:	f103 0210 	add.w	r2, r3, #16
 8004e1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e24:	3304      	adds	r3, #4
 8004e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f000 f8bb 	bl	8004fa4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3740      	adds	r7, #64	@ 0x40
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bdb0      	pop	{r4, r5, r7, pc}

08004e38 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fa72 	bl	800533a <SDMMC_CmdGoIdleState>
 8004e56:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	e072      	b.n	8004f48 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fa85 	bl	8005376 <SDMMC_CmdOperCond>
 8004e6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fa5b 	bl	800533a <SDMMC_CmdGoIdleState>
 8004e84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	e05b      	b.n	8004f48 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d137      	bne.n	8004f0e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fa85 	bl	80053b4 <SDMMC_CmdAppCommand>
 8004eaa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d02d      	beq.n	8004f0e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004eb2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004eb6:	e047      	b.n	8004f48 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fa78 	bl	80053b4 <SDMMC_CmdAppCommand>
 8004ec4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <SD_PowerON+0x98>
    {
      return errorstate;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	e03b      	b.n	8004f48 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	491e      	ldr	r1, [pc, #120]	@ (8004f50 <SD_PowerON+0x118>)
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fa8e 	bl	80053f8 <SDMMC_CmdAppOperCommand>
 8004edc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ee4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004ee8:	e02e      	b.n	8004f48 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f8f3 	bl	80050dc <SDIO_GetResponse>
 8004ef6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	0fdb      	lsrs	r3, r3, #31
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <SD_PowerON+0xcc>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <SD_PowerON+0xce>
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]

    count++;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d802      	bhi.n	8004f1e <SD_PowerON+0xe6>
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0cc      	beq.n	8004eb8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d902      	bls.n	8004f2e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004f28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f2c:	e00c      	b.n	8004f48 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f3e:	e002      	b.n	8004f46 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	c1100000 	.word	0xc1100000

08004f54 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004f64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f68:	e018      	b.n	8004f9c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f000 fabf 	bl	80054fa <SDMMC_CmdSendStatus>
 8004f7c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	e009      	b.n	8004f9c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f8a4 	bl	80050dc <SDIO_GetResponse>
 8004f94:	4602      	mov	r2, r0
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	f107 001c 	add.w	r0, r7, #28
 8004fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004fba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004fbe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004fc2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004fc6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004fca:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004fce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004fde:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	b004      	add	sp, #16
 8004ff8:	4770      	bx	lr

08004ffa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2203      	movs	r2, #3
 8005042:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0303 	and.w	r3, r3, #3
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800508c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005092:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005098:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80050a8:	f023 030f 	bic.w	r3, r3, #15
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	b2db      	uxtb	r3, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3314      	adds	r3, #20
 80050ea:	461a      	mov	r2, r3
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	4413      	add	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
}  
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005128:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800512e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005134:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800514c:	2300      	movs	r3, #0

}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b088      	sub	sp, #32
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005168:	2310      	movs	r3, #16
 800516a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800516c:	2340      	movs	r3, #64	@ 0x40
 800516e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005178:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800517a:	f107 0308 	add.w	r3, r7, #8
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ff74 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518a:	2110      	movs	r1, #16
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f9d7 	bl	8005540 <SDMMC_GetCmdResp1>
 8005192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005194:	69fb      	ldr	r3, [r7, #28]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3720      	adds	r7, #32
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b088      	sub	sp, #32
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80051ac:	2311      	movs	r3, #17
 80051ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051b0:	2340      	movs	r3, #64	@ 0x40
 80051b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051be:	f107 0308 	add.w	r3, r7, #8
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff ff52 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80051ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ce:	2111      	movs	r1, #17
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f9b5 	bl	8005540 <SDMMC_GetCmdResp1>
 80051d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051d8:	69fb      	ldr	r3, [r7, #28]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b088      	sub	sp, #32
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80051f0:	2312      	movs	r3, #18
 80051f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051f4:	2340      	movs	r3, #64	@ 0x40
 80051f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051f8:	2300      	movs	r3, #0
 80051fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005200:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005202:	f107 0308 	add.w	r3, r7, #8
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ff30 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800520e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005212:	2112      	movs	r1, #18
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f993 	bl	8005540 <SDMMC_GetCmdResp1>
 800521a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800521c:	69fb      	ldr	r3, [r7, #28]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b088      	sub	sp, #32
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005234:	2318      	movs	r3, #24
 8005236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005238:	2340      	movs	r3, #64	@ 0x40
 800523a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005246:	f107 0308 	add.w	r3, r7, #8
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ff0e 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005256:	2118      	movs	r1, #24
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f971 	bl	8005540 <SDMMC_GetCmdResp1>
 800525e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005260:	69fb      	ldr	r3, [r7, #28]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b088      	sub	sp, #32
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005278:	2319      	movs	r3, #25
 800527a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800527c:	2340      	movs	r3, #64	@ 0x40
 800527e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005280:	2300      	movs	r3, #0
 8005282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005288:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800528a:	f107 0308 	add.w	r3, r7, #8
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff feec 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529a:	2119      	movs	r1, #25
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f94f 	bl	8005540 <SDMMC_GetCmdResp1>
 80052a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052a4:	69fb      	ldr	r3, [r7, #28]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80052bc:	230c      	movs	r3, #12
 80052be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052c0:	2340      	movs	r3, #64	@ 0x40
 80052c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff feca 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80052da:	4a05      	ldr	r2, [pc, #20]	@ (80052f0 <SDMMC_CmdStopTransfer+0x40>)
 80052dc:	210c      	movs	r1, #12
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f92e 	bl	8005540 <SDMMC_GetCmdResp1>
 80052e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052e6:	69fb      	ldr	r3, [r7, #28]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	05f5e100 	.word	0x05f5e100

080052f4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	@ 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005304:	2307      	movs	r3, #7
 8005306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005308:	2340      	movs	r3, #64	@ 0x40
 800530a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800530c:	2300      	movs	r3, #0
 800530e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005310:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005314:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005316:	f107 0310 	add.w	r3, r7, #16
 800531a:	4619      	mov	r1, r3
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff fea6 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005326:	2107      	movs	r1, #7
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f909 	bl	8005540 <SDMMC_GetCmdResp1>
 800532e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005332:	4618      	mov	r0, r3
 8005334:	3728      	adds	r7, #40	@ 0x28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b088      	sub	sp, #32
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800534a:	2300      	movs	r3, #0
 800534c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005356:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005358:	f107 0308 	add.w	r3, r7, #8
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fe85 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fb23 	bl	80059b0 <SDMMC_GetCmdError>
 800536a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800536c:	69fb      	ldr	r3, [r7, #28]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b088      	sub	sp, #32
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800537e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005384:	2308      	movs	r3, #8
 8005386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005388:	2340      	movs	r3, #64	@ 0x40
 800538a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005394:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005396:	f107 0308 	add.w	r3, r7, #8
 800539a:	4619      	mov	r1, r3
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff fe66 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fab6 	bl	8005914 <SDMMC_GetCmdResp7>
 80053a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053aa:	69fb      	ldr	r3, [r7, #28]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80053c2:	2337      	movs	r3, #55	@ 0x37
 80053c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053c6:	2340      	movs	r3, #64	@ 0x40
 80053c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053d4:	f107 0308 	add.w	r3, r7, #8
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fe47 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80053e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e4:	2137      	movs	r1, #55	@ 0x37
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f8aa 	bl	8005540 <SDMMC_GetCmdResp1>
 80053ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053ee:	69fb      	ldr	r3, [r7, #28]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005408:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800540c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800540e:	2329      	movs	r3, #41	@ 0x29
 8005410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005412:	2340      	movs	r3, #64	@ 0x40
 8005414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800541a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800541e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005420:	f107 0308 	add.w	r3, r7, #8
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff fe21 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f9bd 	bl	80057ac <SDMMC_GetCmdResp3>
 8005432:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005434:	69fb      	ldr	r3, [r7, #28]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3720      	adds	r7, #32
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b088      	sub	sp, #32
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800544a:	2302      	movs	r3, #2
 800544c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800544e:	23c0      	movs	r3, #192	@ 0xc0
 8005450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800545a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800545c:	f107 0308 	add.w	r3, r7, #8
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff fe03 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f957 	bl	800571c <SDMMC_GetCmdResp2>
 800546e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005470:	69fb      	ldr	r3, [r7, #28]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b088      	sub	sp, #32
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005488:	2309      	movs	r3, #9
 800548a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800548c:	23c0      	movs	r3, #192	@ 0xc0
 800548e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005494:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005498:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff fde4 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f938 	bl	800571c <SDMMC_GetCmdResp2>
 80054ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ae:	69fb      	ldr	r3, [r7, #28]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80054c6:	2303      	movs	r3, #3
 80054c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054ca:	2340      	movs	r3, #64	@ 0x40
 80054cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054d8:	f107 0308 	add.w	r3, r7, #8
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff fdc5 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	2103      	movs	r1, #3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f99d 	bl	8005828 <SDMMC_GetCmdResp6>
 80054ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f0:	69fb      	ldr	r3, [r7, #28]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b088      	sub	sp, #32
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005508:	230d      	movs	r3, #13
 800550a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800550c:	2340      	movs	r3, #64	@ 0x40
 800550e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005518:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800551a:	f107 0308 	add.w	r3, r7, #8
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff fda4 	bl	800506e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552a:	210d      	movs	r1, #13
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f807 	bl	8005540 <SDMMC_GetCmdResp1>
 8005532:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005534:	69fb      	ldr	r3, [r7, #28]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	460b      	mov	r3, r1
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800554e:	4b70      	ldr	r3, [pc, #448]	@ (8005710 <SDMMC_GetCmdResp1+0x1d0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a70      	ldr	r2, [pc, #448]	@ (8005714 <SDMMC_GetCmdResp1+0x1d4>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	0a5a      	lsrs	r2, r3, #9
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	fb02 f303 	mul.w	r3, r2, r3
 8005560:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	1e5a      	subs	r2, r3, #1
 8005566:	61fa      	str	r2, [r7, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800556c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005570:	e0c9      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005576:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ef      	beq.n	8005562 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ea      	bne.n	8005562 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2204      	movs	r2, #4
 800559c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800559e:	2304      	movs	r3, #4
 80055a0:	e0b1      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0a6      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	22c5      	movs	r2, #197	@ 0xc5
 80055bc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff fd7f 	bl	80050c2 <SDIO_GetCommandResponse>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	7afb      	ldrb	r3, [r7, #11]
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d001      	beq.n	80055d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e099      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80055d2:	2100      	movs	r1, #0
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff fd81 	bl	80050dc <SDIO_GetResponse>
 80055da:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4b4e      	ldr	r3, [pc, #312]	@ (8005718 <SDMMC_GetCmdResp1+0x1d8>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e08d      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	da02      	bge.n	80055f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80055f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055f4:	e087      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005600:	2340      	movs	r3, #64	@ 0x40
 8005602:	e080      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800560e:	2380      	movs	r3, #128	@ 0x80
 8005610:	e079      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800561c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005620:	e071      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800562c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005630:	e069      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800563c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005640:	e061      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800564c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005650:	e059      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800565c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005660:	e051      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800566c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005670:	e049      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800567c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005680:	e041      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800568c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005690:	e039      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800569c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056a0:	e031      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80056ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80056b0:	e029      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80056bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80056c0:	e021      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80056cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80056d0:	e019      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80056dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80056e0:	e011      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80056ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80056f0:	e009      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80056fc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005700:	e001      	b.n	8005706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005702:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005706:	4618      	mov	r0, r3
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	2000003c 	.word	0x2000003c
 8005714:	10624dd3 	.word	0x10624dd3
 8005718:	fdffe008 	.word	0xfdffe008

0800571c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005724:	4b1f      	ldr	r3, [pc, #124]	@ (80057a4 <SDMMC_GetCmdResp2+0x88>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1f      	ldr	r2, [pc, #124]	@ (80057a8 <SDMMC_GetCmdResp2+0x8c>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	0a5b      	lsrs	r3, r3, #9
 8005730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005734:	fb02 f303 	mul.w	r3, r2, r3
 8005738:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1e5a      	subs	r2, r3, #1
 800573e:	60fa      	str	r2, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005744:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005748:	e026      	b.n	8005798 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ef      	beq.n	800573a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1ea      	bne.n	800573a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2204      	movs	r2, #4
 8005774:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005776:	2304      	movs	r3, #4
 8005778:	e00e      	b.n	8005798 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d004      	beq.n	8005790 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800578c:	2301      	movs	r3, #1
 800578e:	e003      	b.n	8005798 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	22c5      	movs	r2, #197	@ 0xc5
 8005794:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	2000003c 	.word	0x2000003c
 80057a8:	10624dd3 	.word	0x10624dd3

080057ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005820 <SDMMC_GetCmdResp3+0x74>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005824 <SDMMC_GetCmdResp3+0x78>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0a5b      	lsrs	r3, r3, #9
 80057c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	60fa      	str	r2, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80057d8:	e01b      	b.n	8005812 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0ef      	beq.n	80057ca <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ea      	bne.n	80057ca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2204      	movs	r2, #4
 8005804:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005806:	2304      	movs	r3, #4
 8005808:	e003      	b.n	8005812 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	22c5      	movs	r2, #197	@ 0xc5
 800580e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	2000003c 	.word	0x2000003c
 8005824:	10624dd3 	.word	0x10624dd3

08005828 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	460b      	mov	r3, r1
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005836:	4b35      	ldr	r3, [pc, #212]	@ (800590c <SDMMC_GetCmdResp6+0xe4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a35      	ldr	r2, [pc, #212]	@ (8005910 <SDMMC_GetCmdResp6+0xe8>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	0a5b      	lsrs	r3, r3, #9
 8005842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	61fa      	str	r2, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005856:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800585a:	e052      	b.n	8005902 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005860:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0ef      	beq.n	800584c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1ea      	bne.n	800584c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d004      	beq.n	800588c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2204      	movs	r2, #4
 8005886:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005888:	2304      	movs	r3, #4
 800588a:	e03a      	b.n	8005902 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d004      	beq.n	80058a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800589e:	2301      	movs	r3, #1
 80058a0:	e02f      	b.n	8005902 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7ff fc0d 	bl	80050c2 <SDIO_GetCommandResponse>
 80058a8:	4603      	mov	r3, r0
 80058aa:	461a      	mov	r2, r3
 80058ac:	7afb      	ldrb	r3, [r7, #11]
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d001      	beq.n	80058b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e025      	b.n	8005902 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	22c5      	movs	r2, #197	@ 0xc5
 80058ba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80058bc:	2100      	movs	r1, #0
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7ff fc0c 	bl	80050dc <SDIO_GetResponse>
 80058c4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80058da:	2300      	movs	r3, #0
 80058dc:	e011      	b.n	8005902 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80058ec:	e009      	b.n	8005902 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058fc:	e001      	b.n	8005902 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80058fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	2000003c 	.word	0x2000003c
 8005910:	10624dd3 	.word	0x10624dd3

08005914 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800591c:	4b22      	ldr	r3, [pc, #136]	@ (80059a8 <SDMMC_GetCmdResp7+0x94>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a22      	ldr	r2, [pc, #136]	@ (80059ac <SDMMC_GetCmdResp7+0x98>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	0a5b      	lsrs	r3, r3, #9
 8005928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592c:	fb02 f303 	mul.w	r3, r2, r3
 8005930:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1e5a      	subs	r2, r3, #1
 8005936:	60fa      	str	r2, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800593c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005940:	e02c      	b.n	800599c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005946:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ef      	beq.n	8005932 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1ea      	bne.n	8005932 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d004      	beq.n	8005972 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2204      	movs	r2, #4
 800596c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800596e:	2304      	movs	r3, #4
 8005970:	e014      	b.n	800599c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005984:	2301      	movs	r3, #1
 8005986:	e009      	b.n	800599c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2240      	movs	r2, #64	@ 0x40
 8005998:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800599a:	2300      	movs	r3, #0
  
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	2000003c 	.word	0x2000003c
 80059ac:	10624dd3 	.word	0x10624dd3

080059b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <SDMMC_GetCmdError+0x50>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a11      	ldr	r2, [pc, #68]	@ (8005a04 <SDMMC_GetCmdError+0x54>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	0a5b      	lsrs	r3, r3, #9
 80059c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c8:	fb02 f303 	mul.w	r3, r2, r3
 80059cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1e5a      	subs	r2, r3, #1
 80059d2:	60fa      	str	r2, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80059dc:	e009      	b.n	80059f2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f1      	beq.n	80059ce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	22c5      	movs	r2, #197	@ 0xc5
 80059ee:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	2000003c 	.word	0x2000003c
 8005a04:	10624dd3 	.word	0x10624dd3

08005a08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005a0c:	4904      	ldr	r1, [pc, #16]	@ (8005a20 <MX_FATFS_Init+0x18>)
 8005a0e:	4805      	ldr	r0, [pc, #20]	@ (8005a24 <MX_FATFS_Init+0x1c>)
 8005a10:	f003 fa30 	bl	8008e74 <FATFS_LinkDriver>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	4b03      	ldr	r3, [pc, #12]	@ (8005a28 <MX_FATFS_Init+0x20>)
 8005a1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a1c:	bf00      	nop
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20003338 	.word	0x20003338
 8005a24:	0800a130 	.word	0x0800a130
 8005a28:	20003334 	.word	0x20003334

08005a2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return ((DWORD)(2024 - 1980) << 25)
 8005a30:	4b02      	ldr	r3, [pc, #8]	@ (8005a3c <get_fattime+0x10>)
			  | ((DWORD)2 << 16)
			  | ((DWORD)12 << 11)
			  | ((DWORD)25 << 5)
			  | ((DWORD)25 >> 1);
  /* USER CODE END get_fattime */
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	5942632c 	.word	0x5942632c

08005a40 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005a4a:	f000 f86b 	bl	8005b24 <BSP_SD_IsDetected>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d001      	beq.n	8005a58 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e005      	b.n	8005a64 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005a58:	4804      	ldr	r0, [pc, #16]	@ (8005a6c <BSP_SD_Init+0x2c>)
 8005a5a:	f7fe fb1b 	bl	8004094 <HAL_SD_Init>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005a62:	79fb      	ldrb	r3, [r7, #7]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	200021dc 	.word	0x200021dc

08005a70 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	4806      	ldr	r0, [pc, #24]	@ (8005aa8 <BSP_SD_ReadBlocks+0x38>)
 8005a8e:	f7fe fbb1 	bl	80041f4 <HAL_SD_ReadBlocks>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	200021dc 	.word	0x200021dc

08005aac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	4806      	ldr	r0, [pc, #24]	@ (8005ae4 <BSP_SD_WriteBlocks+0x38>)
 8005aca:	f7fe fd71 	bl	80045b0 <HAL_SD_WriteBlocks>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200021dc 	.word	0x200021dc

08005ae8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005aec:	4805      	ldr	r0, [pc, #20]	@ (8005b04 <BSP_SD_GetCardState+0x1c>)
 8005aee:	f7ff f8b5 	bl	8004c5c <HAL_SD_GetCardState>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	200021dc 	.word	0x200021dc

08005b08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4803      	ldr	r0, [pc, #12]	@ (8005b20 <BSP_SD_GetCardInfo+0x18>)
 8005b14:	f7ff f876 	bl	8004c04 <HAL_SD_GetCardInfo>
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	200021dc 	.word	0x200021dc

08005b24 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005b2e:	f000 f80b 	bl	8005b48 <BSP_PlatformIsDetected>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	b2db      	uxtb	r3, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005b52:	2140      	movs	r1, #64	@ 0x40
 8005b54:	4806      	ldr	r0, [pc, #24]	@ (8005b70 <BSP_PlatformIsDetected+0x28>)
 8005b56:	f7fc fb85 	bl	8002264 <HAL_GPIO_ReadPin>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005b60:	2300      	movs	r3, #0
 8005b62:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005b64:	79fb      	ldrb	r3, [r7, #7]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40020800 	.word	0x40020800

08005b74 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005bac <SD_CheckStatus+0x38>)
 8005b80:	2201      	movs	r2, #1
 8005b82:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005b84:	f7ff ffb0 	bl	8005ae8 <BSP_SD_GetCardState>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005b8e:	4b07      	ldr	r3, [pc, #28]	@ (8005bac <SD_CheckStatus+0x38>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4b04      	ldr	r3, [pc, #16]	@ (8005bac <SD_CheckStatus+0x38>)
 8005b9c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005b9e:	4b03      	ldr	r3, [pc, #12]	@ (8005bac <SD_CheckStatus+0x38>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	b2db      	uxtb	r3, r3
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20000045 	.word	0x20000045

08005bb0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005bba:	4b0b      	ldr	r3, [pc, #44]	@ (8005be8 <SD_initialize+0x38>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005bc0:	f7ff ff3e 	bl	8005a40 <BSP_SD_Init>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d107      	bne.n	8005bda <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff ffd1 	bl	8005b74 <SD_CheckStatus>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4b04      	ldr	r3, [pc, #16]	@ (8005be8 <SD_initialize+0x38>)
 8005bd8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005bda:	4b03      	ldr	r3, [pc, #12]	@ (8005be8 <SD_initialize+0x38>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	b2db      	uxtb	r3, r3
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000045 	.word	0x20000045

08005bec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff ffbb 	bl	8005b74 <SD_CheckStatus>
 8005bfe:	4603      	mov	r3, r0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	68b8      	ldr	r0, [r7, #8]
 8005c26:	f7ff ff23 	bl	8005a70 <BSP_SD_ReadBlocks>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d107      	bne.n	8005c40 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005c30:	bf00      	nop
 8005c32:	f7ff ff59 	bl	8005ae8 <BSP_SD_GetCardState>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1fa      	bne.n	8005c32 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	4603      	mov	r3, r0
 8005c58:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	68b8      	ldr	r0, [r7, #8]
 8005c68:	f7ff ff20 	bl	8005aac <BSP_SD_WriteBlocks>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d107      	bne.n	8005c82 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005c72:	bf00      	nop
 8005c74:	f7ff ff38 	bl	8005ae8 <BSP_SD_GetCardState>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1fa      	bne.n	8005c74 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08c      	sub	sp, #48	@ 0x30
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	603a      	str	r2, [r7, #0]
 8005c96:	71fb      	strb	r3, [r7, #7]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005ca2:	4b25      	ldr	r3, [pc, #148]	@ (8005d38 <SD_ioctl+0xac>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <SD_ioctl+0x28>
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e03c      	b.n	8005d2e <SD_ioctl+0xa2>

  switch (cmd)
 8005cb4:	79bb      	ldrb	r3, [r7, #6]
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d834      	bhi.n	8005d24 <SD_ioctl+0x98>
 8005cba:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc0 <SD_ioctl+0x34>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005cd9 	.word	0x08005cd9
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005d0b 	.word	0x08005d0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005cd6:	e028      	b.n	8005d2a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005cd8:	f107 030c 	add.w	r3, r7, #12
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff ff13 	bl	8005b08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005cee:	e01c      	b.n	8005d2a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005cf0:	f107 030c 	add.w	r3, r7, #12
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ff07 	bl	8005b08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d08:	e00f      	b.n	8005d2a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d0a:	f107 030c 	add.w	r3, r7, #12
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff fefa 	bl	8005b08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d16:	0a5a      	lsrs	r2, r3, #9
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d22:	e002      	b.n	8005d2a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3730      	adds	r7, #48	@ 0x30
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000045 	.word	0x20000045

08005d3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	4a08      	ldr	r2, [pc, #32]	@ (8005d6c <disk_status+0x30>)
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	79fa      	ldrb	r2, [r7, #7]
 8005d54:	4905      	ldr	r1, [pc, #20]	@ (8005d6c <disk_status+0x30>)
 8005d56:	440a      	add	r2, r1
 8005d58:	7a12      	ldrb	r2, [r2, #8]
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4798      	blx	r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20003364 	.word	0x20003364

08005d70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	4a0e      	ldr	r2, [pc, #56]	@ (8005dbc <disk_initialize+0x4c>)
 8005d82:	5cd3      	ldrb	r3, [r2, r3]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d114      	bne.n	8005db2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8005dbc <disk_initialize+0x4c>)
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	79fa      	ldrb	r2, [r7, #7]
 8005d96:	4909      	ldr	r1, [pc, #36]	@ (8005dbc <disk_initialize+0x4c>)
 8005d98:	440a      	add	r2, r1
 8005d9a:	7a12      	ldrb	r2, [r2, #8]
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4798      	blx	r3
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	4a03      	ldr	r2, [pc, #12]	@ (8005dbc <disk_initialize+0x4c>)
 8005dae:	2101      	movs	r1, #1
 8005db0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20003364 	.word	0x20003364

08005dc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4603      	mov	r3, r0
 8005dce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8005dfc <disk_read+0x3c>)
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	689c      	ldr	r4, [r3, #8]
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	4a07      	ldr	r2, [pc, #28]	@ (8005dfc <disk_read+0x3c>)
 8005de0:	4413      	add	r3, r2
 8005de2:	7a18      	ldrb	r0, [r3, #8]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	47a0      	blx	r4
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]
  return res;
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd90      	pop	{r4, r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20003364 	.word	0x20003364

08005e00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	4a0a      	ldr	r2, [pc, #40]	@ (8005e3c <disk_write+0x3c>)
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	68dc      	ldr	r4, [r3, #12]
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	4a07      	ldr	r2, [pc, #28]	@ (8005e3c <disk_write+0x3c>)
 8005e20:	4413      	add	r3, r2
 8005e22:	7a18      	ldrb	r0, [r3, #8]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	47a0      	blx	r4
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd90      	pop	{r4, r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20003364 	.word	0x20003364

08005e40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	603a      	str	r2, [r7, #0]
 8005e4a:	71fb      	strb	r3, [r7, #7]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	4a09      	ldr	r2, [pc, #36]	@ (8005e78 <disk_ioctl+0x38>)
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	79fa      	ldrb	r2, [r7, #7]
 8005e5e:	4906      	ldr	r1, [pc, #24]	@ (8005e78 <disk_ioctl+0x38>)
 8005e60:	440a      	add	r2, r1
 8005e62:	7a10      	ldrb	r0, [r2, #8]
 8005e64:	79b9      	ldrb	r1, [r7, #6]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	4798      	blx	r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  return res;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20003364 	.word	0x20003364

08005e7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3301      	adds	r3, #1
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005e8c:	89fb      	ldrh	r3, [r7, #14]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	b21a      	sxth	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	b21b      	sxth	r3, r3
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3303      	adds	r3, #3
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	3202      	adds	r2, #2
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	3201      	adds	r2, #1
 8005ed2:	7812      	ldrb	r2, [r2, #0]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	7812      	ldrb	r2, [r2, #0]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	460b      	mov	r3, r1
 8005efc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	887a      	ldrh	r2, [r7, #2]
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	887b      	ldrh	r3, [r7, #2]
 8005f0c:	0a1b      	lsrs	r3, r3, #8
 8005f0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	607a      	str	r2, [r7, #4]
 8005f16:	887a      	ldrh	r2, [r7, #2]
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	607a      	str	r2, [r7, #4]
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	607a      	str	r2, [r7, #4]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	1c53      	adds	r3, r2, #1
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1c59      	adds	r1, r3, #1
 8005fa4:	6179      	str	r1, [r7, #20]
 8005fa6:	7812      	ldrb	r2, [r2, #0]
 8005fa8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f1      	bne.n	8005f9a <mem_cpy+0x1a>
	}
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	617a      	str	r2, [r7, #20]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	607b      	str	r3, [r7, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f3      	bne.n	8005fd2 <mem_set+0x10>
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005ff8:	b480      	push	{r7}
 8005ffa:	b089      	sub	sp, #36	@ 0x24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	61fb      	str	r3, [r7, #28]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	61fa      	str	r2, [r7, #28]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	4619      	mov	r1, r3
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	61ba      	str	r2, [r7, #24]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	1acb      	subs	r3, r1, r3
 8006024:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3b01      	subs	r3, #1
 800602a:	607b      	str	r3, [r7, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <mem_cmp+0x40>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0eb      	beq.n	8006010 <mem_cmp+0x18>

	return r;
 8006038:	697b      	ldr	r3, [r7, #20]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3724      	adds	r7, #36	@ 0x24
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006050:	e002      	b.n	8006058 <chk_chr+0x12>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3301      	adds	r3, #1
 8006056:	607b      	str	r3, [r7, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <chk_chr+0x26>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	4293      	cmp	r3, r2
 800606a:	d1f2      	bne.n	8006052 <chk_chr+0xc>
	return *str;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	781b      	ldrb	r3, [r3, #0]
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006086:	2300      	movs	r3, #0
 8006088:	60bb      	str	r3, [r7, #8]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	e029      	b.n	80060e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006090:	4a27      	ldr	r2, [pc, #156]	@ (8006130 <chk_lock+0xb4>)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	4413      	add	r3, r2
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01d      	beq.n	80060da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800609e:	4a24      	ldr	r2, [pc, #144]	@ (8006130 <chk_lock+0xb4>)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	4413      	add	r3, r2
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d116      	bne.n	80060de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80060b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006130 <chk_lock+0xb4>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4413      	add	r3, r2
 80060b8:	3304      	adds	r3, #4
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d10c      	bne.n	80060de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80060c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006130 <chk_lock+0xb4>)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	4413      	add	r3, r2
 80060cc:	3308      	adds	r3, #8
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d102      	bne.n	80060de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80060d8:	e007      	b.n	80060ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80060da:	2301      	movs	r3, #1
 80060dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d9d2      	bls.n	8006090 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d109      	bne.n	8006104 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d102      	bne.n	80060fc <chk_lock+0x80>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d101      	bne.n	8006100 <chk_lock+0x84>
 80060fc:	2300      	movs	r3, #0
 80060fe:	e010      	b.n	8006122 <chk_lock+0xa6>
 8006100:	2312      	movs	r3, #18
 8006102:	e00e      	b.n	8006122 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d108      	bne.n	800611c <chk_lock+0xa0>
 800610a:	4a09      	ldr	r2, [pc, #36]	@ (8006130 <chk_lock+0xb4>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	4413      	add	r3, r2
 8006112:	330c      	adds	r3, #12
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800611a:	d101      	bne.n	8006120 <chk_lock+0xa4>
 800611c:	2310      	movs	r3, #16
 800611e:	e000      	b.n	8006122 <chk_lock+0xa6>
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20003344 	.word	0x20003344

08006134 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800613a:	2300      	movs	r3, #0
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	e002      	b.n	8006146 <enq_lock+0x12>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3301      	adds	r3, #1
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d806      	bhi.n	800615a <enq_lock+0x26>
 800614c:	4a09      	ldr	r2, [pc, #36]	@ (8006174 <enq_lock+0x40>)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	4413      	add	r3, r2
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f2      	bne.n	8006140 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b02      	cmp	r3, #2
 800615e:	bf14      	ite	ne
 8006160:	2301      	movne	r3, #1
 8006162:	2300      	moveq	r3, #0
 8006164:	b2db      	uxtb	r3, r3
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20003344 	.word	0x20003344

08006178 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e01f      	b.n	80061c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006188:	4a41      	ldr	r2, [pc, #260]	@ (8006290 <inc_lock+0x118>)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	4413      	add	r3, r2
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d113      	bne.n	80061c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800619a:	4a3d      	ldr	r2, [pc, #244]	@ (8006290 <inc_lock+0x118>)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	4413      	add	r3, r2
 80061a2:	3304      	adds	r3, #4
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d109      	bne.n	80061c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80061ae:	4a38      	ldr	r2, [pc, #224]	@ (8006290 <inc_lock+0x118>)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	4413      	add	r3, r2
 80061b6:	3308      	adds	r3, #8
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80061be:	429a      	cmp	r2, r3
 80061c0:	d006      	beq.n	80061d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3301      	adds	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d9dc      	bls.n	8006188 <inc_lock+0x10>
 80061ce:	e000      	b.n	80061d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80061d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d132      	bne.n	800623e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e002      	b.n	80061e4 <inc_lock+0x6c>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3301      	adds	r3, #1
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d806      	bhi.n	80061f8 <inc_lock+0x80>
 80061ea:	4a29      	ldr	r2, [pc, #164]	@ (8006290 <inc_lock+0x118>)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	4413      	add	r3, r2
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f2      	bne.n	80061de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d101      	bne.n	8006202 <inc_lock+0x8a>
 80061fe:	2300      	movs	r3, #0
 8006200:	e040      	b.n	8006284 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4922      	ldr	r1, [pc, #136]	@ (8006290 <inc_lock+0x118>)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	440b      	add	r3, r1
 800620e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	491e      	ldr	r1, [pc, #120]	@ (8006290 <inc_lock+0x118>)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	440b      	add	r3, r1
 800621c:	3304      	adds	r3, #4
 800621e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	695a      	ldr	r2, [r3, #20]
 8006224:	491a      	ldr	r1, [pc, #104]	@ (8006290 <inc_lock+0x118>)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	440b      	add	r3, r1
 800622c:	3308      	adds	r3, #8
 800622e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006230:	4a17      	ldr	r2, [pc, #92]	@ (8006290 <inc_lock+0x118>)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	4413      	add	r3, r2
 8006238:	330c      	adds	r3, #12
 800623a:	2200      	movs	r2, #0
 800623c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <inc_lock+0xe0>
 8006244:	4a12      	ldr	r2, [pc, #72]	@ (8006290 <inc_lock+0x118>)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	4413      	add	r3, r2
 800624c:	330c      	adds	r3, #12
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <inc_lock+0xe0>
 8006254:	2300      	movs	r3, #0
 8006256:	e015      	b.n	8006284 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d108      	bne.n	8006270 <inc_lock+0xf8>
 800625e:	4a0c      	ldr	r2, [pc, #48]	@ (8006290 <inc_lock+0x118>)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	4413      	add	r3, r2
 8006266:	330c      	adds	r3, #12
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	3301      	adds	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	e001      	b.n	8006274 <inc_lock+0xfc>
 8006270:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006274:	4906      	ldr	r1, [pc, #24]	@ (8006290 <inc_lock+0x118>)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	440b      	add	r3, r1
 800627c:	330c      	adds	r3, #12
 800627e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20003344 	.word	0x20003344

08006294 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3b01      	subs	r3, #1
 80062a0:	607b      	str	r3, [r7, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d825      	bhi.n	80062f4 <dec_lock+0x60>
		n = Files[i].ctr;
 80062a8:	4a17      	ldr	r2, [pc, #92]	@ (8006308 <dec_lock+0x74>)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	4413      	add	r3, r2
 80062b0:	330c      	adds	r3, #12
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80062b6:	89fb      	ldrh	r3, [r7, #14]
 80062b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062bc:	d101      	bne.n	80062c2 <dec_lock+0x2e>
 80062be:	2300      	movs	r3, #0
 80062c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80062c2:	89fb      	ldrh	r3, [r7, #14]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <dec_lock+0x3a>
 80062c8:	89fb      	ldrh	r3, [r7, #14]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80062ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006308 <dec_lock+0x74>)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	4413      	add	r3, r2
 80062d6:	330c      	adds	r3, #12
 80062d8:	89fa      	ldrh	r2, [r7, #14]
 80062da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80062dc:	89fb      	ldrh	r3, [r7, #14]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d105      	bne.n	80062ee <dec_lock+0x5a>
 80062e2:	4a09      	ldr	r2, [pc, #36]	@ (8006308 <dec_lock+0x74>)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	4413      	add	r3, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	737b      	strb	r3, [r7, #13]
 80062f2:	e001      	b.n	80062f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80062f4:	2302      	movs	r3, #2
 80062f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80062f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	20003344 	.word	0x20003344

0800630c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	e010      	b.n	800633c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800631a:	4a0d      	ldr	r2, [pc, #52]	@ (8006350 <clear_lock+0x44>)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	4413      	add	r3, r2
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d105      	bne.n	8006336 <clear_lock+0x2a>
 800632a:	4a09      	ldr	r2, [pc, #36]	@ (8006350 <clear_lock+0x44>)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	4413      	add	r3, r2
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3301      	adds	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d9eb      	bls.n	800631a <clear_lock+0xe>
	}
}
 8006342:	bf00      	nop
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20003344 	.word	0x20003344

08006354 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	78db      	ldrb	r3, [r3, #3]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d034      	beq.n	80063d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800636c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	7858      	ldrb	r0, [r3, #1]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006378:	2301      	movs	r3, #1
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	f7ff fd40 	bl	8005e00 <disk_write>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006386:	2301      	movs	r3, #1
 8006388:	73fb      	strb	r3, [r7, #15]
 800638a:	e022      	b.n	80063d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	1ad2      	subs	r2, r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d217      	bcs.n	80063d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	789b      	ldrb	r3, [r3, #2]
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	e010      	b.n	80063cc <sync_window+0x78>
					wsect += fs->fsize;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4413      	add	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	7858      	ldrb	r0, [r3, #1]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80063be:	2301      	movs	r3, #1
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	f7ff fd1d 	bl	8005e00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d8eb      	bhi.n	80063aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d01b      	beq.n	800642c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff ffad 	bl	8006354 <sync_window>
 80063fa:	4603      	mov	r3, r0
 80063fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d113      	bne.n	800642c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	7858      	ldrb	r0, [r3, #1]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800640e:	2301      	movs	r3, #1
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	f7ff fcd5 	bl	8005dc0 <disk_read>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800641c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006420:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff ff87 	bl	8006354 <sync_window>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d159      	bne.n	8006504 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b03      	cmp	r3, #3
 8006456:	d149      	bne.n	80064ec <sync_fs+0xb4>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	791b      	ldrb	r3, [r3, #4]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d145      	bne.n	80064ec <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	899b      	ldrh	r3, [r3, #12]
 800646a:	461a      	mov	r2, r3
 800646c:	2100      	movs	r1, #0
 800646e:	f7ff fda8 	bl	8005fc2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3338      	adds	r3, #56	@ 0x38
 8006476:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800647a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff fd37 	bl	8005ef2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3338      	adds	r3, #56	@ 0x38
 8006488:	4921      	ldr	r1, [pc, #132]	@ (8006510 <sync_fs+0xd8>)
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fd4c 	bl	8005f28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3338      	adds	r3, #56	@ 0x38
 8006494:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006498:	491e      	ldr	r1, [pc, #120]	@ (8006514 <sync_fs+0xdc>)
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fd44 	bl	8005f28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3338      	adds	r3, #56	@ 0x38
 80064a4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f7ff fd3a 	bl	8005f28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3338      	adds	r3, #56	@ 0x38
 80064b8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f7ff fd30 	bl	8005f28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	7858      	ldrb	r0, [r3, #1]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064e0:	2301      	movs	r3, #1
 80064e2:	f7ff fc8d 	bl	8005e00 <disk_write>
			fs->fsi_flag = 0;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	785b      	ldrb	r3, [r3, #1]
 80064f0:	2200      	movs	r2, #0
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fca3 	bl	8005e40 <disk_ioctl>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <sync_fs+0xcc>
 8006500:	2301      	movs	r3, #1
 8006502:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	41615252 	.word	0x41615252
 8006514:	61417272 	.word	0x61417272

08006518 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	3b02      	subs	r3, #2
 8006526:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	3b02      	subs	r3, #2
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d301      	bcc.n	8006538 <clust2sect+0x20>
 8006534:	2300      	movs	r3, #0
 8006536:	e008      	b.n	800654a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	895b      	ldrh	r3, [r3, #10]
 800653c:	461a      	mov	r2, r3
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	fb03 f202 	mul.w	r2, r3, r2
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006548:	4413      	add	r3, r2
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b086      	sub	sp, #24
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d904      	bls.n	8006576 <get_fat+0x20>
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d302      	bcc.n	800657c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006576:	2301      	movs	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e0ba      	b.n	80066f2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800657c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006580:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b03      	cmp	r3, #3
 8006588:	f000 8082 	beq.w	8006690 <get_fat+0x13a>
 800658c:	2b03      	cmp	r3, #3
 800658e:	f300 80a6 	bgt.w	80066de <get_fat+0x188>
 8006592:	2b01      	cmp	r3, #1
 8006594:	d002      	beq.n	800659c <get_fat+0x46>
 8006596:	2b02      	cmp	r3, #2
 8006598:	d055      	beq.n	8006646 <get_fat+0xf0>
 800659a:	e0a0      	b.n	80066de <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	899b      	ldrh	r3, [r3, #12]
 80065b2:	4619      	mov	r1, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80065ba:	4413      	add	r3, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	6938      	ldr	r0, [r7, #16]
 80065c0:	f7ff ff0c 	bl	80063dc <move_window>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f040 808c 	bne.w	80066e4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	60fa      	str	r2, [r7, #12]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	8992      	ldrh	r2, [r2, #12]
 80065d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80065da:	fb01 f202 	mul.w	r2, r1, r2
 80065de:	1a9b      	subs	r3, r3, r2
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4413      	add	r3, r2
 80065e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80065e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	899b      	ldrh	r3, [r3, #12]
 80065f2:	4619      	mov	r1, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80065fa:	4413      	add	r3, r2
 80065fc:	4619      	mov	r1, r3
 80065fe:	6938      	ldr	r0, [r7, #16]
 8006600:	f7ff feec 	bl	80063dc <move_window>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d16e      	bne.n	80066e8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	899b      	ldrh	r3, [r3, #12]
 800660e:	461a      	mov	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	fbb3 f1f2 	udiv	r1, r3, r2
 8006616:	fb01 f202 	mul.w	r2, r1, r2
 800661a:	1a9b      	subs	r3, r3, r2
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4413      	add	r3, r2
 8006620:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	4313      	orrs	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <get_fat+0xe6>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	e002      	b.n	8006642 <get_fat+0xec>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006642:	617b      	str	r3, [r7, #20]
			break;
 8006644:	e055      	b.n	80066f2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	899b      	ldrh	r3, [r3, #12]
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	b29b      	uxth	r3, r3
 8006652:	4619      	mov	r1, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	fbb3 f3f1 	udiv	r3, r3, r1
 800665a:	4413      	add	r3, r2
 800665c:	4619      	mov	r1, r3
 800665e:	6938      	ldr	r0, [r7, #16]
 8006660:	f7ff febc 	bl	80063dc <move_window>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d140      	bne.n	80066ec <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	8992      	ldrh	r2, [r2, #12]
 8006678:	fbb3 f0f2 	udiv	r0, r3, r2
 800667c:	fb00 f202 	mul.w	r2, r0, r2
 8006680:	1a9b      	subs	r3, r3, r2
 8006682:	440b      	add	r3, r1
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff fbf9 	bl	8005e7c <ld_word>
 800668a:	4603      	mov	r3, r0
 800668c:	617b      	str	r3, [r7, #20]
			break;
 800668e:	e030      	b.n	80066f2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	899b      	ldrh	r3, [r3, #12]
 8006698:	089b      	lsrs	r3, r3, #2
 800669a:	b29b      	uxth	r3, r3
 800669c:	4619      	mov	r1, r3
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80066a4:	4413      	add	r3, r2
 80066a6:	4619      	mov	r1, r3
 80066a8:	6938      	ldr	r0, [r7, #16]
 80066aa:	f7ff fe97 	bl	80063dc <move_window>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d11d      	bne.n	80066f0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	8992      	ldrh	r2, [r2, #12]
 80066c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80066c6:	fb00 f202 	mul.w	r2, r0, r2
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	440b      	add	r3, r1
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff fbec 	bl	8005eac <ld_dword>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80066da:	617b      	str	r3, [r7, #20]
			break;
 80066dc:	e009      	b.n	80066f2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80066de:	2301      	movs	r3, #1
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	e006      	b.n	80066f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066e4:	bf00      	nop
 80066e6:	e004      	b.n	80066f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066e8:	bf00      	nop
 80066ea:	e002      	b.n	80066f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066ec:	bf00      	nop
 80066ee:	e000      	b.n	80066f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80066f0:	bf00      	nop
		}
	}

	return val;
 80066f2:	697b      	ldr	r3, [r7, #20]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b089      	sub	sp, #36	@ 0x24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006708:	2302      	movs	r3, #2
 800670a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b01      	cmp	r3, #1
 8006710:	f240 8109 	bls.w	8006926 <put_fat+0x22a>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	429a      	cmp	r2, r3
 800671c:	f080 8103 	bcs.w	8006926 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b03      	cmp	r3, #3
 8006726:	f000 80b6 	beq.w	8006896 <put_fat+0x19a>
 800672a:	2b03      	cmp	r3, #3
 800672c:	f300 80fb 	bgt.w	8006926 <put_fat+0x22a>
 8006730:	2b01      	cmp	r3, #1
 8006732:	d003      	beq.n	800673c <put_fat+0x40>
 8006734:	2b02      	cmp	r3, #2
 8006736:	f000 8083 	beq.w	8006840 <put_fat+0x144>
 800673a:	e0f4      	b.n	8006926 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	4413      	add	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	899b      	ldrh	r3, [r3, #12]
 8006752:	4619      	mov	r1, r3
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	fbb3 f3f1 	udiv	r3, r3, r1
 800675a:	4413      	add	r3, r2
 800675c:	4619      	mov	r1, r3
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff fe3c 	bl	80063dc <move_window>
 8006764:	4603      	mov	r3, r0
 8006766:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006768:	7ffb      	ldrb	r3, [r7, #31]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 80d4 	bne.w	8006918 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	61ba      	str	r2, [r7, #24]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	8992      	ldrh	r2, [r2, #12]
 8006780:	fbb3 f0f2 	udiv	r0, r3, r2
 8006784:	fb00 f202 	mul.w	r2, r0, r2
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	440b      	add	r3, r1
 800678c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00d      	beq.n	80067b4 <put_fat+0xb8>
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	b25b      	sxtb	r3, r3
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	b25a      	sxtb	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	b25b      	sxtb	r3, r3
 80067ac:	4313      	orrs	r3, r2
 80067ae:	b25b      	sxtb	r3, r3
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e001      	b.n	80067b8 <put_fat+0xbc>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	899b      	ldrh	r3, [r3, #12]
 80067ca:	4619      	mov	r1, r3
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d2:	4413      	add	r3, r2
 80067d4:	4619      	mov	r1, r3
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff fe00 	bl	80063dc <move_window>
 80067dc:	4603      	mov	r3, r0
 80067de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067e0:	7ffb      	ldrb	r3, [r7, #31]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 809a 	bne.w	800691c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	899b      	ldrh	r3, [r3, #12]
 80067f2:	461a      	mov	r2, r3
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80067fa:	fb00 f202 	mul.w	r2, r0, r2
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	440b      	add	r3, r1
 8006802:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <put_fat+0x11a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	b2db      	uxtb	r3, r3
 8006814:	e00e      	b.n	8006834 <put_fat+0x138>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	b25b      	sxtb	r3, r3
 800681c:	f023 030f 	bic.w	r3, r3, #15
 8006820:	b25a      	sxtb	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0a1b      	lsrs	r3, r3, #8
 8006826:	b25b      	sxtb	r3, r3
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	b25b      	sxtb	r3, r3
 800682e:	4313      	orrs	r3, r2
 8006830:	b25b      	sxtb	r3, r3
 8006832:	b2db      	uxtb	r3, r3
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	70da      	strb	r2, [r3, #3]
			break;
 800683e:	e072      	b.n	8006926 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	899b      	ldrh	r3, [r3, #12]
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	b29b      	uxth	r3, r3
 800684c:	4619      	mov	r1, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	fbb3 f3f1 	udiv	r3, r3, r1
 8006854:	4413      	add	r3, r2
 8006856:	4619      	mov	r1, r3
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f7ff fdbf 	bl	80063dc <move_window>
 800685e:	4603      	mov	r3, r0
 8006860:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006862:	7ffb      	ldrb	r3, [r7, #31]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d15b      	bne.n	8006920 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	8992      	ldrh	r2, [r2, #12]
 8006876:	fbb3 f0f2 	udiv	r0, r3, r2
 800687a:	fb00 f202 	mul.w	r2, r0, r2
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	440b      	add	r3, r1
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	b292      	uxth	r2, r2
 8006886:	4611      	mov	r1, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff fb32 	bl	8005ef2 <st_word>
			fs->wflag = 1;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	70da      	strb	r2, [r3, #3]
			break;
 8006894:	e047      	b.n	8006926 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	899b      	ldrh	r3, [r3, #12]
 800689e:	089b      	lsrs	r3, r3, #2
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	4619      	mov	r1, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80068aa:	4413      	add	r3, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff fd94 	bl	80063dc <move_window>
 80068b4:	4603      	mov	r3, r0
 80068b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068b8:	7ffb      	ldrb	r3, [r7, #31]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d132      	bne.n	8006924 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	8992      	ldrh	r2, [r2, #12]
 80068d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80068d6:	fb00 f202 	mul.w	r2, r0, r2
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	440b      	add	r3, r1
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff fae4 	bl	8005eac <ld_dword>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80068ea:	4323      	orrs	r3, r4
 80068ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	8992      	ldrh	r2, [r2, #12]
 80068fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006900:	fb00 f202 	mul.w	r2, r0, r2
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	440b      	add	r3, r1
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fb0c 	bl	8005f28 <st_dword>
			fs->wflag = 1;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	70da      	strb	r2, [r3, #3]
			break;
 8006916:	e006      	b.n	8006926 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006918:	bf00      	nop
 800691a:	e004      	b.n	8006926 <put_fat+0x22a>
			if (res != FR_OK) break;
 800691c:	bf00      	nop
 800691e:	e002      	b.n	8006926 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006920:	bf00      	nop
 8006922:	e000      	b.n	8006926 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006924:	bf00      	nop
		}
	}
	return res;
 8006926:	7ffb      	ldrb	r3, [r7, #31]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3724      	adds	r7, #36	@ 0x24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd90      	pop	{r4, r7, pc}

08006930 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d904      	bls.n	8006956 <remove_chain+0x26>
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	429a      	cmp	r2, r3
 8006954:	d301      	bcc.n	800695a <remove_chain+0x2a>
 8006956:	2302      	movs	r3, #2
 8006958:	e04b      	b.n	80069f2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00c      	beq.n	800697a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	69b8      	ldr	r0, [r7, #24]
 8006968:	f7ff fec8 	bl	80066fc <put_fat>
 800696c:	4603      	mov	r3, r0
 800696e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006970:	7ffb      	ldrb	r3, [r7, #31]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <remove_chain+0x4a>
 8006976:	7ffb      	ldrb	r3, [r7, #31]
 8006978:	e03b      	b.n	80069f2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff fdea 	bl	8006556 <get_fat>
 8006982:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d031      	beq.n	80069ee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <remove_chain+0x64>
 8006990:	2302      	movs	r3, #2
 8006992:	e02e      	b.n	80069f2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800699a:	d101      	bne.n	80069a0 <remove_chain+0x70>
 800699c:	2301      	movs	r3, #1
 800699e:	e028      	b.n	80069f2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80069a0:	2200      	movs	r2, #0
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	69b8      	ldr	r0, [r7, #24]
 80069a6:	f7ff fea9 	bl	80066fc <put_fat>
 80069aa:	4603      	mov	r3, r0
 80069ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80069ae:	7ffb      	ldrb	r3, [r7, #31]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <remove_chain+0x88>
 80069b4:	7ffb      	ldrb	r3, [r7, #31]
 80069b6:	e01c      	b.n	80069f2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	3b02      	subs	r3, #2
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d20b      	bcs.n	80069de <remove_chain+0xae>
			fs->free_clst++;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	791b      	ldrb	r3, [r3, #4]
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d3c6      	bcc.n	800697a <remove_chain+0x4a>
 80069ec:	e000      	b.n	80069f0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80069ee:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b088      	sub	sp, #32
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10d      	bne.n	8006a2c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d004      	beq.n	8006a26 <create_chain+0x2c>
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d31b      	bcc.n	8006a5e <create_chain+0x64>
 8006a26:	2301      	movs	r3, #1
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	e018      	b.n	8006a5e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff fd91 	bl	8006556 <get_fat>
 8006a34:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d801      	bhi.n	8006a40 <create_chain+0x46>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e070      	b.n	8006b22 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a46:	d101      	bne.n	8006a4c <create_chain+0x52>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	e06a      	b.n	8006b22 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d201      	bcs.n	8006a5a <create_chain+0x60>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	e063      	b.n	8006b22 <create_chain+0x128>
		scl = clst;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	3301      	adds	r3, #1
 8006a66:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d307      	bcc.n	8006a82 <create_chain+0x88>
				ncl = 2;
 8006a72:	2302      	movs	r3, #2
 8006a74:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006a76:	69fa      	ldr	r2, [r7, #28]
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d901      	bls.n	8006a82 <create_chain+0x88>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e04f      	b.n	8006b22 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006a82:	69f9      	ldr	r1, [r7, #28]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff fd66 	bl	8006556 <get_fat>
 8006a8a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00e      	beq.n	8006ab0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d003      	beq.n	8006aa0 <create_chain+0xa6>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a9e:	d101      	bne.n	8006aa4 <create_chain+0xaa>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	e03e      	b.n	8006b22 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006aa4:	69fa      	ldr	r2, [r7, #28]
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d1da      	bne.n	8006a62 <create_chain+0x68>
 8006aac:	2300      	movs	r3, #0
 8006aae:	e038      	b.n	8006b22 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006ab0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ab6:	69f9      	ldr	r1, [r7, #28]
 8006ab8:	6938      	ldr	r0, [r7, #16]
 8006aba:	f7ff fe1f 	bl	80066fc <put_fat>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <create_chain+0xe2>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6938      	ldr	r0, [r7, #16]
 8006ad4:	f7ff fe12 	bl	80066fc <put_fat>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d116      	bne.n	8006b10 <create_chain+0x116>
		fs->last_clst = ncl;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	699a      	ldr	r2, [r3, #24]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	3b02      	subs	r3, #2
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d804      	bhi.n	8006b00 <create_chain+0x106>
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	1e5a      	subs	r2, r3, #1
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	791b      	ldrb	r3, [r3, #4]
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	711a      	strb	r2, [r3, #4]
 8006b0e:	e007      	b.n	8006b20 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d102      	bne.n	8006b1c <create_chain+0x122>
 8006b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b1a:	e000      	b.n	8006b1e <create_chain+0x124>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006b20:	69fb      	ldr	r3, [r7, #28]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3720      	adds	r7, #32
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b087      	sub	sp, #28
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3e:	3304      	adds	r3, #4
 8006b40:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	899b      	ldrh	r3, [r3, #12]
 8006b46:	461a      	mov	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	8952      	ldrh	r2, [r2, #10]
 8006b52:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1d1a      	adds	r2, r3, #4
 8006b5c:	613a      	str	r2, [r7, #16]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <clmt_clust+0x42>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e010      	b.n	8006b8e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d307      	bcc.n	8006b84 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b82:	e7e9      	b.n	8006b58 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006b84:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	4413      	add	r3, r2
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bb0:	d204      	bcs.n	8006bbc <dir_sdi+0x22>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e071      	b.n	8006ca4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <dir_sdi+0x46>
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d902      	bls.n	8006be0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bde:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10c      	bne.n	8006c00 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	8912      	ldrh	r2, [r2, #8]
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d301      	bcc.n	8006bf6 <dir_sdi+0x5c>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e056      	b.n	8006ca4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	61da      	str	r2, [r3, #28]
 8006bfe:	e02d      	b.n	8006c5c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	895b      	ldrh	r3, [r3, #10]
 8006c04:	461a      	mov	r2, r3
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	899b      	ldrh	r3, [r3, #12]
 8006c0a:	fb02 f303 	mul.w	r3, r2, r3
 8006c0e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c10:	e019      	b.n	8006c46 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6979      	ldr	r1, [r7, #20]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff fc9d 	bl	8006556 <get_fat>
 8006c1c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c24:	d101      	bne.n	8006c2a <dir_sdi+0x90>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e03c      	b.n	8006ca4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d904      	bls.n	8006c3a <dir_sdi+0xa0>
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d301      	bcc.n	8006c3e <dir_sdi+0xa4>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e032      	b.n	8006ca4 <dir_sdi+0x10a>
			ofs -= csz;
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d2e1      	bcs.n	8006c12 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	6938      	ldr	r0, [r7, #16]
 8006c52:	f7ff fc61 	bl	8006518 <clust2sect>
 8006c56:	4602      	mov	r2, r0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <dir_sdi+0xd4>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e01a      	b.n	8006ca4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	899b      	ldrh	r3, [r3, #12]
 8006c76:	4619      	mov	r1, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c7e:	441a      	add	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	899b      	ldrh	r3, [r3, #12]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c96:	fb00 f202 	mul.w	r2, r0, r2
 8006c9a:	1a9b      	subs	r3, r3, r2
 8006c9c:	18ca      	adds	r2, r1, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	3320      	adds	r3, #32
 8006cc2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <dir_next+0x28>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cd2:	d301      	bcc.n	8006cd8 <dir_next+0x2c>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	e0bb      	b.n	8006e50 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	899b      	ldrh	r3, [r3, #12]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ce4:	fb01 f202 	mul.w	r2, r1, r2
 8006ce8:	1a9b      	subs	r3, r3, r2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f040 809d 	bne.w	8006e2a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10b      	bne.n	8006d1a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	095b      	lsrs	r3, r3, #5
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	8912      	ldrh	r2, [r2, #8]
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	f0c0 808d 	bcc.w	8006e2a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	61da      	str	r2, [r3, #28]
 8006d16:	2304      	movs	r3, #4
 8006d18:	e09a      	b.n	8006e50 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	899b      	ldrh	r3, [r3, #12]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	8952      	ldrh	r2, [r2, #10]
 8006d2a:	3a01      	subs	r2, #1
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d17b      	bne.n	8006e2a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7ff fc0b 	bl	8006556 <get_fat>
 8006d40:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d801      	bhi.n	8006d4c <dir_next+0xa0>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e081      	b.n	8006e50 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d52:	d101      	bne.n	8006d58 <dir_next+0xac>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e07b      	b.n	8006e50 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d359      	bcc.n	8006e16 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	61da      	str	r2, [r3, #28]
 8006d6e:	2304      	movs	r3, #4
 8006d70:	e06e      	b.n	8006e50 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f7ff fe3d 	bl	80069fa <create_chain>
 8006d80:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <dir_next+0xe0>
 8006d88:	2307      	movs	r3, #7
 8006d8a:	e061      	b.n	8006e50 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <dir_next+0xea>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e05c      	b.n	8006e50 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d9c:	d101      	bne.n	8006da2 <dir_next+0xf6>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e056      	b.n	8006e50 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f7ff fad6 	bl	8006354 <sync_window>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <dir_next+0x106>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e04e      	b.n	8006e50 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	899b      	ldrh	r3, [r3, #12]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	f7ff f8ff 	bl	8005fc2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	6979      	ldr	r1, [r7, #20]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff fba4 	bl	8006518 <clust2sect>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8006dd6:	e012      	b.n	8006dfe <dir_next+0x152>
						fs->wflag = 1;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f7ff fab8 	bl	8006354 <sync_window>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <dir_next+0x142>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e030      	b.n	8006e50 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	3301      	adds	r3, #1
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	895b      	ldrh	r3, [r3, #10]
 8006e02:	461a      	mov	r2, r3
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d3e6      	bcc.n	8006dd8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006e1c:	6979      	ldr	r1, [r7, #20]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7ff fb7a 	bl	8006518 <clust2sect>
 8006e24:	4602      	mov	r2, r0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	899b      	ldrh	r3, [r3, #12]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e42:	fb00 f202 	mul.w	r2, r0, r2
 8006e46:	1a9b      	subs	r3, r3, r2
 8006e48:	18ca      	adds	r2, r1, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006e68:	2100      	movs	r1, #0
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fe95 	bl	8006b9a <dir_sdi>
 8006e70:	4603      	mov	r3, r0
 8006e72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d12b      	bne.n	8006ed2 <dir_alloc+0x7a>
		n = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	4619      	mov	r1, r3
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7ff faa9 	bl	80063dc <move_window>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d11d      	bne.n	8006ed0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2be5      	cmp	r3, #229	@ 0xe5
 8006e9c:	d004      	beq.n	8006ea8 <dir_alloc+0x50>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d107      	bne.n	8006eb8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d102      	bne.n	8006ebc <dir_alloc+0x64>
 8006eb6:	e00c      	b.n	8006ed2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006eb8:	2300      	movs	r3, #0
 8006eba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff fef4 	bl	8006cac <dir_next>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0d7      	beq.n	8006e7e <dir_alloc+0x26>
 8006ece:	e000      	b.n	8006ed2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006ed0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d101      	bne.n	8006edc <dir_alloc+0x84>
 8006ed8:	2307      	movs	r3, #7
 8006eda:	75fb      	strb	r3, [r7, #23]
	return res;
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	331a      	adds	r3, #26
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe ffc1 	bl	8005e7c <ld_word>
 8006efa:	4603      	mov	r3, r0
 8006efc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d109      	bne.n	8006f1a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	3314      	adds	r3, #20
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe ffb6 	bl	8005e7c <ld_word>
 8006f10:	4603      	mov	r3, r0
 8006f12:	041b      	lsls	r3, r3, #16
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	331a      	adds	r3, #26
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	b292      	uxth	r2, r2
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe ffd9 	bl	8005ef2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d109      	bne.n	8006f5c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f103 0214 	add.w	r2, r3, #20
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	0c1b      	lsrs	r3, r3, #16
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7fe ffcb 	bl	8005ef2 <st_word>
	}
}
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	331a      	adds	r3, #26
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe ff82 	bl	8005e7c <ld_word>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <cmp_lfn+0x1e>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e059      	b.n	8007036 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f8a:	1e5a      	subs	r2, r3, #1
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	4413      	add	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006f98:	2301      	movs	r3, #1
 8006f9a:	81fb      	strh	r3, [r7, #14]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	e033      	b.n	800700a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006fa2:	4a27      	ldr	r2, [pc, #156]	@ (8007040 <cmp_lfn+0xdc>)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	4413      	add	r3, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fe ff63 	bl	8005e7c <ld_word>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006fba:	89fb      	ldrh	r3, [r7, #14]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01a      	beq.n	8006ff6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2bfe      	cmp	r3, #254	@ 0xfe
 8006fc4:	d812      	bhi.n	8006fec <cmp_lfn+0x88>
 8006fc6:	89bb      	ldrh	r3, [r7, #12]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 ff9f 	bl	8008f0c <ff_wtoupper>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	461c      	mov	r4, r3
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	617a      	str	r2, [r7, #20]
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 ff93 	bl	8008f0c <ff_wtoupper>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	429c      	cmp	r4, r3
 8006fea:	d001      	beq.n	8006ff0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006fec:	2300      	movs	r3, #0
 8006fee:	e022      	b.n	8007036 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006ff0:	89bb      	ldrh	r3, [r7, #12]
 8006ff2:	81fb      	strh	r3, [r7, #14]
 8006ff4:	e006      	b.n	8007004 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006ff6:	89bb      	ldrh	r3, [r7, #12]
 8006ff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d001      	beq.n	8007004 <cmp_lfn+0xa0>
 8007000:	2300      	movs	r3, #0
 8007002:	e018      	b.n	8007036 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	3301      	adds	r3, #1
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b0c      	cmp	r3, #12
 800700e:	d9c8      	bls.n	8006fa2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <cmp_lfn+0xd0>
 800701c:	89fb      	ldrh	r3, [r7, #14]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d008      	beq.n	8007034 <cmp_lfn+0xd0>
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <cmp_lfn+0xd0>
 8007030:	2300      	movs	r3, #0
 8007032:	e000      	b.n	8007036 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007034:	2301      	movs	r3, #1
}
 8007036:	4618      	mov	r0, r3
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	bd90      	pop	{r4, r7, pc}
 800703e:	bf00      	nop
 8007040:	0800a1c4 	.word	0x0800a1c4

08007044 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4611      	mov	r1, r2
 8007050:	461a      	mov	r2, r3
 8007052:	460b      	mov	r3, r1
 8007054:	71fb      	strb	r3, [r7, #7]
 8007056:	4613      	mov	r3, r2
 8007058:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	330d      	adds	r3, #13
 800705e:	79ba      	ldrb	r2, [r7, #6]
 8007060:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	330b      	adds	r3, #11
 8007066:	220f      	movs	r2, #15
 8007068:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	330c      	adds	r3, #12
 800706e:	2200      	movs	r2, #0
 8007070:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	331a      	adds	r3, #26
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe ff3a 	bl	8005ef2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	1e5a      	subs	r2, r3, #1
 8007082:	4613      	mov	r3, r2
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	82fb      	strh	r3, [r7, #22]
 8007092:	2300      	movs	r3, #0
 8007094:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007096:	8afb      	ldrh	r3, [r7, #22]
 8007098:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800709c:	4293      	cmp	r3, r2
 800709e:	d007      	beq.n	80070b0 <put_lfn+0x6c>
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	61fa      	str	r2, [r7, #28]
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80070b0:	4a17      	ldr	r2, [pc, #92]	@ (8007110 <put_lfn+0xcc>)
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	4413      	add	r3, r2
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	8afa      	ldrh	r2, [r7, #22]
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe ff15 	bl	8005ef2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80070c8:	8afb      	ldrh	r3, [r7, #22]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d102      	bne.n	80070d4 <put_lfn+0x90>
 80070ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80070d2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	3301      	adds	r3, #1
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	2b0c      	cmp	r3, #12
 80070de:	d9da      	bls.n	8007096 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80070e0:	8afb      	ldrh	r3, [r7, #22]
 80070e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d006      	beq.n	80070f8 <put_lfn+0xb4>
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <put_lfn+0xbc>
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070fe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	79fa      	ldrb	r2, [r7, #7]
 8007104:	701a      	strb	r2, [r3, #0]
}
 8007106:	bf00      	nop
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	0800a1c4 	.word	0x0800a1c4

08007114 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08c      	sub	sp, #48	@ 0x30
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007122:	220b      	movs	r2, #11
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7fe ff2a 	bl	8005f80 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b05      	cmp	r3, #5
 8007130:	d92b      	bls.n	800718a <gen_numname+0x76>
		sr = seq;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007136:	e022      	b.n	800717e <gen_numname+0x6a>
			wc = *lfn++;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	1c9a      	adds	r2, r3, #2
 800713c:	607a      	str	r2, [r7, #4]
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007142:	2300      	movs	r3, #0
 8007144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007146:	e017      	b.n	8007178 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	005a      	lsls	r2, r3, #1
 800714c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	4413      	add	r3, r2
 8007154:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007156:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007158:	085b      	lsrs	r3, r3, #1
 800715a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <gen_numname+0x5e>
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800716c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007170:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007174:	3301      	adds	r3, #1
 8007176:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717a:	2b0f      	cmp	r3, #15
 800717c:	d9e4      	bls.n	8007148 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1d8      	bne.n	8007138 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800718a:	2307      	movs	r3, #7
 800718c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	b2db      	uxtb	r3, r3
 8007198:	3330      	adds	r3, #48	@ 0x30
 800719a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800719e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80071a2:	2b39      	cmp	r3, #57	@ 0x39
 80071a4:	d904      	bls.n	80071b0 <gen_numname+0x9c>
 80071a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80071aa:	3307      	adds	r3, #7
 80071ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80071b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b2:	1e5a      	subs	r2, r3, #1
 80071b4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80071b6:	3330      	adds	r3, #48	@ 0x30
 80071b8:	443b      	add	r3, r7
 80071ba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80071be:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	091b      	lsrs	r3, r3, #4
 80071c6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1df      	bne.n	800718e <gen_numname+0x7a>
	ns[i] = '~';
 80071ce:	f107 0214 	add.w	r2, r7, #20
 80071d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d4:	4413      	add	r3, r2
 80071d6:	227e      	movs	r2, #126	@ 0x7e
 80071d8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80071da:	2300      	movs	r3, #0
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071de:	e002      	b.n	80071e6 <gen_numname+0xd2>
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	3301      	adds	r3, #1
 80071e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d205      	bcs.n	80071fa <gen_numname+0xe6>
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f2:	4413      	add	r3, r2
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d1f2      	bne.n	80071e0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	2b07      	cmp	r3, #7
 80071fe:	d807      	bhi.n	8007210 <gen_numname+0xfc>
 8007200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007206:	3330      	adds	r3, #48	@ 0x30
 8007208:	443b      	add	r3, r7
 800720a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800720e:	e000      	b.n	8007212 <gen_numname+0xfe>
 8007210:	2120      	movs	r1, #32
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	627a      	str	r2, [r7, #36]	@ 0x24
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	460a      	mov	r2, r1
 800721e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	2b07      	cmp	r3, #7
 8007224:	d9e9      	bls.n	80071fa <gen_numname+0xe6>
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	3730      	adds	r7, #48	@ 0x30
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800723c:	230b      	movs	r3, #11
 800723e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	b2da      	uxtb	r2, r3
 8007244:	0852      	lsrs	r2, r2, #1
 8007246:	01db      	lsls	r3, r3, #7
 8007248:	4313      	orrs	r3, r2
 800724a:	b2da      	uxtb	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	1c59      	adds	r1, r3, #1
 8007250:	6079      	str	r1, [r7, #4]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	4413      	add	r3, r2
 8007256:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	3b01      	subs	r3, #1
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1ed      	bne.n	8007240 <sum_sfn+0x10>
	return sum;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007280:	2100      	movs	r1, #0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fc89 	bl	8006b9a <dir_sdi>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <dir_find+0x24>
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	e0a9      	b.n	80073ea <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007296:	23ff      	movs	r3, #255	@ 0xff
 8007298:	753b      	strb	r3, [r7, #20]
 800729a:	7d3b      	ldrb	r3, [r7, #20]
 800729c:	757b      	strb	r3, [r7, #21]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072a4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6938      	ldr	r0, [r7, #16]
 80072ae:	f7ff f895 	bl	80063dc <move_window>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f040 8090 	bne.w	80073de <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80072c6:	7dbb      	ldrb	r3, [r7, #22]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <dir_find+0x60>
 80072cc:	2304      	movs	r3, #4
 80072ce:	75fb      	strb	r3, [r7, #23]
 80072d0:	e08a      	b.n	80073e8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	330b      	adds	r3, #11
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072de:	73fb      	strb	r3, [r7, #15]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	7bfa      	ldrb	r2, [r7, #15]
 80072e4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80072e6:	7dbb      	ldrb	r3, [r7, #22]
 80072e8:	2be5      	cmp	r3, #229	@ 0xe5
 80072ea:	d007      	beq.n	80072fc <dir_find+0x8a>
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d009      	beq.n	800730a <dir_find+0x98>
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	2b0f      	cmp	r3, #15
 80072fa:	d006      	beq.n	800730a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80072fc:	23ff      	movs	r3, #255	@ 0xff
 80072fe:	757b      	strb	r3, [r7, #21]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007306:	631a      	str	r2, [r3, #48]	@ 0x30
 8007308:	e05e      	b.n	80073c8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	2b0f      	cmp	r3, #15
 800730e:	d136      	bne.n	800737e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d154      	bne.n	80073c8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800731e:	7dbb      	ldrb	r3, [r7, #22]
 8007320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00d      	beq.n	8007344 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	7b5b      	ldrb	r3, [r3, #13]
 800732e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007330:	7dbb      	ldrb	r3, [r7, #22]
 8007332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007336:	75bb      	strb	r3, [r7, #22]
 8007338:	7dbb      	ldrb	r3, [r7, #22]
 800733a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695a      	ldr	r2, [r3, #20]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007344:	7dba      	ldrb	r2, [r7, #22]
 8007346:	7d7b      	ldrb	r3, [r7, #21]
 8007348:	429a      	cmp	r2, r3
 800734a:	d115      	bne.n	8007378 <dir_find+0x106>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	330d      	adds	r3, #13
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	7d3a      	ldrb	r2, [r7, #20]
 8007356:	429a      	cmp	r2, r3
 8007358:	d10e      	bne.n	8007378 <dir_find+0x106>
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f7ff fdfd 	bl	8006f64 <cmp_lfn>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <dir_find+0x106>
 8007370:	7d7b      	ldrb	r3, [r7, #21]
 8007372:	3b01      	subs	r3, #1
 8007374:	b2db      	uxtb	r3, r3
 8007376:	e000      	b.n	800737a <dir_find+0x108>
 8007378:	23ff      	movs	r3, #255	@ 0xff
 800737a:	757b      	strb	r3, [r7, #21]
 800737c:	e024      	b.n	80073c8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800737e:	7d7b      	ldrb	r3, [r7, #21]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <dir_find+0x126>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff ff51 	bl	8007230 <sum_sfn>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	7d3b      	ldrb	r3, [r7, #20]
 8007394:	4293      	cmp	r3, r2
 8007396:	d024      	beq.n	80073e2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <dir_find+0x14a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a18      	ldr	r0, [r3, #32]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3324      	adds	r3, #36	@ 0x24
 80073ae:	220b      	movs	r2, #11
 80073b0:	4619      	mov	r1, r3
 80073b2:	f7fe fe21 	bl	8005ff8 <mem_cmp>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d014      	beq.n	80073e6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80073bc:	23ff      	movs	r3, #255	@ 0xff
 80073be:	757b      	strb	r3, [r7, #21]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073c6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80073c8:	2100      	movs	r1, #0
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff fc6e 	bl	8006cac <dir_next>
 80073d0:	4603      	mov	r3, r0
 80073d2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f43f af65 	beq.w	80072a6 <dir_find+0x34>
 80073dc:	e004      	b.n	80073e8 <dir_find+0x176>
		if (res != FR_OK) break;
 80073de:	bf00      	nop
 80073e0:	e002      	b.n	80073e8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80073e2:	bf00      	nop
 80073e4:	e000      	b.n	80073e8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80073e6:	bf00      	nop

	return res;
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08c      	sub	sp, #48	@ 0x30
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007408:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <dir_register+0x20>
 8007410:	2306      	movs	r3, #6
 8007412:	e0e0      	b.n	80075d6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007414:	2300      	movs	r3, #0
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
 8007418:	e002      	b.n	8007420 <dir_register+0x2c>
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	3301      	adds	r3, #1
 800741e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	4413      	add	r3, r2
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1f4      	bne.n	800741a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007436:	f107 030c 	add.w	r3, r7, #12
 800743a:	220c      	movs	r2, #12
 800743c:	4618      	mov	r0, r3
 800743e:	f7fe fd9f 	bl	8005f80 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d032      	beq.n	80074b2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2240      	movs	r2, #64	@ 0x40
 8007450:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007454:	2301      	movs	r3, #1
 8007456:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007458:	e016      	b.n	8007488 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	f107 010c 	add.w	r1, r7, #12
 8007468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746a:	f7ff fe53 	bl	8007114 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff feff 	bl	8007272 <dir_find>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800747a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007484:	3301      	adds	r3, #1
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748a:	2b63      	cmp	r3, #99	@ 0x63
 800748c:	d9e5      	bls.n	800745a <dir_register+0x66>
 800748e:	e000      	b.n	8007492 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007490:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007494:	2b64      	cmp	r3, #100	@ 0x64
 8007496:	d101      	bne.n	800749c <dir_register+0xa8>
 8007498:	2307      	movs	r3, #7
 800749a:	e09c      	b.n	80075d6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800749c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d002      	beq.n	80074aa <dir_register+0xb6>
 80074a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074a8:	e095      	b.n	80075d6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80074aa:	7dfa      	ldrb	r2, [r7, #23]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d007      	beq.n	80074cc <dir_register+0xd8>
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074be:	330c      	adds	r3, #12
 80074c0:	4a47      	ldr	r2, [pc, #284]	@ (80075e0 <dir_register+0x1ec>)
 80074c2:	fba2 2303 	umull	r2, r3, r2, r3
 80074c6:	089b      	lsrs	r3, r3, #2
 80074c8:	3301      	adds	r3, #1
 80074ca:	e000      	b.n	80074ce <dir_register+0xda>
 80074cc:	2301      	movs	r3, #1
 80074ce:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80074d0:	6a39      	ldr	r1, [r7, #32]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff fcc0 	bl	8006e58 <dir_alloc>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80074de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d148      	bne.n	8007578 <dir_register+0x184>
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	623b      	str	r3, [r7, #32]
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d042      	beq.n	8007578 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695a      	ldr	r2, [r3, #20]
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	015b      	lsls	r3, r3, #5
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff fb4b 	bl	8006b9a <dir_sdi>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800750a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800750e:	2b00      	cmp	r3, #0
 8007510:	d132      	bne.n	8007578 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3324      	adds	r3, #36	@ 0x24
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fe8a 	bl	8007230 <sum_sfn>
 800751c:	4603      	mov	r3, r0
 800751e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	4619      	mov	r1, r3
 8007526:	69f8      	ldr	r0, [r7, #28]
 8007528:	f7fe ff58 	bl	80063dc <move_window>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007536:	2b00      	cmp	r3, #0
 8007538:	d11d      	bne.n	8007576 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	6918      	ldr	r0, [r3, #16]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a19      	ldr	r1, [r3, #32]
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	b2da      	uxtb	r2, r3
 8007546:	7efb      	ldrb	r3, [r7, #27]
 8007548:	f7ff fd7c 	bl	8007044 <put_lfn>
				fs->wflag = 1;
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	2201      	movs	r2, #1
 8007550:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007552:	2100      	movs	r1, #0
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fba9 	bl	8006cac <dir_next>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007560:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007564:	2b00      	cmp	r3, #0
 8007566:	d107      	bne.n	8007578 <dir_register+0x184>
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	3b01      	subs	r3, #1
 800756c:	623b      	str	r3, [r7, #32]
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1d5      	bne.n	8007520 <dir_register+0x12c>
 8007574:	e000      	b.n	8007578 <dir_register+0x184>
				if (res != FR_OK) break;
 8007576:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007578:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800757c:	2b00      	cmp	r3, #0
 800757e:	d128      	bne.n	80075d2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	4619      	mov	r1, r3
 8007586:	69f8      	ldr	r0, [r7, #28]
 8007588:	f7fe ff28 	bl	80063dc <move_window>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007592:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007596:	2b00      	cmp	r3, #0
 8007598:	d11b      	bne.n	80075d2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	2220      	movs	r2, #32
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fd0d 	bl	8005fc2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a18      	ldr	r0, [r3, #32]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3324      	adds	r3, #36	@ 0x24
 80075b0:	220b      	movs	r2, #11
 80075b2:	4619      	mov	r1, r3
 80075b4:	f7fe fce4 	bl	8005f80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	330c      	adds	r3, #12
 80075c4:	f002 0218 	and.w	r2, r2, #24
 80075c8:	b2d2      	uxtb	r2, r2
 80075ca:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	2201      	movs	r2, #1
 80075d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80075d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3730      	adds	r7, #48	@ 0x30
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	4ec4ec4f 	.word	0x4ec4ec4f

080075e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08a      	sub	sp, #40	@ 0x28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	2300      	movs	r3, #0
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	61ba      	str	r2, [r7, #24]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4413      	add	r3, r2
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007614:	2b1f      	cmp	r3, #31
 8007616:	d940      	bls.n	800769a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800761a:	2b2f      	cmp	r3, #47	@ 0x2f
 800761c:	d006      	beq.n	800762c <create_name+0x48>
 800761e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007620:	2b5c      	cmp	r3, #92	@ 0x5c
 8007622:	d110      	bne.n	8007646 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007624:	e002      	b.n	800762c <create_name+0x48>
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	3301      	adds	r3, #1
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	4413      	add	r3, r2
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b2f      	cmp	r3, #47	@ 0x2f
 8007636:	d0f6      	beq.n	8007626 <create_name+0x42>
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	4413      	add	r3, r2
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b5c      	cmp	r3, #92	@ 0x5c
 8007642:	d0f0      	beq.n	8007626 <create_name+0x42>
			break;
 8007644:	e02a      	b.n	800769c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2bfe      	cmp	r3, #254	@ 0xfe
 800764a:	d901      	bls.n	8007650 <create_name+0x6c>
 800764c:	2306      	movs	r3, #6
 800764e:	e17d      	b.n	800794c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007650:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007652:	b2db      	uxtb	r3, r3
 8007654:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007656:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007658:	2101      	movs	r1, #1
 800765a:	4618      	mov	r0, r3
 800765c:	f001 fc1a 	bl	8008e94 <ff_convert>
 8007660:	4603      	mov	r3, r0
 8007662:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <create_name+0x8a>
 800766a:	2306      	movs	r3, #6
 800766c:	e16e      	b.n	800794c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800766e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007670:	2b7f      	cmp	r3, #127	@ 0x7f
 8007672:	d809      	bhi.n	8007688 <create_name+0xa4>
 8007674:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007676:	4619      	mov	r1, r3
 8007678:	488d      	ldr	r0, [pc, #564]	@ (80078b0 <create_name+0x2cc>)
 800767a:	f7fe fce4 	bl	8006046 <chk_chr>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <create_name+0xa4>
 8007684:	2306      	movs	r3, #6
 8007686:	e161      	b.n	800794c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	617a      	str	r2, [r7, #20]
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007696:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007698:	e7b4      	b.n	8007604 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800769a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	441a      	add	r2, r3
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80076a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076a8:	2b1f      	cmp	r3, #31
 80076aa:	d801      	bhi.n	80076b0 <create_name+0xcc>
 80076ac:	2304      	movs	r3, #4
 80076ae:	e000      	b.n	80076b2 <create_name+0xce>
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80076b6:	e011      	b.n	80076dc <create_name+0xf8>
		w = lfn[di - 1];
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80076be:	3b01      	subs	r3, #1
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80076ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d002      	beq.n	80076d6 <create_name+0xf2>
 80076d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80076d4:	d106      	bne.n	80076e4 <create_name+0x100>
		di--;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	3b01      	subs	r3, #1
 80076da:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1ea      	bne.n	80076b8 <create_name+0xd4>
 80076e2:	e000      	b.n	80076e6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80076e4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	2200      	movs	r2, #0
 80076f0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <create_name+0x118>
 80076f8:	2306      	movs	r3, #6
 80076fa:	e127      	b.n	800794c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3324      	adds	r3, #36	@ 0x24
 8007700:	220b      	movs	r2, #11
 8007702:	2120      	movs	r1, #32
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe fc5c 	bl	8005fc2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800770a:	2300      	movs	r3, #0
 800770c:	61bb      	str	r3, [r7, #24]
 800770e:	e002      	b.n	8007716 <create_name+0x132>
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	3301      	adds	r3, #1
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	2b20      	cmp	r3, #32
 8007722:	d0f5      	beq.n	8007710 <create_name+0x12c>
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007730:	d0ee      	beq.n	8007710 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d009      	beq.n	800774c <create_name+0x168>
 8007738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800773c:	f043 0303 	orr.w	r3, r3, #3
 8007740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007744:	e002      	b.n	800774c <create_name+0x168>
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	3b01      	subs	r3, #1
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <create_name+0x182>
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007758:	3b01      	subs	r3, #1
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	2b2e      	cmp	r3, #46	@ 0x2e
 8007764:	d1ef      	bne.n	8007746 <create_name+0x162>

	i = b = 0; ni = 8;
 8007766:	2300      	movs	r3, #0
 8007768:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800776c:	2300      	movs	r3, #0
 800776e:	623b      	str	r3, [r7, #32]
 8007770:	2308      	movs	r3, #8
 8007772:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	61ba      	str	r2, [r7, #24]
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007784:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8090 	beq.w	80078ac <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800778c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800778e:	2b20      	cmp	r3, #32
 8007790:	d006      	beq.n	80077a0 <create_name+0x1bc>
 8007792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007794:	2b2e      	cmp	r3, #46	@ 0x2e
 8007796:	d10a      	bne.n	80077ae <create_name+0x1ca>
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	429a      	cmp	r2, r3
 800779e:	d006      	beq.n	80077ae <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80077a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077a4:	f043 0303 	orr.w	r3, r3, #3
 80077a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077ac:	e07d      	b.n	80078aa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80077ae:	6a3a      	ldr	r2, [r7, #32]
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d203      	bcs.n	80077be <create_name+0x1da>
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d123      	bne.n	8007806 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	2b0b      	cmp	r3, #11
 80077c2:	d106      	bne.n	80077d2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80077c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077c8:	f043 0303 	orr.w	r3, r3, #3
 80077cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077d0:	e075      	b.n	80078be <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d005      	beq.n	80077e6 <create_name+0x202>
 80077da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077de:	f043 0303 	orr.w	r3, r3, #3
 80077e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d866      	bhi.n	80078bc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	2308      	movs	r3, #8
 80077f4:	623b      	str	r3, [r7, #32]
 80077f6:	230b      	movs	r3, #11
 80077f8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80077fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007804:	e051      	b.n	80078aa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007806:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007808:	2b7f      	cmp	r3, #127	@ 0x7f
 800780a:	d914      	bls.n	8007836 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800780c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800780e:	2100      	movs	r1, #0
 8007810:	4618      	mov	r0, r3
 8007812:	f001 fb3f 	bl	8008e94 <ff_convert>
 8007816:	4603      	mov	r3, r0
 8007818:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800781a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <create_name+0x246>
 8007820:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007822:	3b80      	subs	r3, #128	@ 0x80
 8007824:	4a23      	ldr	r2, [pc, #140]	@ (80078b4 <create_name+0x2d0>)
 8007826:	5cd3      	ldrb	r3, [r2, r3]
 8007828:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800782a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800782e:	f043 0302 	orr.w	r3, r3, #2
 8007832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007836:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <create_name+0x268>
 800783c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800783e:	4619      	mov	r1, r3
 8007840:	481d      	ldr	r0, [pc, #116]	@ (80078b8 <create_name+0x2d4>)
 8007842:	f7fe fc00 	bl	8006046 <chk_chr>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d008      	beq.n	800785e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800784c:	235f      	movs	r3, #95	@ 0x5f
 800784e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007854:	f043 0303 	orr.w	r3, r3, #3
 8007858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800785c:	e01b      	b.n	8007896 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800785e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007860:	2b40      	cmp	r3, #64	@ 0x40
 8007862:	d909      	bls.n	8007878 <create_name+0x294>
 8007864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007866:	2b5a      	cmp	r3, #90	@ 0x5a
 8007868:	d806      	bhi.n	8007878 <create_name+0x294>
					b |= 2;
 800786a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800786e:	f043 0302 	orr.w	r3, r3, #2
 8007872:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007876:	e00e      	b.n	8007896 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007878:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800787a:	2b60      	cmp	r3, #96	@ 0x60
 800787c:	d90b      	bls.n	8007896 <create_name+0x2b2>
 800787e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007880:	2b7a      	cmp	r3, #122	@ 0x7a
 8007882:	d808      	bhi.n	8007896 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007884:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007888:	f043 0301 	orr.w	r3, r3, #1
 800788c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007890:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007892:	3b20      	subs	r3, #32
 8007894:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	623a      	str	r2, [r7, #32]
 800789c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800789e:	b2d1      	uxtb	r1, r2
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	460a      	mov	r2, r1
 80078a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80078aa:	e763      	b.n	8007774 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80078ac:	bf00      	nop
 80078ae:	e006      	b.n	80078be <create_name+0x2da>
 80078b0:	0800a0d0 	.word	0x0800a0d0
 80078b4:	0800a144 	.word	0x0800a144
 80078b8:	0800a0dc 	.word	0x0800a0dc
			if (si > di) break;			/* No extension */
 80078bc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078c4:	2be5      	cmp	r3, #229	@ 0xe5
 80078c6:	d103      	bne.n	80078d0 <create_name+0x2ec>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2205      	movs	r2, #5
 80078cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d104      	bne.n	80078e0 <create_name+0x2fc>
 80078d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80078e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078e4:	f003 030c 	and.w	r3, r3, #12
 80078e8:	2b0c      	cmp	r3, #12
 80078ea:	d005      	beq.n	80078f8 <create_name+0x314>
 80078ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d105      	bne.n	8007904 <create_name+0x320>
 80078f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078fc:	f043 0302 	orr.w	r3, r3, #2
 8007900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d117      	bne.n	8007940 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007910:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	2b01      	cmp	r3, #1
 800791a:	d105      	bne.n	8007928 <create_name+0x344>
 800791c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007920:	f043 0310 	orr.w	r3, r3, #16
 8007924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007928:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800792c:	f003 030c 	and.w	r3, r3, #12
 8007930:	2b04      	cmp	r3, #4
 8007932:	d105      	bne.n	8007940 <create_name+0x35c>
 8007934:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007938:	f043 0308 	orr.w	r3, r3, #8
 800793c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007946:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800794a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800794c:	4618      	mov	r0, r3
 800794e:	3728      	adds	r7, #40	@ 0x28
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007968:	e002      	b.n	8007970 <follow_path+0x1c>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	3301      	adds	r3, #1
 800796e:	603b      	str	r3, [r7, #0]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b2f      	cmp	r3, #47	@ 0x2f
 8007976:	d0f8      	beq.n	800796a <follow_path+0x16>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b5c      	cmp	r3, #92	@ 0x5c
 800797e:	d0f4      	beq.n	800796a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2200      	movs	r2, #0
 8007984:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b1f      	cmp	r3, #31
 800798c:	d80a      	bhi.n	80079a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2280      	movs	r2, #128	@ 0x80
 8007992:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007996:	2100      	movs	r1, #0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff f8fe 	bl	8006b9a <dir_sdi>
 800799e:	4603      	mov	r3, r0
 80079a0:	75fb      	strb	r3, [r7, #23]
 80079a2:	e048      	b.n	8007a36 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80079a4:	463b      	mov	r3, r7
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff fe1b 	bl	80075e4 <create_name>
 80079ae:	4603      	mov	r3, r0
 80079b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d139      	bne.n	8007a2c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff fc5a 	bl	8007272 <dir_find>
 80079be:	4603      	mov	r3, r0
 80079c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80079c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d12c      	bne.n	8007a30 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80079d6:	7afb      	ldrb	r3, [r7, #11]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d127      	bne.n	8007a30 <follow_path+0xdc>
 80079e0:	2305      	movs	r3, #5
 80079e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80079e4:	e024      	b.n	8007a30 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d121      	bne.n	8007a34 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	799b      	ldrb	r3, [r3, #6]
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80079fc:	2305      	movs	r3, #5
 80079fe:	75fb      	strb	r3, [r7, #23]
 8007a00:	e019      	b.n	8007a36 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	8992      	ldrh	r2, [r2, #12]
 8007a10:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a14:	fb00 f202 	mul.w	r2, r0, r2
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff fa61 	bl	8006ee6 <ld_clust>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a2a:	e7bb      	b.n	80079a4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007a2c:	bf00      	nop
 8007a2e:	e002      	b.n	8007a36 <follow_path+0xe2>
				break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a34:	bf00      	nop
			}
		}
	}

	return res;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a4c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d031      	beq.n	8007aba <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	e002      	b.n	8007a64 <get_ldnumber+0x24>
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	3301      	adds	r3, #1
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b1f      	cmp	r3, #31
 8007a6a:	d903      	bls.n	8007a74 <get_ldnumber+0x34>
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b3a      	cmp	r3, #58	@ 0x3a
 8007a72:	d1f4      	bne.n	8007a5e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b3a      	cmp	r3, #58	@ 0x3a
 8007a7a:	d11c      	bne.n	8007ab6 <get_ldnumber+0x76>
			tp = *path;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	60fa      	str	r2, [r7, #12]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	3b30      	subs	r3, #48	@ 0x30
 8007a8c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b09      	cmp	r3, #9
 8007a92:	d80e      	bhi.n	8007ab2 <get_ldnumber+0x72>
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d10a      	bne.n	8007ab2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d107      	bne.n	8007ab2 <get_ldnumber+0x72>
					vol = (int)i;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	e002      	b.n	8007abc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007aba:	693b      	ldr	r3, [r7, #16]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	70da      	strb	r2, [r3, #3]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ade:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fe fc7a 	bl	80063dc <move_window>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <check_fs+0x2a>
 8007aee:	2304      	movs	r3, #4
 8007af0:	e038      	b.n	8007b64 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3338      	adds	r3, #56	@ 0x38
 8007af6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe f9be 	bl	8005e7c <ld_word>
 8007b00:	4603      	mov	r3, r0
 8007b02:	461a      	mov	r2, r3
 8007b04:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d001      	beq.n	8007b10 <check_fs+0x48>
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e029      	b.n	8007b64 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b16:	2be9      	cmp	r3, #233	@ 0xe9
 8007b18:	d009      	beq.n	8007b2e <check_fs+0x66>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b20:	2beb      	cmp	r3, #235	@ 0xeb
 8007b22:	d11e      	bne.n	8007b62 <check_fs+0x9a>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007b2a:	2b90      	cmp	r3, #144	@ 0x90
 8007b2c:	d119      	bne.n	8007b62 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	3338      	adds	r3, #56	@ 0x38
 8007b32:	3336      	adds	r3, #54	@ 0x36
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe f9b9 	bl	8005eac <ld_dword>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007b40:	4a0a      	ldr	r2, [pc, #40]	@ (8007b6c <check_fs+0xa4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d101      	bne.n	8007b4a <check_fs+0x82>
 8007b46:	2300      	movs	r3, #0
 8007b48:	e00c      	b.n	8007b64 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3338      	adds	r3, #56	@ 0x38
 8007b4e:	3352      	adds	r3, #82	@ 0x52
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fe f9ab 	bl	8005eac <ld_dword>
 8007b56:	4603      	mov	r3, r0
 8007b58:	4a05      	ldr	r2, [pc, #20]	@ (8007b70 <check_fs+0xa8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d101      	bne.n	8007b62 <check_fs+0x9a>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e000      	b.n	8007b64 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007b62:	2302      	movs	r3, #2
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	00544146 	.word	0x00544146
 8007b70:	33544146 	.word	0x33544146

08007b74 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b096      	sub	sp, #88	@ 0x58
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f7ff ff59 	bl	8007a40 <get_ldnumber>
 8007b8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	da01      	bge.n	8007b9a <find_volume+0x26>
 8007b96:	230b      	movs	r3, #11
 8007b98:	e262      	b.n	8008060 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007b9a:	4a9f      	ldr	r2, [pc, #636]	@ (8007e18 <find_volume+0x2a4>)
 8007b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <find_volume+0x3a>
 8007baa:	230c      	movs	r3, #12
 8007bac:	e258      	b.n	8008060 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bb2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01a      	beq.n	8007bfa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	785b      	ldrb	r3, [r3, #1]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fe f8b7 	bl	8005d3c <disk_status>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007bd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10c      	bne.n	8007bfa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d007      	beq.n	8007bf6 <find_volume+0x82>
 8007be6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007bf2:	230a      	movs	r3, #10
 8007bf4:	e234      	b.n	8008060 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e232      	b.n	8008060 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c06:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0a:	785b      	ldrb	r3, [r3, #1]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fe f8af 	bl	8005d70 <disk_initialize>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007c18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c24:	2303      	movs	r3, #3
 8007c26:	e21b      	b.n	8008060 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d007      	beq.n	8007c3e <find_volume+0xca>
 8007c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007c3a:	230a      	movs	r3, #10
 8007c3c:	e210      	b.n	8008060 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c40:	7858      	ldrb	r0, [r3, #1]
 8007c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c44:	330c      	adds	r3, #12
 8007c46:	461a      	mov	r2, r3
 8007c48:	2102      	movs	r1, #2
 8007c4a:	f7fe f8f9 	bl	8005e40 <disk_ioctl>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <find_volume+0xe4>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e203      	b.n	8008060 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5a:	899b      	ldrh	r3, [r3, #12]
 8007c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c60:	d80d      	bhi.n	8007c7e <find_volume+0x10a>
 8007c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c64:	899b      	ldrh	r3, [r3, #12]
 8007c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c6a:	d308      	bcc.n	8007c7e <find_volume+0x10a>
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6e:	899b      	ldrh	r3, [r3, #12]
 8007c70:	461a      	mov	r2, r3
 8007c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c74:	899b      	ldrh	r3, [r3, #12]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <find_volume+0x10e>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e1ee      	b.n	8008060 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007c86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c8a:	f7ff ff1d 	bl	8007ac8 <check_fs>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007c94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d149      	bne.n	8007d30 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ca0:	e01e      	b.n	8007ce0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007cb0:	4413      	add	r3, r2
 8007cb2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d006      	beq.n	8007ccc <find_volume+0x158>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe f8f2 	bl	8005eac <ld_dword>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	e000      	b.n	8007cce <find_volume+0x15a>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	3358      	adds	r3, #88	@ 0x58
 8007cd4:	443b      	add	r3, r7
 8007cd6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cdc:	3301      	adds	r3, #1
 8007cde:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d9dd      	bls.n	8007ca2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <find_volume+0x182>
 8007cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	3358      	adds	r3, #88	@ 0x58
 8007cfc:	443b      	add	r3, r7
 8007cfe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d02:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <find_volume+0x1a2>
 8007d0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d0c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d0e:	f7ff fedb 	bl	8007ac8 <check_fs>
 8007d12:	4603      	mov	r3, r0
 8007d14:	e000      	b.n	8007d18 <find_volume+0x1a4>
 8007d16:	2303      	movs	r3, #3
 8007d18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007d1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d905      	bls.n	8007d30 <find_volume+0x1bc>
 8007d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d26:	3301      	adds	r3, #1
 8007d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d9e2      	bls.n	8007cf6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d101      	bne.n	8007d3c <find_volume+0x1c8>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e191      	b.n	8008060 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007d3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d901      	bls.n	8007d48 <find_volume+0x1d4>
 8007d44:	230d      	movs	r3, #13
 8007d46:	e18b      	b.n	8008060 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4a:	3338      	adds	r3, #56	@ 0x38
 8007d4c:	330b      	adds	r3, #11
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe f894 	bl	8005e7c <ld_word>
 8007d54:	4603      	mov	r3, r0
 8007d56:	461a      	mov	r2, r3
 8007d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5a:	899b      	ldrh	r3, [r3, #12]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d001      	beq.n	8007d64 <find_volume+0x1f0>
 8007d60:	230d      	movs	r3, #13
 8007d62:	e17d      	b.n	8008060 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	3338      	adds	r3, #56	@ 0x38
 8007d68:	3316      	adds	r3, #22
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe f886 	bl	8005e7c <ld_word>
 8007d70:	4603      	mov	r3, r0
 8007d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d106      	bne.n	8007d88 <find_volume+0x214>
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7c:	3338      	adds	r3, #56	@ 0x38
 8007d7e:	3324      	adds	r3, #36	@ 0x24
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fe f893 	bl	8005eac <ld_dword>
 8007d86:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d8c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d90:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9a:	789b      	ldrb	r3, [r3, #2]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d005      	beq.n	8007dac <find_volume+0x238>
 8007da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da2:	789b      	ldrb	r3, [r3, #2]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d001      	beq.n	8007dac <find_volume+0x238>
 8007da8:	230d      	movs	r3, #13
 8007daa:	e159      	b.n	8008060 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dae:	789b      	ldrb	r3, [r3, #2]
 8007db0:	461a      	mov	r2, r3
 8007db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007db4:	fb02 f303 	mul.w	r3, r2, r3
 8007db8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc8:	895b      	ldrh	r3, [r3, #10]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d008      	beq.n	8007de0 <find_volume+0x26c>
 8007dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd0:	895b      	ldrh	r3, [r3, #10]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd6:	895b      	ldrh	r3, [r3, #10]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <find_volume+0x270>
 8007de0:	230d      	movs	r3, #13
 8007de2:	e13d      	b.n	8008060 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de6:	3338      	adds	r3, #56	@ 0x38
 8007de8:	3311      	adds	r3, #17
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe f846 	bl	8005e7c <ld_word>
 8007df0:	4603      	mov	r3, r0
 8007df2:	461a      	mov	r2, r3
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfa:	891b      	ldrh	r3, [r3, #8]
 8007dfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dfe:	8992      	ldrh	r2, [r2, #12]
 8007e00:	0952      	lsrs	r2, r2, #5
 8007e02:	b292      	uxth	r2, r2
 8007e04:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e08:	fb01 f202 	mul.w	r2, r1, r2
 8007e0c:	1a9b      	subs	r3, r3, r2
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <find_volume+0x2a8>
 8007e14:	230d      	movs	r3, #13
 8007e16:	e123      	b.n	8008060 <find_volume+0x4ec>
 8007e18:	2000333c 	.word	0x2000333c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1e:	3338      	adds	r3, #56	@ 0x38
 8007e20:	3313      	adds	r3, #19
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe f82a 	bl	8005e7c <ld_word>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007e2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d106      	bne.n	8007e40 <find_volume+0x2cc>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e34:	3338      	adds	r3, #56	@ 0x38
 8007e36:	3320      	adds	r3, #32
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fe f837 	bl	8005eac <ld_dword>
 8007e3e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e42:	3338      	adds	r3, #56	@ 0x38
 8007e44:	330e      	adds	r3, #14
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe f818 	bl	8005e7c <ld_word>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007e50:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <find_volume+0x2e6>
 8007e56:	230d      	movs	r3, #13
 8007e58:	e102      	b.n	8008060 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007e5a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e5e:	4413      	add	r3, r2
 8007e60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e62:	8911      	ldrh	r1, [r2, #8]
 8007e64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e66:	8992      	ldrh	r2, [r2, #12]
 8007e68:	0952      	lsrs	r2, r2, #5
 8007e6a:	b292      	uxth	r2, r2
 8007e6c:	fbb1 f2f2 	udiv	r2, r1, r2
 8007e70:	b292      	uxth	r2, r2
 8007e72:	4413      	add	r3, r2
 8007e74:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d201      	bcs.n	8007e82 <find_volume+0x30e>
 8007e7e:	230d      	movs	r3, #13
 8007e80:	e0ee      	b.n	8008060 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007e82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e8a:	8952      	ldrh	r2, [r2, #10]
 8007e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e90:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <find_volume+0x328>
 8007e98:	230d      	movs	r3, #13
 8007e9a:	e0e1      	b.n	8008060 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d802      	bhi.n	8007eb2 <find_volume+0x33e>
 8007eac:	2302      	movs	r3, #2
 8007eae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d802      	bhi.n	8007ec2 <find_volume+0x34e>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	1c9a      	adds	r2, r3, #2
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ecc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ece:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ed0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ed4:	441a      	add	r2, r3
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007eda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ede:	441a      	add	r2, r3
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8007ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d11e      	bne.n	8007f2a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eee:	3338      	adds	r3, #56	@ 0x38
 8007ef0:	332a      	adds	r3, #42	@ 0x2a
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fd ffc2 	bl	8005e7c <ld_word>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <find_volume+0x38e>
 8007efe:	230d      	movs	r3, #13
 8007f00:	e0ae      	b.n	8008060 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f04:	891b      	ldrh	r3, [r3, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <find_volume+0x39a>
 8007f0a:	230d      	movs	r3, #13
 8007f0c:	e0a8      	b.n	8008060 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f10:	3338      	adds	r3, #56	@ 0x38
 8007f12:	332c      	adds	r3, #44	@ 0x2c
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fd ffc9 	bl	8005eac <ld_dword>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f28:	e01f      	b.n	8007f6a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	891b      	ldrh	r3, [r3, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <find_volume+0x3c2>
 8007f32:	230d      	movs	r3, #13
 8007f34:	e094      	b.n	8008060 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f3c:	441a      	add	r2, r3
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f40:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007f42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d103      	bne.n	8007f52 <find_volume+0x3de>
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	e00a      	b.n	8007f68 <find_volume+0x3f4>
 8007f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f54:	69da      	ldr	r2, [r3, #28]
 8007f56:	4613      	mov	r3, r2
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	4413      	add	r3, r2
 8007f5c:	085a      	lsrs	r2, r3, #1
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007f68:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	6a1a      	ldr	r2, [r3, #32]
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	899b      	ldrh	r3, [r3, #12]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f76:	440b      	add	r3, r1
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f7c:	8989      	ldrh	r1, [r1, #12]
 8007f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d201      	bcs.n	8007f8a <find_volume+0x416>
 8007f86:	230d      	movs	r3, #13
 8007f88:	e06a      	b.n	8008060 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f90:	619a      	str	r2, [r3, #24]
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f98:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	2280      	movs	r2, #128	@ 0x80
 8007f9e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d149      	bne.n	800803c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007faa:	3338      	adds	r3, #56	@ 0x38
 8007fac:	3330      	adds	r3, #48	@ 0x30
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fd ff64 	bl	8005e7c <ld_word>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d140      	bne.n	800803c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fc2:	f7fe fa0b 	bl	80063dc <move_window>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d137      	bne.n	800803c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fce:	2200      	movs	r2, #0
 8007fd0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	3338      	adds	r3, #56	@ 0x38
 8007fd6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fd ff4e 	bl	8005e7c <ld_word>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d127      	bne.n	800803c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	3338      	adds	r3, #56	@ 0x38
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fd ff5b 	bl	8005eac <ld_dword>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8008068 <find_volume+0x4f4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d11e      	bne.n	800803c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008000:	3338      	adds	r3, #56	@ 0x38
 8008002:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008006:	4618      	mov	r0, r3
 8008008:	f7fd ff50 	bl	8005eac <ld_dword>
 800800c:	4603      	mov	r3, r0
 800800e:	4a17      	ldr	r2, [pc, #92]	@ (800806c <find_volume+0x4f8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d113      	bne.n	800803c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008016:	3338      	adds	r3, #56	@ 0x38
 8008018:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800801c:	4618      	mov	r0, r3
 800801e:	f7fd ff45 	bl	8005eac <ld_dword>
 8008022:	4602      	mov	r2, r0
 8008024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008026:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802a:	3338      	adds	r3, #56	@ 0x38
 800802c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008030:	4618      	mov	r0, r3
 8008032:	f7fd ff3b 	bl	8005eac <ld_dword>
 8008036:	4602      	mov	r2, r0
 8008038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008042:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008044:	4b0a      	ldr	r3, [pc, #40]	@ (8008070 <find_volume+0x4fc>)
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	3301      	adds	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	4b08      	ldr	r3, [pc, #32]	@ (8008070 <find_volume+0x4fc>)
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	4b07      	ldr	r3, [pc, #28]	@ (8008070 <find_volume+0x4fc>)
 8008052:	881a      	ldrh	r2, [r3, #0]
 8008054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008056:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008058:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800805a:	f7fe f957 	bl	800630c <clear_lock>
#endif
	return FR_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3758      	adds	r7, #88	@ 0x58
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	41615252 	.word	0x41615252
 800806c:	61417272 	.word	0x61417272
 8008070:	20003340 	.word	0x20003340

08008074 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800807e:	2309      	movs	r3, #9
 8008080:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01c      	beq.n	80080c2 <validate+0x4e>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d018      	beq.n	80080c2 <validate+0x4e>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d013      	beq.n	80080c2 <validate+0x4e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	889a      	ldrh	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	88db      	ldrh	r3, [r3, #6]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d10c      	bne.n	80080c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fd fe44 	bl	8005d3c <disk_status>
 80080b4:	4603      	mov	r3, r0
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <validate+0x4e>
			res = FR_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d102      	bne.n	80080ce <validate+0x5a>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	e000      	b.n	80080d0 <validate+0x5c>
 80080ce:	2300      	movs	r3, #0
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	6013      	str	r3, [r2, #0]
	return res;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80080f2:	f107 0310 	add.w	r3, r7, #16
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fca2 	bl	8007a40 <get_ldnumber>
 80080fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	2b00      	cmp	r3, #0
 8008102:	da01      	bge.n	8008108 <f_mount+0x28>
 8008104:	230b      	movs	r3, #11
 8008106:	e02b      	b.n	8008160 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008108:	4a17      	ldr	r2, [pc, #92]	@ (8008168 <f_mount+0x88>)
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008110:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008118:	69b8      	ldr	r0, [r7, #24]
 800811a:	f7fe f8f7 	bl	800630c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	2200      	movs	r2, #0
 8008122:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	490d      	ldr	r1, [pc, #52]	@ (8008168 <f_mount+0x88>)
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <f_mount+0x66>
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d001      	beq.n	800814a <f_mount+0x6a>
 8008146:	2300      	movs	r3, #0
 8008148:	e00a      	b.n	8008160 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800814a:	f107 010c 	add.w	r1, r7, #12
 800814e:	f107 0308 	add.w	r3, r7, #8
 8008152:	2200      	movs	r2, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f7ff fd0d 	bl	8007b74 <find_volume>
 800815a:	4603      	mov	r3, r0
 800815c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800815e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3720      	adds	r7, #32
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	2000333c 	.word	0x2000333c

0800816c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b09a      	sub	sp, #104	@ 0x68
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <f_open+0x18>
 8008180:	2309      	movs	r3, #9
 8008182:	e1c7      	b.n	8008514 <f_open+0x3a8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800818a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800818c:	79fa      	ldrb	r2, [r7, #7]
 800818e:	f107 0110 	add.w	r1, r7, #16
 8008192:	f107 0308 	add.w	r3, r7, #8
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff fcec 	bl	8007b74 <find_volume>
 800819c:	4603      	mov	r3, r0
 800819e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80081a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f040 81ab 	bne.w	8008502 <f_open+0x396>
		dj.obj.fs = fs;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80081b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80081b4:	f000 ff34 	bl	8009020 <ff_memalloc>
 80081b8:	65b8      	str	r0, [r7, #88]	@ 0x58
 80081ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <f_open+0x58>
 80081c0:	2311      	movs	r3, #17
 80081c2:	e1a7      	b.n	8008514 <f_open+0x3a8>
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081c8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	f107 0314 	add.w	r3, r7, #20
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7ff fbbe 	bl	8007954 <follow_path>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80081de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d118      	bne.n	8008218 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80081e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80081ea:	b25b      	sxtb	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	da03      	bge.n	80081f8 <f_open+0x8c>
				res = FR_INVALID_NAME;
 80081f0:	2306      	movs	r3, #6
 80081f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80081f6:	e00f      	b.n	8008218 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	bf8c      	ite	hi
 80081fe:	2301      	movhi	r3, #1
 8008200:	2300      	movls	r3, #0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	f107 0314 	add.w	r3, r7, #20
 800820a:	4611      	mov	r1, r2
 800820c:	4618      	mov	r0, r3
 800820e:	f7fd ff35 	bl	800607c <chk_lock>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	f003 031c 	and.w	r3, r3, #28
 800821e:	2b00      	cmp	r3, #0
 8008220:	d07f      	beq.n	8008322 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 8008222:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008226:	2b00      	cmp	r3, #0
 8008228:	d017      	beq.n	800825a <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800822a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800822e:	2b04      	cmp	r3, #4
 8008230:	d10e      	bne.n	8008250 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008232:	f7fd ff7f 	bl	8006134 <enq_lock>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d006      	beq.n	800824a <f_open+0xde>
 800823c:	f107 0314 	add.w	r3, r7, #20
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff f8d7 	bl	80073f4 <dir_register>
 8008246:	4603      	mov	r3, r0
 8008248:	e000      	b.n	800824c <f_open+0xe0>
 800824a:	2312      	movs	r3, #18
 800824c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	f043 0308 	orr.w	r3, r3, #8
 8008256:	71fb      	strb	r3, [r7, #7]
 8008258:	e010      	b.n	800827c <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800825a:	7ebb      	ldrb	r3, [r7, #26]
 800825c:	f003 0311 	and.w	r3, r3, #17
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <f_open+0x100>
					res = FR_DENIED;
 8008264:	2307      	movs	r3, #7
 8008266:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800826a:	e007      	b.n	800827c <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <f_open+0x110>
 8008276:	2308      	movs	r3, #8
 8008278:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800827c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008280:	2b00      	cmp	r3, #0
 8008282:	d168      	bne.n	8008356 <f_open+0x1ea>
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d063      	beq.n	8008356 <f_open+0x1ea>
				dw = GET_FATTIME();
 800828e:	f7fd fbcd 	bl	8005a2c <get_fattime>
 8008292:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008296:	330e      	adds	r3, #14
 8008298:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800829a:	4618      	mov	r0, r3
 800829c:	f7fd fe44 	bl	8005f28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80082a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a2:	3316      	adds	r3, #22
 80082a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fd fe3e 	bl	8005f28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80082ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ae:	330b      	adds	r3, #11
 80082b0:	2220      	movs	r2, #32
 80082b2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082b8:	4611      	mov	r1, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe fe13 	bl	8006ee6 <ld_clust>
 80082c0:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80082c6:	2200      	movs	r2, #0
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe fe2b 	bl	8006f24 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80082ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d0:	331c      	adds	r3, #28
 80082d2:	2100      	movs	r1, #0
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fd fe27 	bl	8005f28 <st_dword>
					fs->wflag = 1;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2201      	movs	r2, #1
 80082de:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80082e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d037      	beq.n	8008356 <f_open+0x1ea>
						dw = fs->winsect;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ea:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	2200      	movs	r2, #0
 80082f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe fb1b 	bl	8006930 <remove_chain>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008300:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008304:	2b00      	cmp	r3, #0
 8008306:	d126      	bne.n	8008356 <f_open+0x1ea>
							res = move_window(fs, dw);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe f865 	bl	80063dc <move_window>
 8008312:	4603      	mov	r3, r0
 8008314:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800831c:	3a01      	subs	r2, #1
 800831e:	615a      	str	r2, [r3, #20]
 8008320:	e019      	b.n	8008356 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008322:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008326:	2b00      	cmp	r3, #0
 8008328:	d115      	bne.n	8008356 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800832a:	7ebb      	ldrb	r3, [r7, #26]
 800832c:	f003 0310 	and.w	r3, r3, #16
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <f_open+0x1d0>
					res = FR_NO_FILE;
 8008334:	2304      	movs	r3, #4
 8008336:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800833a:	e00c      	b.n	8008356 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d007      	beq.n	8008356 <f_open+0x1ea>
 8008346:	7ebb      	ldrb	r3, [r7, #26]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <f_open+0x1ea>
						res = FR_DENIED;
 8008350:	2307      	movs	r3, #7
 8008352:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008356:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800835a:	2b00      	cmp	r3, #0
 800835c:	d126      	bne.n	80083ac <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800835e:	79fb      	ldrb	r3, [r7, #7]
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <f_open+0x204>
				mode |= FA_MODIFIED;
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800836e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008378:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	2b01      	cmp	r3, #1
 8008382:	bf8c      	ite	hi
 8008384:	2301      	movhi	r3, #1
 8008386:	2300      	movls	r3, #0
 8008388:	b2db      	uxtb	r3, r3
 800838a:	461a      	mov	r2, r3
 800838c:	f107 0314 	add.w	r3, r7, #20
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f7fd fef0 	bl	8006178 <inc_lock>
 8008398:	4602      	mov	r2, r0
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d102      	bne.n	80083ac <f_open+0x240>
 80083a6:	2302      	movs	r3, #2
 80083a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80083ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f040 80a3 	bne.w	80084fc <f_open+0x390>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe fd92 	bl	8006ee6 <ld_clust>
 80083c2:	4602      	mov	r2, r0
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80083c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ca:	331c      	adds	r3, #28
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fd fd6d 	bl	8005eac <ld_dword>
 80083d2:	4602      	mov	r2, r0
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	88da      	ldrh	r2, [r3, #6]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	79fa      	ldrb	r2, [r7, #7]
 80083f0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3330      	adds	r3, #48	@ 0x30
 8008408:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f7fd fdd7 	bl	8005fc2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	f003 0320 	and.w	r3, r3, #32
 800841a:	2b00      	cmp	r3, #0
 800841c:	d06e      	beq.n	80084fc <f_open+0x390>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d06a      	beq.n	80084fc <f_open+0x390>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	895b      	ldrh	r3, [r3, #10]
 8008432:	461a      	mov	r2, r3
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	899b      	ldrh	r3, [r3, #12]
 8008438:	fb02 f303 	mul.w	r3, r2, r3
 800843c:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800844a:	e016      	b.n	800847a <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe f880 	bl	8006556 <get_fat>
 8008456:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008458:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800845a:	2b01      	cmp	r3, #1
 800845c:	d802      	bhi.n	8008464 <f_open+0x2f8>
 800845e:	2302      	movs	r3, #2
 8008460:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008464:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800846a:	d102      	bne.n	8008472 <f_open+0x306>
 800846c:	2301      	movs	r3, #1
 800846e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008472:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800847a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800847e:	2b00      	cmp	r3, #0
 8008480:	d103      	bne.n	800848a <f_open+0x31e>
 8008482:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008486:	429a      	cmp	r2, r3
 8008488:	d8e0      	bhi.n	800844c <f_open+0x2e0>
				}
				fp->clust = clst;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800848e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008490:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008494:	2b00      	cmp	r3, #0
 8008496:	d131      	bne.n	80084fc <f_open+0x390>
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	899b      	ldrh	r3, [r3, #12]
 800849c:	461a      	mov	r2, r3
 800849e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80084a4:	fb01 f202 	mul.w	r2, r1, r2
 80084a8:	1a9b      	subs	r3, r3, r2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d026      	beq.n	80084fc <f_open+0x390>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe f830 	bl	8006518 <clust2sect>
 80084b8:	64b8      	str	r0, [r7, #72]	@ 0x48
 80084ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d103      	bne.n	80084c8 <f_open+0x35c>
						res = FR_INT_ERR;
 80084c0:	2302      	movs	r3, #2
 80084c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80084c6:	e019      	b.n	80084fc <f_open+0x390>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	899b      	ldrh	r3, [r3, #12]
 80084cc:	461a      	mov	r2, r3
 80084ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80084d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084d6:	441a      	add	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	7858      	ldrb	r0, [r3, #1]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a1a      	ldr	r2, [r3, #32]
 80084ea:	2301      	movs	r3, #1
 80084ec:	f7fd fc68 	bl	8005dc0 <disk_read>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <f_open+0x390>
 80084f6:	2301      	movs	r3, #1
 80084f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 80084fc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80084fe:	f000 fd9b 	bl	8009038 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008502:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008506:	2b00      	cmp	r3, #0
 8008508:	d002      	beq.n	8008510 <f_open+0x3a4>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008510:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008514:	4618      	mov	r0, r3
 8008516:	3768      	adds	r7, #104	@ 0x68
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08c      	sub	sp, #48	@ 0x30
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f107 0210 	add.w	r2, r7, #16
 800853a:	4611      	mov	r1, r2
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fd99 	bl	8008074 <validate>
 8008542:	4603      	mov	r3, r0
 8008544:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008548:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800854c:	2b00      	cmp	r3, #0
 800854e:	d107      	bne.n	8008560 <f_write+0x44>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	7d5b      	ldrb	r3, [r3, #21]
 8008554:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008558:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <f_write+0x4a>
 8008560:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008564:	e16a      	b.n	800883c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	7d1b      	ldrb	r3, [r3, #20]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <f_write+0x5a>
 8008572:	2307      	movs	r3, #7
 8008574:	e162      	b.n	800883c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	699a      	ldr	r2, [r3, #24]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	441a      	add	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	429a      	cmp	r2, r3
 8008584:	f080 814c 	bcs.w	8008820 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	43db      	mvns	r3, r3
 800858e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008590:	e146      	b.n	8008820 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	8992      	ldrh	r2, [r2, #12]
 800859a:	fbb3 f1f2 	udiv	r1, r3, r2
 800859e:	fb01 f202 	mul.w	r2, r1, r2
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f040 80f1 	bne.w	800878c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	8992      	ldrh	r2, [r2, #12]
 80085b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	8952      	ldrh	r2, [r2, #10]
 80085ba:	3a01      	subs	r2, #1
 80085bc:	4013      	ands	r3, r2
 80085be:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d143      	bne.n	800864e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10c      	bne.n	80085e8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80085d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d11a      	bne.n	8008610 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2100      	movs	r1, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe fa0b 	bl	80069fa <create_chain>
 80085e4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80085e6:	e013      	b.n	8008610 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d007      	beq.n	8008600 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	4619      	mov	r1, r3
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7fe fa97 	bl	8006b2a <clmt_clust>
 80085fc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80085fe:	e007      	b.n	8008610 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7fe f9f6 	bl	80069fa <create_chain>
 800860e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 8109 	beq.w	800882a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861a:	2b01      	cmp	r3, #1
 800861c:	d104      	bne.n	8008628 <f_write+0x10c>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2202      	movs	r2, #2
 8008622:	755a      	strb	r2, [r3, #21]
 8008624:	2302      	movs	r3, #2
 8008626:	e109      	b.n	800883c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800862e:	d104      	bne.n	800863a <f_write+0x11e>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	755a      	strb	r2, [r3, #21]
 8008636:	2301      	movs	r3, #1
 8008638:	e100      	b.n	800883c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800863e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <f_write+0x132>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800864c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	7d1b      	ldrb	r3, [r3, #20]
 8008652:	b25b      	sxtb	r3, r3
 8008654:	2b00      	cmp	r3, #0
 8008656:	da18      	bge.n	800868a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	7858      	ldrb	r0, [r3, #1]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a1a      	ldr	r2, [r3, #32]
 8008666:	2301      	movs	r3, #1
 8008668:	f7fd fbca 	bl	8005e00 <disk_write>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d004      	beq.n	800867c <f_write+0x160>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	755a      	strb	r2, [r3, #21]
 8008678:	2301      	movs	r3, #1
 800867a:	e0df      	b.n	800883c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	7d1b      	ldrb	r3, [r3, #20]
 8008680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008684:	b2da      	uxtb	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f7fd ff40 	bl	8006518 <clust2sect>
 8008698:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d104      	bne.n	80086aa <f_write+0x18e>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2202      	movs	r2, #2
 80086a4:	755a      	strb	r2, [r3, #21]
 80086a6:	2302      	movs	r3, #2
 80086a8:	e0c8      	b.n	800883c <f_write+0x320>
			sect += csect;
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	4413      	add	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	899b      	ldrh	r3, [r3, #12]
 80086b6:	461a      	mov	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80086be:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d043      	beq.n	800874e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	4413      	add	r3, r2
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	8952      	ldrh	r2, [r2, #10]
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d905      	bls.n	80086e0 <f_write+0x1c4>
					cc = fs->csize - csect;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	895b      	ldrh	r3, [r3, #10]
 80086d8:	461a      	mov	r2, r3
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	7858      	ldrb	r0, [r3, #1]
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	69f9      	ldr	r1, [r7, #28]
 80086ea:	f7fd fb89 	bl	8005e00 <disk_write>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d004      	beq.n	80086fe <f_write+0x1e2>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	755a      	strb	r2, [r3, #21]
 80086fa:	2301      	movs	r3, #1
 80086fc:	e09e      	b.n	800883c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6a1a      	ldr	r2, [r3, #32]
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	6a3a      	ldr	r2, [r7, #32]
 8008708:	429a      	cmp	r2, r3
 800870a:	d918      	bls.n	800873e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a1a      	ldr	r2, [r3, #32]
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	8992      	ldrh	r2, [r2, #12]
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	69fa      	ldr	r2, [r7, #28]
 8008724:	18d1      	adds	r1, r2, r3
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	899b      	ldrh	r3, [r3, #12]
 800872a:	461a      	mov	r2, r3
 800872c:	f7fd fc28 	bl	8005f80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	7d1b      	ldrb	r3, [r3, #20]
 8008734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008738:	b2da      	uxtb	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	899b      	ldrh	r3, [r3, #12]
 8008742:	461a      	mov	r2, r3
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	fb02 f303 	mul.w	r3, r2, r3
 800874a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800874c:	e04b      	b.n	80087e6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	429a      	cmp	r2, r3
 8008756:	d016      	beq.n	8008786 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	699a      	ldr	r2, [r3, #24]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008760:	429a      	cmp	r2, r3
 8008762:	d210      	bcs.n	8008786 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	7858      	ldrb	r0, [r3, #1]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800876e:	2301      	movs	r3, #1
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	f7fd fb25 	bl	8005dc0 <disk_read>
 8008776:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	755a      	strb	r2, [r3, #21]
 8008782:	2301      	movs	r3, #1
 8008784:	e05a      	b.n	800883c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	899b      	ldrh	r3, [r3, #12]
 8008790:	4618      	mov	r0, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	8992      	ldrh	r2, [r2, #12]
 800879a:	fbb3 f1f2 	udiv	r1, r3, r2
 800879e:	fb01 f202 	mul.w	r2, r1, r2
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	1ac3      	subs	r3, r0, r3
 80087a6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80087a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d901      	bls.n	80087b4 <f_write+0x298>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	8992      	ldrh	r2, [r2, #12]
 80087c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80087c6:	fb00 f202 	mul.w	r2, r0, r2
 80087ca:	1a9b      	subs	r3, r3, r2
 80087cc:	440b      	add	r3, r1
 80087ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087d0:	69f9      	ldr	r1, [r7, #28]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fd fbd4 	bl	8005f80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	7d1b      	ldrb	r3, [r3, #20]
 80087dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ea:	4413      	add	r3, r2
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	441a      	add	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	619a      	str	r2, [r3, #24]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	429a      	cmp	r2, r3
 8008804:	bf38      	it	cc
 8008806:	461a      	movcc	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	60da      	str	r2, [r3, #12]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008812:	441a      	add	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	f47f aeb5 	bne.w	8008592 <f_write+0x76>
 8008828:	e000      	b.n	800882c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800882a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	7d1b      	ldrb	r3, [r3, #20]
 8008830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008834:	b2da      	uxtb	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3730      	adds	r7, #48	@ 0x30
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f107 0208 	add.w	r2, r7, #8
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f7ff fc0d 	bl	8008074 <validate>
 800885a:	4603      	mov	r3, r0
 800885c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d168      	bne.n	8008936 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	7d1b      	ldrb	r3, [r3, #20]
 8008868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	d062      	beq.n	8008936 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	7d1b      	ldrb	r3, [r3, #20]
 8008874:	b25b      	sxtb	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	da15      	bge.n	80088a6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	7858      	ldrb	r0, [r3, #1]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a1a      	ldr	r2, [r3, #32]
 8008888:	2301      	movs	r3, #1
 800888a:	f7fd fab9 	bl	8005e00 <disk_write>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <f_sync+0x54>
 8008894:	2301      	movs	r3, #1
 8008896:	e04f      	b.n	8008938 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	7d1b      	ldrb	r3, [r3, #20]
 800889c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088a0:	b2da      	uxtb	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80088a6:	f7fd f8c1 	bl	8005a2c <get_fattime>
 80088aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b2:	4619      	mov	r1, r3
 80088b4:	4610      	mov	r0, r2
 80088b6:	f7fd fd91 	bl	80063dc <move_window>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d138      	bne.n	8008936 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	330b      	adds	r3, #11
 80088ce:	781a      	ldrb	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	330b      	adds	r3, #11
 80088d4:	f042 0220 	orr.w	r2, r2, #32
 80088d8:	b2d2      	uxtb	r2, r2
 80088da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6818      	ldr	r0, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	461a      	mov	r2, r3
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	f7fe fb1c 	bl	8006f24 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f103 021c 	add.w	r2, r3, #28
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	4619      	mov	r1, r3
 80088f8:	4610      	mov	r0, r2
 80088fa:	f7fd fb15 	bl	8005f28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3316      	adds	r3, #22
 8008902:	6939      	ldr	r1, [r7, #16]
 8008904:	4618      	mov	r0, r3
 8008906:	f7fd fb0f 	bl	8005f28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3312      	adds	r3, #18
 800890e:	2100      	movs	r1, #0
 8008910:	4618      	mov	r0, r3
 8008912:	f7fd faee 	bl	8005ef2 <st_word>
					fs->wflag = 1;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2201      	movs	r2, #1
 800891a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd fd8a 	bl	8006438 <sync_fs>
 8008924:	4603      	mov	r3, r0
 8008926:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	7d1b      	ldrb	r3, [r3, #20]
 800892c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008930:	b2da      	uxtb	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008936:	7dfb      	ldrb	r3, [r7, #23]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff ff7b 	bl	8008844 <f_sync>
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d118      	bne.n	800898a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f107 0208 	add.w	r2, r7, #8
 800895e:	4611      	mov	r1, r2
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff fb87 	bl	8008074 <validate>
 8008966:	4603      	mov	r3, r0
 8008968:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10c      	bne.n	800898a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	4618      	mov	r0, r3
 8008976:	f7fd fc8d 	bl	8006294 <dec_lock>
 800897a:	4603      	mov	r3, r0
 800897c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d102      	bne.n	800898a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800898a:	7bfb      	ldrb	r3, [r7, #15]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b090      	sub	sp, #64	@ 0x40
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f107 0208 	add.w	r2, r7, #8
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff fb64 	bl	8008074 <validate>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80089b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d103      	bne.n	80089c2 <f_lseek+0x2e>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	7d5b      	ldrb	r3, [r3, #21]
 80089be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80089c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <f_lseek+0x3c>
 80089ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80089ce:	e201      	b.n	8008dd4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 80d9 	beq.w	8008b8c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089e0:	d15a      	bne.n	8008a98 <f_lseek+0x104>
			tbl = fp->cltbl;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80089e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ea:	1d1a      	adds	r2, r3, #4
 80089ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	2302      	movs	r3, #2
 80089f4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80089fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d03a      	beq.n	8008a78 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	613b      	str	r3, [r7, #16]
 8008a06:	2300      	movs	r3, #0
 8008a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0c:	3302      	adds	r3, #2
 8008a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	3301      	adds	r3, #1
 8008a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fd fd99 	bl	8006556 <get_fat>
 8008a24:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d804      	bhi.n	8008a36 <f_lseek+0xa2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	755a      	strb	r2, [r3, #21]
 8008a32:	2302      	movs	r3, #2
 8008a34:	e1ce      	b.n	8008dd4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a3c:	d104      	bne.n	8008a48 <f_lseek+0xb4>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	755a      	strb	r2, [r3, #21]
 8008a44:	2301      	movs	r3, #1
 8008a46:	e1c5      	b.n	8008dd4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d0de      	beq.n	8008a10 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d809      	bhi.n	8008a6e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5c:	1d1a      	adds	r2, r3, #4
 8008a5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a66:	1d1a      	adds	r2, r3, #4
 8008a68:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d3c4      	bcc.n	8008a02 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a7e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008a80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d803      	bhi.n	8008a90 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	e19f      	b.n	8008dd0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008a90:	2311      	movs	r3, #17
 8008a92:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008a96:	e19b      	b.n	8008dd0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d902      	bls.n	8008aa8 <f_lseek+0x114>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 818d 	beq.w	8008dd0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7fe f834 	bl	8006b2a <clmt_clust>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f7fd fd21 	bl	8006518 <clust2sect>
 8008ad6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d104      	bne.n	8008ae8 <f_lseek+0x154>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	755a      	strb	r2, [r3, #21]
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e175      	b.n	8008dd4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	8992      	ldrh	r2, [r2, #12]
 8008af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	8952      	ldrh	r2, [r2, #10]
 8008af8:	3a01      	subs	r2, #1
 8008afa:	4013      	ands	r3, r2
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	4413      	add	r3, r2
 8008b00:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	8992      	ldrh	r2, [r2, #12]
 8008b0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b0e:	fb01 f202 	mul.w	r2, r1, r2
 8008b12:	1a9b      	subs	r3, r3, r2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 815b 	beq.w	8008dd0 <f_lseek+0x43c>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	f000 8155 	beq.w	8008dd0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	7d1b      	ldrb	r3, [r3, #20]
 8008b2a:	b25b      	sxtb	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	da18      	bge.n	8008b62 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	7858      	ldrb	r0, [r3, #1]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1a      	ldr	r2, [r3, #32]
 8008b3e:	2301      	movs	r3, #1
 8008b40:	f7fd f95e 	bl	8005e00 <disk_write>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d004      	beq.n	8008b54 <f_lseek+0x1c0>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	755a      	strb	r2, [r3, #21]
 8008b50:	2301      	movs	r3, #1
 8008b52:	e13f      	b.n	8008dd4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	7d1b      	ldrb	r3, [r3, #20]
 8008b58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	7858      	ldrb	r0, [r3, #1]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	f7fd f926 	bl	8005dc0 <disk_read>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d004      	beq.n	8008b84 <f_lseek+0x1f0>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	755a      	strb	r2, [r3, #21]
 8008b80:	2301      	movs	r3, #1
 8008b82:	e127      	b.n	8008dd4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	621a      	str	r2, [r3, #32]
 8008b8a:	e121      	b.n	8008dd0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d908      	bls.n	8008ba8 <f_lseek+0x214>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	7d1b      	ldrb	r3, [r3, #20]
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d102      	bne.n	8008ba8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bb6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 80b5 	beq.w	8008d2a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	895b      	ldrh	r3, [r3, #10]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	899b      	ldrh	r3, [r3, #12]
 8008bca:	fb02 f303 	mul.w	r3, r2, r3
 8008bce:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008bd0:	6a3b      	ldr	r3, [r7, #32]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01b      	beq.n	8008c0e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	1e5a      	subs	r2, r3, #1
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	1e59      	subs	r1, r3, #1
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d30f      	bcc.n	8008c0e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	1e5a      	subs	r2, r3, #1
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	425b      	negs	r3, r3
 8008bf6:	401a      	ands	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c0c:	e022      	b.n	8008c54 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d119      	bne.n	8008c4e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fd feeb 	bl	80069fa <create_chain>
 8008c24:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d104      	bne.n	8008c36 <f_lseek+0x2a2>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	755a      	strb	r2, [r3, #21]
 8008c32:	2302      	movs	r3, #2
 8008c34:	e0ce      	b.n	8008dd4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c3c:	d104      	bne.n	8008c48 <f_lseek+0x2b4>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	755a      	strb	r2, [r3, #21]
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0c5      	b.n	8008dd4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c4c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c52:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d067      	beq.n	8008d2a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008c5a:	e03a      	b.n	8008cd2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	699a      	ldr	r2, [r3, #24]
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	441a      	add	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	7d1b      	ldrb	r3, [r3, #20]
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fd feba 	bl	80069fa <create_chain>
 8008c86:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d108      	bne.n	8008ca0 <f_lseek+0x30c>
							ofs = 0; break;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	603b      	str	r3, [r7, #0]
 8008c92:	e022      	b.n	8008cda <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fd fc5c 	bl	8006556 <get_fat>
 8008c9e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ca6:	d104      	bne.n	8008cb2 <f_lseek+0x31e>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	755a      	strb	r2, [r3, #21]
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e090      	b.n	8008dd4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d904      	bls.n	8008cc2 <f_lseek+0x32e>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d304      	bcc.n	8008ccc <f_lseek+0x338>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	755a      	strb	r2, [r3, #21]
 8008cc8:	2302      	movs	r3, #2
 8008cca:	e083      	b.n	8008dd4 <f_lseek+0x440>
					fp->clust = clst;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cd0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d8c0      	bhi.n	8008c5c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	699a      	ldr	r2, [r3, #24]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	441a      	add	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	899b      	ldrh	r3, [r3, #12]
 8008cea:	461a      	mov	r2, r3
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cf2:	fb01 f202 	mul.w	r2, r1, r2
 8008cf6:	1a9b      	subs	r3, r3, r2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d016      	beq.n	8008d2a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fd fc09 	bl	8006518 <clust2sect>
 8008d06:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d104      	bne.n	8008d18 <f_lseek+0x384>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2202      	movs	r2, #2
 8008d12:	755a      	strb	r2, [r3, #21]
 8008d14:	2302      	movs	r3, #2
 8008d16:	e05d      	b.n	8008dd4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	899b      	ldrh	r3, [r3, #12]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d26:	4413      	add	r3, r2
 8008d28:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699a      	ldr	r2, [r3, #24]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d90a      	bls.n	8008d4c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	699a      	ldr	r2, [r3, #24]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	7d1b      	ldrb	r3, [r3, #20]
 8008d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	8992      	ldrh	r2, [r2, #12]
 8008d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d58:	fb01 f202 	mul.w	r2, r1, r2
 8008d5c:	1a9b      	subs	r3, r3, r2
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d036      	beq.n	8008dd0 <f_lseek+0x43c>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d031      	beq.n	8008dd0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	7d1b      	ldrb	r3, [r3, #20]
 8008d70:	b25b      	sxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	da18      	bge.n	8008da8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	7858      	ldrb	r0, [r3, #1]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a1a      	ldr	r2, [r3, #32]
 8008d84:	2301      	movs	r3, #1
 8008d86:	f7fd f83b 	bl	8005e00 <disk_write>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d004      	beq.n	8008d9a <f_lseek+0x406>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	755a      	strb	r2, [r3, #21]
 8008d96:	2301      	movs	r3, #1
 8008d98:	e01c      	b.n	8008dd4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	7d1b      	ldrb	r3, [r3, #20]
 8008d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	7858      	ldrb	r0, [r3, #1]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008db2:	2301      	movs	r3, #1
 8008db4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008db6:	f7fd f803 	bl	8005dc0 <disk_read>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d004      	beq.n	8008dca <f_lseek+0x436>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	755a      	strb	r2, [r3, #21]
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e004      	b.n	8008dd4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008dce:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008dd0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3740      	adds	r7, #64	@ 0x40
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	4613      	mov	r3, r2
 8008de8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008dea:	2301      	movs	r3, #1
 8008dec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008df2:	4b1f      	ldr	r3, [pc, #124]	@ (8008e70 <FATFS_LinkDriverEx+0x94>)
 8008df4:	7a5b      	ldrb	r3, [r3, #9]
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d131      	bne.n	8008e60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8008e70 <FATFS_LinkDriverEx+0x94>)
 8008dfe:	7a5b      	ldrb	r3, [r3, #9]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	461a      	mov	r2, r3
 8008e04:	4b1a      	ldr	r3, [pc, #104]	@ (8008e70 <FATFS_LinkDriverEx+0x94>)
 8008e06:	2100      	movs	r1, #0
 8008e08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008e0a:	4b19      	ldr	r3, [pc, #100]	@ (8008e70 <FATFS_LinkDriverEx+0x94>)
 8008e0c:	7a5b      	ldrb	r3, [r3, #9]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	4a17      	ldr	r2, [pc, #92]	@ (8008e70 <FATFS_LinkDriverEx+0x94>)
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008e1a:	4b15      	ldr	r3, [pc, #84]	@ (8008e70 <FATFS_LinkDriverEx+0x94>)
 8008e1c:	7a5b      	ldrb	r3, [r3, #9]
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	461a      	mov	r2, r3
 8008e22:	4b13      	ldr	r3, [pc, #76]	@ (8008e70 <FATFS_LinkDriverEx+0x94>)
 8008e24:	4413      	add	r3, r2
 8008e26:	79fa      	ldrb	r2, [r7, #7]
 8008e28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008e2a:	4b11      	ldr	r3, [pc, #68]	@ (8008e70 <FATFS_LinkDriverEx+0x94>)
 8008e2c:	7a5b      	ldrb	r3, [r3, #9]
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	1c5a      	adds	r2, r3, #1
 8008e32:	b2d1      	uxtb	r1, r2
 8008e34:	4a0e      	ldr	r2, [pc, #56]	@ (8008e70 <FATFS_LinkDriverEx+0x94>)
 8008e36:	7251      	strb	r1, [r2, #9]
 8008e38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008e3a:	7dbb      	ldrb	r3, [r7, #22]
 8008e3c:	3330      	adds	r3, #48	@ 0x30
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	3301      	adds	r3, #1
 8008e48:	223a      	movs	r2, #58	@ 0x3a
 8008e4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	3302      	adds	r3, #2
 8008e50:	222f      	movs	r2, #47	@ 0x2f
 8008e52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	3303      	adds	r3, #3
 8008e58:	2200      	movs	r2, #0
 8008e5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	20003364 	.word	0x20003364

08008e74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e7e:	2200      	movs	r2, #0
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff ffaa 	bl	8008ddc <FATFS_LinkDriverEx>
 8008e88:	4603      	mov	r3, r0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	6039      	str	r1, [r7, #0]
 8008e9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008ea0:	88fb      	ldrh	r3, [r7, #6]
 8008ea2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ea4:	d802      	bhi.n	8008eac <ff_convert+0x18>
		c = chr;
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	81fb      	strh	r3, [r7, #14]
 8008eaa:	e025      	b.n	8008ef8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008eb2:	88fb      	ldrh	r3, [r7, #6]
 8008eb4:	2bff      	cmp	r3, #255	@ 0xff
 8008eb6:	d805      	bhi.n	8008ec4 <ff_convert+0x30>
 8008eb8:	88fb      	ldrh	r3, [r7, #6]
 8008eba:	3b80      	subs	r3, #128	@ 0x80
 8008ebc:	4a12      	ldr	r2, [pc, #72]	@ (8008f08 <ff_convert+0x74>)
 8008ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec2:	e000      	b.n	8008ec6 <ff_convert+0x32>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	81fb      	strh	r3, [r7, #14]
 8008ec8:	e016      	b.n	8008ef8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008eca:	2300      	movs	r3, #0
 8008ecc:	81fb      	strh	r3, [r7, #14]
 8008ece:	e009      	b.n	8008ee4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008ed0:	89fb      	ldrh	r3, [r7, #14]
 8008ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8008f08 <ff_convert+0x74>)
 8008ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ed8:	88fa      	ldrh	r2, [r7, #6]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d006      	beq.n	8008eec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008ede:	89fb      	ldrh	r3, [r7, #14]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	81fb      	strh	r3, [r7, #14]
 8008ee4:	89fb      	ldrh	r3, [r7, #14]
 8008ee6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ee8:	d9f2      	bls.n	8008ed0 <ff_convert+0x3c>
 8008eea:	e000      	b.n	8008eee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008eec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008eee:	89fb      	ldrh	r3, [r7, #14]
 8008ef0:	3380      	adds	r3, #128	@ 0x80
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008ef8:	89fb      	ldrh	r3, [r7, #14]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	0800a1d4 	.word	0x0800a1d4

08008f0c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008f16:	88fb      	ldrh	r3, [r7, #6]
 8008f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f1c:	d201      	bcs.n	8008f22 <ff_wtoupper+0x16>
 8008f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8009018 <ff_wtoupper+0x10c>)
 8008f20:	e000      	b.n	8008f24 <ff_wtoupper+0x18>
 8008f22:	4b3e      	ldr	r3, [pc, #248]	@ (800901c <ff_wtoupper+0x110>)
 8008f24:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	1c9a      	adds	r2, r3, #2
 8008f2a:	617a      	str	r2, [r7, #20]
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008f30:	8a7b      	ldrh	r3, [r7, #18]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d068      	beq.n	8009008 <ff_wtoupper+0xfc>
 8008f36:	88fa      	ldrh	r2, [r7, #6]
 8008f38:	8a7b      	ldrh	r3, [r7, #18]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d364      	bcc.n	8009008 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	1c9a      	adds	r2, r3, #2
 8008f42:	617a      	str	r2, [r7, #20]
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	823b      	strh	r3, [r7, #16]
 8008f48:	8a3b      	ldrh	r3, [r7, #16]
 8008f4a:	0a1b      	lsrs	r3, r3, #8
 8008f4c:	81fb      	strh	r3, [r7, #14]
 8008f4e:	8a3b      	ldrh	r3, [r7, #16]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008f54:	88fa      	ldrh	r2, [r7, #6]
 8008f56:	8a79      	ldrh	r1, [r7, #18]
 8008f58:	8a3b      	ldrh	r3, [r7, #16]
 8008f5a:	440b      	add	r3, r1
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	da49      	bge.n	8008ff4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008f60:	89fb      	ldrh	r3, [r7, #14]
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	d84f      	bhi.n	8009006 <ff_wtoupper+0xfa>
 8008f66:	a201      	add	r2, pc, #4	@ (adr r2, 8008f6c <ff_wtoupper+0x60>)
 8008f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6c:	08008f91 	.word	0x08008f91
 8008f70:	08008fa3 	.word	0x08008fa3
 8008f74:	08008fb9 	.word	0x08008fb9
 8008f78:	08008fc1 	.word	0x08008fc1
 8008f7c:	08008fc9 	.word	0x08008fc9
 8008f80:	08008fd1 	.word	0x08008fd1
 8008f84:	08008fd9 	.word	0x08008fd9
 8008f88:	08008fe1 	.word	0x08008fe1
 8008f8c:	08008fe9 	.word	0x08008fe9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008f90:	88fa      	ldrh	r2, [r7, #6]
 8008f92:	8a7b      	ldrh	r3, [r7, #18]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	80fb      	strh	r3, [r7, #6]
 8008fa0:	e027      	b.n	8008ff2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008fa2:	88fa      	ldrh	r2, [r7, #6]
 8008fa4:	8a7b      	ldrh	r3, [r7, #18]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	88fa      	ldrh	r2, [r7, #6]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	80fb      	strh	r3, [r7, #6]
 8008fb6:	e01c      	b.n	8008ff2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	3b10      	subs	r3, #16
 8008fbc:	80fb      	strh	r3, [r7, #6]
 8008fbe:	e018      	b.n	8008ff2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008fc0:	88fb      	ldrh	r3, [r7, #6]
 8008fc2:	3b20      	subs	r3, #32
 8008fc4:	80fb      	strh	r3, [r7, #6]
 8008fc6:	e014      	b.n	8008ff2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008fc8:	88fb      	ldrh	r3, [r7, #6]
 8008fca:	3b30      	subs	r3, #48	@ 0x30
 8008fcc:	80fb      	strh	r3, [r7, #6]
 8008fce:	e010      	b.n	8008ff2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008fd0:	88fb      	ldrh	r3, [r7, #6]
 8008fd2:	3b1a      	subs	r3, #26
 8008fd4:	80fb      	strh	r3, [r7, #6]
 8008fd6:	e00c      	b.n	8008ff2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	3308      	adds	r3, #8
 8008fdc:	80fb      	strh	r3, [r7, #6]
 8008fde:	e008      	b.n	8008ff2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008fe0:	88fb      	ldrh	r3, [r7, #6]
 8008fe2:	3b50      	subs	r3, #80	@ 0x50
 8008fe4:	80fb      	strh	r3, [r7, #6]
 8008fe6:	e004      	b.n	8008ff2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008fe8:	88fb      	ldrh	r3, [r7, #6]
 8008fea:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008fee:	80fb      	strh	r3, [r7, #6]
 8008ff0:	bf00      	nop
			}
			break;
 8008ff2:	e008      	b.n	8009006 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008ff4:	89fb      	ldrh	r3, [r7, #14]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d195      	bne.n	8008f26 <ff_wtoupper+0x1a>
 8008ffa:	8a3b      	ldrh	r3, [r7, #16]
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	4413      	add	r3, r2
 8009002:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009004:	e78f      	b.n	8008f26 <ff_wtoupper+0x1a>
			break;
 8009006:	bf00      	nop
	}

	return chr;
 8009008:	88fb      	ldrh	r3, [r7, #6]
}
 800900a:	4618      	mov	r0, r3
 800900c:	371c      	adds	r7, #28
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	0800a2d4 	.word	0x0800a2d4
 800901c:	0800a4c8 	.word	0x0800a4c8

08009020 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f811 	bl	8009050 <malloc>
 800902e:	4603      	mov	r3, r0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f80d 	bl	8009060 <free>
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <malloc>:
 8009050:	4b02      	ldr	r3, [pc, #8]	@ (800905c <malloc+0xc>)
 8009052:	4601      	mov	r1, r0
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	f000 b82d 	b.w	80090b4 <_malloc_r>
 800905a:	bf00      	nop
 800905c:	20000054 	.word	0x20000054

08009060 <free>:
 8009060:	4b02      	ldr	r3, [pc, #8]	@ (800906c <free+0xc>)
 8009062:	4601      	mov	r1, r0
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	f000 bb47 	b.w	80096f8 <_free_r>
 800906a:	bf00      	nop
 800906c:	20000054 	.word	0x20000054

08009070 <sbrk_aligned>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	4e0f      	ldr	r6, [pc, #60]	@ (80090b0 <sbrk_aligned+0x40>)
 8009074:	460c      	mov	r4, r1
 8009076:	6831      	ldr	r1, [r6, #0]
 8009078:	4605      	mov	r5, r0
 800907a:	b911      	cbnz	r1, 8009082 <sbrk_aligned+0x12>
 800907c:	f000 faec 	bl	8009658 <_sbrk_r>
 8009080:	6030      	str	r0, [r6, #0]
 8009082:	4621      	mov	r1, r4
 8009084:	4628      	mov	r0, r5
 8009086:	f000 fae7 	bl	8009658 <_sbrk_r>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	d103      	bne.n	8009096 <sbrk_aligned+0x26>
 800908e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009092:	4620      	mov	r0, r4
 8009094:	bd70      	pop	{r4, r5, r6, pc}
 8009096:	1cc4      	adds	r4, r0, #3
 8009098:	f024 0403 	bic.w	r4, r4, #3
 800909c:	42a0      	cmp	r0, r4
 800909e:	d0f8      	beq.n	8009092 <sbrk_aligned+0x22>
 80090a0:	1a21      	subs	r1, r4, r0
 80090a2:	4628      	mov	r0, r5
 80090a4:	f000 fad8 	bl	8009658 <_sbrk_r>
 80090a8:	3001      	adds	r0, #1
 80090aa:	d1f2      	bne.n	8009092 <sbrk_aligned+0x22>
 80090ac:	e7ef      	b.n	800908e <sbrk_aligned+0x1e>
 80090ae:	bf00      	nop
 80090b0:	20003370 	.word	0x20003370

080090b4 <_malloc_r>:
 80090b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b8:	1ccd      	adds	r5, r1, #3
 80090ba:	f025 0503 	bic.w	r5, r5, #3
 80090be:	3508      	adds	r5, #8
 80090c0:	2d0c      	cmp	r5, #12
 80090c2:	bf38      	it	cc
 80090c4:	250c      	movcc	r5, #12
 80090c6:	2d00      	cmp	r5, #0
 80090c8:	4606      	mov	r6, r0
 80090ca:	db01      	blt.n	80090d0 <_malloc_r+0x1c>
 80090cc:	42a9      	cmp	r1, r5
 80090ce:	d904      	bls.n	80090da <_malloc_r+0x26>
 80090d0:	230c      	movs	r3, #12
 80090d2:	6033      	str	r3, [r6, #0]
 80090d4:	2000      	movs	r0, #0
 80090d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091b0 <_malloc_r+0xfc>
 80090de:	f000 f869 	bl	80091b4 <__malloc_lock>
 80090e2:	f8d8 3000 	ldr.w	r3, [r8]
 80090e6:	461c      	mov	r4, r3
 80090e8:	bb44      	cbnz	r4, 800913c <_malloc_r+0x88>
 80090ea:	4629      	mov	r1, r5
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7ff ffbf 	bl	8009070 <sbrk_aligned>
 80090f2:	1c43      	adds	r3, r0, #1
 80090f4:	4604      	mov	r4, r0
 80090f6:	d158      	bne.n	80091aa <_malloc_r+0xf6>
 80090f8:	f8d8 4000 	ldr.w	r4, [r8]
 80090fc:	4627      	mov	r7, r4
 80090fe:	2f00      	cmp	r7, #0
 8009100:	d143      	bne.n	800918a <_malloc_r+0xd6>
 8009102:	2c00      	cmp	r4, #0
 8009104:	d04b      	beq.n	800919e <_malloc_r+0xea>
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	4639      	mov	r1, r7
 800910a:	4630      	mov	r0, r6
 800910c:	eb04 0903 	add.w	r9, r4, r3
 8009110:	f000 faa2 	bl	8009658 <_sbrk_r>
 8009114:	4581      	cmp	r9, r0
 8009116:	d142      	bne.n	800919e <_malloc_r+0xea>
 8009118:	6821      	ldr	r1, [r4, #0]
 800911a:	1a6d      	subs	r5, r5, r1
 800911c:	4629      	mov	r1, r5
 800911e:	4630      	mov	r0, r6
 8009120:	f7ff ffa6 	bl	8009070 <sbrk_aligned>
 8009124:	3001      	adds	r0, #1
 8009126:	d03a      	beq.n	800919e <_malloc_r+0xea>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	442b      	add	r3, r5
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	f8d8 3000 	ldr.w	r3, [r8]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	bb62      	cbnz	r2, 8009190 <_malloc_r+0xdc>
 8009136:	f8c8 7000 	str.w	r7, [r8]
 800913a:	e00f      	b.n	800915c <_malloc_r+0xa8>
 800913c:	6822      	ldr	r2, [r4, #0]
 800913e:	1b52      	subs	r2, r2, r5
 8009140:	d420      	bmi.n	8009184 <_malloc_r+0xd0>
 8009142:	2a0b      	cmp	r2, #11
 8009144:	d917      	bls.n	8009176 <_malloc_r+0xc2>
 8009146:	1961      	adds	r1, r4, r5
 8009148:	42a3      	cmp	r3, r4
 800914a:	6025      	str	r5, [r4, #0]
 800914c:	bf18      	it	ne
 800914e:	6059      	strne	r1, [r3, #4]
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	bf08      	it	eq
 8009154:	f8c8 1000 	streq.w	r1, [r8]
 8009158:	5162      	str	r2, [r4, r5]
 800915a:	604b      	str	r3, [r1, #4]
 800915c:	4630      	mov	r0, r6
 800915e:	f000 f82f 	bl	80091c0 <__malloc_unlock>
 8009162:	f104 000b 	add.w	r0, r4, #11
 8009166:	1d23      	adds	r3, r4, #4
 8009168:	f020 0007 	bic.w	r0, r0, #7
 800916c:	1ac2      	subs	r2, r0, r3
 800916e:	bf1c      	itt	ne
 8009170:	1a1b      	subne	r3, r3, r0
 8009172:	50a3      	strne	r3, [r4, r2]
 8009174:	e7af      	b.n	80090d6 <_malloc_r+0x22>
 8009176:	6862      	ldr	r2, [r4, #4]
 8009178:	42a3      	cmp	r3, r4
 800917a:	bf0c      	ite	eq
 800917c:	f8c8 2000 	streq.w	r2, [r8]
 8009180:	605a      	strne	r2, [r3, #4]
 8009182:	e7eb      	b.n	800915c <_malloc_r+0xa8>
 8009184:	4623      	mov	r3, r4
 8009186:	6864      	ldr	r4, [r4, #4]
 8009188:	e7ae      	b.n	80090e8 <_malloc_r+0x34>
 800918a:	463c      	mov	r4, r7
 800918c:	687f      	ldr	r7, [r7, #4]
 800918e:	e7b6      	b.n	80090fe <_malloc_r+0x4a>
 8009190:	461a      	mov	r2, r3
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	42a3      	cmp	r3, r4
 8009196:	d1fb      	bne.n	8009190 <_malloc_r+0xdc>
 8009198:	2300      	movs	r3, #0
 800919a:	6053      	str	r3, [r2, #4]
 800919c:	e7de      	b.n	800915c <_malloc_r+0xa8>
 800919e:	230c      	movs	r3, #12
 80091a0:	6033      	str	r3, [r6, #0]
 80091a2:	4630      	mov	r0, r6
 80091a4:	f000 f80c 	bl	80091c0 <__malloc_unlock>
 80091a8:	e794      	b.n	80090d4 <_malloc_r+0x20>
 80091aa:	6005      	str	r5, [r0, #0]
 80091ac:	e7d6      	b.n	800915c <_malloc_r+0xa8>
 80091ae:	bf00      	nop
 80091b0:	20003374 	.word	0x20003374

080091b4 <__malloc_lock>:
 80091b4:	4801      	ldr	r0, [pc, #4]	@ (80091bc <__malloc_lock+0x8>)
 80091b6:	f000 ba9c 	b.w	80096f2 <__retarget_lock_acquire_recursive>
 80091ba:	bf00      	nop
 80091bc:	200034b8 	.word	0x200034b8

080091c0 <__malloc_unlock>:
 80091c0:	4801      	ldr	r0, [pc, #4]	@ (80091c8 <__malloc_unlock+0x8>)
 80091c2:	f000 ba97 	b.w	80096f4 <__retarget_lock_release_recursive>
 80091c6:	bf00      	nop
 80091c8:	200034b8 	.word	0x200034b8

080091cc <std>:
 80091cc:	2300      	movs	r3, #0
 80091ce:	b510      	push	{r4, lr}
 80091d0:	4604      	mov	r4, r0
 80091d2:	e9c0 3300 	strd	r3, r3, [r0]
 80091d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091da:	6083      	str	r3, [r0, #8]
 80091dc:	8181      	strh	r1, [r0, #12]
 80091de:	6643      	str	r3, [r0, #100]	@ 0x64
 80091e0:	81c2      	strh	r2, [r0, #14]
 80091e2:	6183      	str	r3, [r0, #24]
 80091e4:	4619      	mov	r1, r3
 80091e6:	2208      	movs	r2, #8
 80091e8:	305c      	adds	r0, #92	@ 0x5c
 80091ea:	f000 f9f9 	bl	80095e0 <memset>
 80091ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <std+0x58>)
 80091f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80091f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009228 <std+0x5c>)
 80091f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80091f6:	4b0d      	ldr	r3, [pc, #52]	@ (800922c <std+0x60>)
 80091f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009230 <std+0x64>)
 80091fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80091fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009234 <std+0x68>)
 8009200:	6224      	str	r4, [r4, #32]
 8009202:	429c      	cmp	r4, r3
 8009204:	d006      	beq.n	8009214 <std+0x48>
 8009206:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800920a:	4294      	cmp	r4, r2
 800920c:	d002      	beq.n	8009214 <std+0x48>
 800920e:	33d0      	adds	r3, #208	@ 0xd0
 8009210:	429c      	cmp	r4, r3
 8009212:	d105      	bne.n	8009220 <std+0x54>
 8009214:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800921c:	f000 ba68 	b.w	80096f0 <__retarget_lock_init_recursive>
 8009220:	bd10      	pop	{r4, pc}
 8009222:	bf00      	nop
 8009224:	08009431 	.word	0x08009431
 8009228:	08009453 	.word	0x08009453
 800922c:	0800948b 	.word	0x0800948b
 8009230:	080094af 	.word	0x080094af
 8009234:	20003378 	.word	0x20003378

08009238 <stdio_exit_handler>:
 8009238:	4a02      	ldr	r2, [pc, #8]	@ (8009244 <stdio_exit_handler+0xc>)
 800923a:	4903      	ldr	r1, [pc, #12]	@ (8009248 <stdio_exit_handler+0x10>)
 800923c:	4803      	ldr	r0, [pc, #12]	@ (800924c <stdio_exit_handler+0x14>)
 800923e:	f000 b869 	b.w	8009314 <_fwalk_sglue>
 8009242:	bf00      	nop
 8009244:	20000048 	.word	0x20000048
 8009248:	08009e35 	.word	0x08009e35
 800924c:	20000058 	.word	0x20000058

08009250 <cleanup_stdio>:
 8009250:	6841      	ldr	r1, [r0, #4]
 8009252:	4b0c      	ldr	r3, [pc, #48]	@ (8009284 <cleanup_stdio+0x34>)
 8009254:	4299      	cmp	r1, r3
 8009256:	b510      	push	{r4, lr}
 8009258:	4604      	mov	r4, r0
 800925a:	d001      	beq.n	8009260 <cleanup_stdio+0x10>
 800925c:	f000 fdea 	bl	8009e34 <_fflush_r>
 8009260:	68a1      	ldr	r1, [r4, #8]
 8009262:	4b09      	ldr	r3, [pc, #36]	@ (8009288 <cleanup_stdio+0x38>)
 8009264:	4299      	cmp	r1, r3
 8009266:	d002      	beq.n	800926e <cleanup_stdio+0x1e>
 8009268:	4620      	mov	r0, r4
 800926a:	f000 fde3 	bl	8009e34 <_fflush_r>
 800926e:	68e1      	ldr	r1, [r4, #12]
 8009270:	4b06      	ldr	r3, [pc, #24]	@ (800928c <cleanup_stdio+0x3c>)
 8009272:	4299      	cmp	r1, r3
 8009274:	d004      	beq.n	8009280 <cleanup_stdio+0x30>
 8009276:	4620      	mov	r0, r4
 8009278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800927c:	f000 bdda 	b.w	8009e34 <_fflush_r>
 8009280:	bd10      	pop	{r4, pc}
 8009282:	bf00      	nop
 8009284:	20003378 	.word	0x20003378
 8009288:	200033e0 	.word	0x200033e0
 800928c:	20003448 	.word	0x20003448

08009290 <global_stdio_init.part.0>:
 8009290:	b510      	push	{r4, lr}
 8009292:	4b0b      	ldr	r3, [pc, #44]	@ (80092c0 <global_stdio_init.part.0+0x30>)
 8009294:	4c0b      	ldr	r4, [pc, #44]	@ (80092c4 <global_stdio_init.part.0+0x34>)
 8009296:	4a0c      	ldr	r2, [pc, #48]	@ (80092c8 <global_stdio_init.part.0+0x38>)
 8009298:	601a      	str	r2, [r3, #0]
 800929a:	4620      	mov	r0, r4
 800929c:	2200      	movs	r2, #0
 800929e:	2104      	movs	r1, #4
 80092a0:	f7ff ff94 	bl	80091cc <std>
 80092a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092a8:	2201      	movs	r2, #1
 80092aa:	2109      	movs	r1, #9
 80092ac:	f7ff ff8e 	bl	80091cc <std>
 80092b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092b4:	2202      	movs	r2, #2
 80092b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ba:	2112      	movs	r1, #18
 80092bc:	f7ff bf86 	b.w	80091cc <std>
 80092c0:	200034b0 	.word	0x200034b0
 80092c4:	20003378 	.word	0x20003378
 80092c8:	08009239 	.word	0x08009239

080092cc <__sfp_lock_acquire>:
 80092cc:	4801      	ldr	r0, [pc, #4]	@ (80092d4 <__sfp_lock_acquire+0x8>)
 80092ce:	f000 ba10 	b.w	80096f2 <__retarget_lock_acquire_recursive>
 80092d2:	bf00      	nop
 80092d4:	200034b9 	.word	0x200034b9

080092d8 <__sfp_lock_release>:
 80092d8:	4801      	ldr	r0, [pc, #4]	@ (80092e0 <__sfp_lock_release+0x8>)
 80092da:	f000 ba0b 	b.w	80096f4 <__retarget_lock_release_recursive>
 80092de:	bf00      	nop
 80092e0:	200034b9 	.word	0x200034b9

080092e4 <__sinit>:
 80092e4:	b510      	push	{r4, lr}
 80092e6:	4604      	mov	r4, r0
 80092e8:	f7ff fff0 	bl	80092cc <__sfp_lock_acquire>
 80092ec:	6a23      	ldr	r3, [r4, #32]
 80092ee:	b11b      	cbz	r3, 80092f8 <__sinit+0x14>
 80092f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f4:	f7ff bff0 	b.w	80092d8 <__sfp_lock_release>
 80092f8:	4b04      	ldr	r3, [pc, #16]	@ (800930c <__sinit+0x28>)
 80092fa:	6223      	str	r3, [r4, #32]
 80092fc:	4b04      	ldr	r3, [pc, #16]	@ (8009310 <__sinit+0x2c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1f5      	bne.n	80092f0 <__sinit+0xc>
 8009304:	f7ff ffc4 	bl	8009290 <global_stdio_init.part.0>
 8009308:	e7f2      	b.n	80092f0 <__sinit+0xc>
 800930a:	bf00      	nop
 800930c:	08009251 	.word	0x08009251
 8009310:	200034b0 	.word	0x200034b0

08009314 <_fwalk_sglue>:
 8009314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009318:	4607      	mov	r7, r0
 800931a:	4688      	mov	r8, r1
 800931c:	4614      	mov	r4, r2
 800931e:	2600      	movs	r6, #0
 8009320:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009324:	f1b9 0901 	subs.w	r9, r9, #1
 8009328:	d505      	bpl.n	8009336 <_fwalk_sglue+0x22>
 800932a:	6824      	ldr	r4, [r4, #0]
 800932c:	2c00      	cmp	r4, #0
 800932e:	d1f7      	bne.n	8009320 <_fwalk_sglue+0xc>
 8009330:	4630      	mov	r0, r6
 8009332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009336:	89ab      	ldrh	r3, [r5, #12]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d907      	bls.n	800934c <_fwalk_sglue+0x38>
 800933c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009340:	3301      	adds	r3, #1
 8009342:	d003      	beq.n	800934c <_fwalk_sglue+0x38>
 8009344:	4629      	mov	r1, r5
 8009346:	4638      	mov	r0, r7
 8009348:	47c0      	blx	r8
 800934a:	4306      	orrs	r6, r0
 800934c:	3568      	adds	r5, #104	@ 0x68
 800934e:	e7e9      	b.n	8009324 <_fwalk_sglue+0x10>

08009350 <iprintf>:
 8009350:	b40f      	push	{r0, r1, r2, r3}
 8009352:	b507      	push	{r0, r1, r2, lr}
 8009354:	4906      	ldr	r1, [pc, #24]	@ (8009370 <iprintf+0x20>)
 8009356:	ab04      	add	r3, sp, #16
 8009358:	6808      	ldr	r0, [r1, #0]
 800935a:	f853 2b04 	ldr.w	r2, [r3], #4
 800935e:	6881      	ldr	r1, [r0, #8]
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	f000 fa3d 	bl	80097e0 <_vfiprintf_r>
 8009366:	b003      	add	sp, #12
 8009368:	f85d eb04 	ldr.w	lr, [sp], #4
 800936c:	b004      	add	sp, #16
 800936e:	4770      	bx	lr
 8009370:	20000054 	.word	0x20000054

08009374 <_puts_r>:
 8009374:	6a03      	ldr	r3, [r0, #32]
 8009376:	b570      	push	{r4, r5, r6, lr}
 8009378:	6884      	ldr	r4, [r0, #8]
 800937a:	4605      	mov	r5, r0
 800937c:	460e      	mov	r6, r1
 800937e:	b90b      	cbnz	r3, 8009384 <_puts_r+0x10>
 8009380:	f7ff ffb0 	bl	80092e4 <__sinit>
 8009384:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009386:	07db      	lsls	r3, r3, #31
 8009388:	d405      	bmi.n	8009396 <_puts_r+0x22>
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	0598      	lsls	r0, r3, #22
 800938e:	d402      	bmi.n	8009396 <_puts_r+0x22>
 8009390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009392:	f000 f9ae 	bl	80096f2 <__retarget_lock_acquire_recursive>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	0719      	lsls	r1, r3, #28
 800939a:	d502      	bpl.n	80093a2 <_puts_r+0x2e>
 800939c:	6923      	ldr	r3, [r4, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d135      	bne.n	800940e <_puts_r+0x9a>
 80093a2:	4621      	mov	r1, r4
 80093a4:	4628      	mov	r0, r5
 80093a6:	f000 f8c5 	bl	8009534 <__swsetup_r>
 80093aa:	b380      	cbz	r0, 800940e <_puts_r+0x9a>
 80093ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80093b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093b2:	07da      	lsls	r2, r3, #31
 80093b4:	d405      	bmi.n	80093c2 <_puts_r+0x4e>
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	059b      	lsls	r3, r3, #22
 80093ba:	d402      	bmi.n	80093c2 <_puts_r+0x4e>
 80093bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093be:	f000 f999 	bl	80096f4 <__retarget_lock_release_recursive>
 80093c2:	4628      	mov	r0, r5
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	da04      	bge.n	80093d4 <_puts_r+0x60>
 80093ca:	69a2      	ldr	r2, [r4, #24]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	dc17      	bgt.n	8009400 <_puts_r+0x8c>
 80093d0:	290a      	cmp	r1, #10
 80093d2:	d015      	beq.n	8009400 <_puts_r+0x8c>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	6022      	str	r2, [r4, #0]
 80093da:	7019      	strb	r1, [r3, #0]
 80093dc:	68a3      	ldr	r3, [r4, #8]
 80093de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093e2:	3b01      	subs	r3, #1
 80093e4:	60a3      	str	r3, [r4, #8]
 80093e6:	2900      	cmp	r1, #0
 80093e8:	d1ed      	bne.n	80093c6 <_puts_r+0x52>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	da11      	bge.n	8009412 <_puts_r+0x9e>
 80093ee:	4622      	mov	r2, r4
 80093f0:	210a      	movs	r1, #10
 80093f2:	4628      	mov	r0, r5
 80093f4:	f000 f85f 	bl	80094b6 <__swbuf_r>
 80093f8:	3001      	adds	r0, #1
 80093fa:	d0d7      	beq.n	80093ac <_puts_r+0x38>
 80093fc:	250a      	movs	r5, #10
 80093fe:	e7d7      	b.n	80093b0 <_puts_r+0x3c>
 8009400:	4622      	mov	r2, r4
 8009402:	4628      	mov	r0, r5
 8009404:	f000 f857 	bl	80094b6 <__swbuf_r>
 8009408:	3001      	adds	r0, #1
 800940a:	d1e7      	bne.n	80093dc <_puts_r+0x68>
 800940c:	e7ce      	b.n	80093ac <_puts_r+0x38>
 800940e:	3e01      	subs	r6, #1
 8009410:	e7e4      	b.n	80093dc <_puts_r+0x68>
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	6022      	str	r2, [r4, #0]
 8009418:	220a      	movs	r2, #10
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	e7ee      	b.n	80093fc <_puts_r+0x88>
	...

08009420 <puts>:
 8009420:	4b02      	ldr	r3, [pc, #8]	@ (800942c <puts+0xc>)
 8009422:	4601      	mov	r1, r0
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	f7ff bfa5 	b.w	8009374 <_puts_r>
 800942a:	bf00      	nop
 800942c:	20000054 	.word	0x20000054

08009430 <__sread>:
 8009430:	b510      	push	{r4, lr}
 8009432:	460c      	mov	r4, r1
 8009434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009438:	f000 f8fc 	bl	8009634 <_read_r>
 800943c:	2800      	cmp	r0, #0
 800943e:	bfab      	itete	ge
 8009440:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009442:	89a3      	ldrhlt	r3, [r4, #12]
 8009444:	181b      	addge	r3, r3, r0
 8009446:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800944a:	bfac      	ite	ge
 800944c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800944e:	81a3      	strhlt	r3, [r4, #12]
 8009450:	bd10      	pop	{r4, pc}

08009452 <__swrite>:
 8009452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009456:	461f      	mov	r7, r3
 8009458:	898b      	ldrh	r3, [r1, #12]
 800945a:	05db      	lsls	r3, r3, #23
 800945c:	4605      	mov	r5, r0
 800945e:	460c      	mov	r4, r1
 8009460:	4616      	mov	r6, r2
 8009462:	d505      	bpl.n	8009470 <__swrite+0x1e>
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	2302      	movs	r3, #2
 800946a:	2200      	movs	r2, #0
 800946c:	f000 f8d0 	bl	8009610 <_lseek_r>
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	4632      	mov	r2, r6
 800947e:	463b      	mov	r3, r7
 8009480:	4628      	mov	r0, r5
 8009482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	f000 b8f7 	b.w	8009678 <_write_r>

0800948a <__sseek>:
 800948a:	b510      	push	{r4, lr}
 800948c:	460c      	mov	r4, r1
 800948e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009492:	f000 f8bd 	bl	8009610 <_lseek_r>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	bf15      	itete	ne
 800949c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800949e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094a6:	81a3      	strheq	r3, [r4, #12]
 80094a8:	bf18      	it	ne
 80094aa:	81a3      	strhne	r3, [r4, #12]
 80094ac:	bd10      	pop	{r4, pc}

080094ae <__sclose>:
 80094ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b2:	f000 b89d 	b.w	80095f0 <_close_r>

080094b6 <__swbuf_r>:
 80094b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b8:	460e      	mov	r6, r1
 80094ba:	4614      	mov	r4, r2
 80094bc:	4605      	mov	r5, r0
 80094be:	b118      	cbz	r0, 80094c8 <__swbuf_r+0x12>
 80094c0:	6a03      	ldr	r3, [r0, #32]
 80094c2:	b90b      	cbnz	r3, 80094c8 <__swbuf_r+0x12>
 80094c4:	f7ff ff0e 	bl	80092e4 <__sinit>
 80094c8:	69a3      	ldr	r3, [r4, #24]
 80094ca:	60a3      	str	r3, [r4, #8]
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	071a      	lsls	r2, r3, #28
 80094d0:	d501      	bpl.n	80094d6 <__swbuf_r+0x20>
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	b943      	cbnz	r3, 80094e8 <__swbuf_r+0x32>
 80094d6:	4621      	mov	r1, r4
 80094d8:	4628      	mov	r0, r5
 80094da:	f000 f82b 	bl	8009534 <__swsetup_r>
 80094de:	b118      	cbz	r0, 80094e8 <__swbuf_r+0x32>
 80094e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80094e4:	4638      	mov	r0, r7
 80094e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	6922      	ldr	r2, [r4, #16]
 80094ec:	1a98      	subs	r0, r3, r2
 80094ee:	6963      	ldr	r3, [r4, #20]
 80094f0:	b2f6      	uxtb	r6, r6
 80094f2:	4283      	cmp	r3, r0
 80094f4:	4637      	mov	r7, r6
 80094f6:	dc05      	bgt.n	8009504 <__swbuf_r+0x4e>
 80094f8:	4621      	mov	r1, r4
 80094fa:	4628      	mov	r0, r5
 80094fc:	f000 fc9a 	bl	8009e34 <_fflush_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	d1ed      	bne.n	80094e0 <__swbuf_r+0x2a>
 8009504:	68a3      	ldr	r3, [r4, #8]
 8009506:	3b01      	subs	r3, #1
 8009508:	60a3      	str	r3, [r4, #8]
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	6022      	str	r2, [r4, #0]
 8009510:	701e      	strb	r6, [r3, #0]
 8009512:	6962      	ldr	r2, [r4, #20]
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	429a      	cmp	r2, r3
 8009518:	d004      	beq.n	8009524 <__swbuf_r+0x6e>
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	07db      	lsls	r3, r3, #31
 800951e:	d5e1      	bpl.n	80094e4 <__swbuf_r+0x2e>
 8009520:	2e0a      	cmp	r6, #10
 8009522:	d1df      	bne.n	80094e4 <__swbuf_r+0x2e>
 8009524:	4621      	mov	r1, r4
 8009526:	4628      	mov	r0, r5
 8009528:	f000 fc84 	bl	8009e34 <_fflush_r>
 800952c:	2800      	cmp	r0, #0
 800952e:	d0d9      	beq.n	80094e4 <__swbuf_r+0x2e>
 8009530:	e7d6      	b.n	80094e0 <__swbuf_r+0x2a>
	...

08009534 <__swsetup_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4b29      	ldr	r3, [pc, #164]	@ (80095dc <__swsetup_r+0xa8>)
 8009538:	4605      	mov	r5, r0
 800953a:	6818      	ldr	r0, [r3, #0]
 800953c:	460c      	mov	r4, r1
 800953e:	b118      	cbz	r0, 8009548 <__swsetup_r+0x14>
 8009540:	6a03      	ldr	r3, [r0, #32]
 8009542:	b90b      	cbnz	r3, 8009548 <__swsetup_r+0x14>
 8009544:	f7ff fece 	bl	80092e4 <__sinit>
 8009548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800954c:	0719      	lsls	r1, r3, #28
 800954e:	d422      	bmi.n	8009596 <__swsetup_r+0x62>
 8009550:	06da      	lsls	r2, r3, #27
 8009552:	d407      	bmi.n	8009564 <__swsetup_r+0x30>
 8009554:	2209      	movs	r2, #9
 8009556:	602a      	str	r2, [r5, #0]
 8009558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009562:	e033      	b.n	80095cc <__swsetup_r+0x98>
 8009564:	0758      	lsls	r0, r3, #29
 8009566:	d512      	bpl.n	800958e <__swsetup_r+0x5a>
 8009568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800956a:	b141      	cbz	r1, 800957e <__swsetup_r+0x4a>
 800956c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009570:	4299      	cmp	r1, r3
 8009572:	d002      	beq.n	800957a <__swsetup_r+0x46>
 8009574:	4628      	mov	r0, r5
 8009576:	f000 f8bf 	bl	80096f8 <_free_r>
 800957a:	2300      	movs	r3, #0
 800957c:	6363      	str	r3, [r4, #52]	@ 0x34
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	2300      	movs	r3, #0
 8009588:	6063      	str	r3, [r4, #4]
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	f043 0308 	orr.w	r3, r3, #8
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	b94b      	cbnz	r3, 80095ae <__swsetup_r+0x7a>
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095a4:	d003      	beq.n	80095ae <__swsetup_r+0x7a>
 80095a6:	4621      	mov	r1, r4
 80095a8:	4628      	mov	r0, r5
 80095aa:	f000 fc91 	bl	8009ed0 <__smakebuf_r>
 80095ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b2:	f013 0201 	ands.w	r2, r3, #1
 80095b6:	d00a      	beq.n	80095ce <__swsetup_r+0x9a>
 80095b8:	2200      	movs	r2, #0
 80095ba:	60a2      	str	r2, [r4, #8]
 80095bc:	6962      	ldr	r2, [r4, #20]
 80095be:	4252      	negs	r2, r2
 80095c0:	61a2      	str	r2, [r4, #24]
 80095c2:	6922      	ldr	r2, [r4, #16]
 80095c4:	b942      	cbnz	r2, 80095d8 <__swsetup_r+0xa4>
 80095c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095ca:	d1c5      	bne.n	8009558 <__swsetup_r+0x24>
 80095cc:	bd38      	pop	{r3, r4, r5, pc}
 80095ce:	0799      	lsls	r1, r3, #30
 80095d0:	bf58      	it	pl
 80095d2:	6962      	ldrpl	r2, [r4, #20]
 80095d4:	60a2      	str	r2, [r4, #8]
 80095d6:	e7f4      	b.n	80095c2 <__swsetup_r+0x8e>
 80095d8:	2000      	movs	r0, #0
 80095da:	e7f7      	b.n	80095cc <__swsetup_r+0x98>
 80095dc:	20000054 	.word	0x20000054

080095e0 <memset>:
 80095e0:	4402      	add	r2, r0
 80095e2:	4603      	mov	r3, r0
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d100      	bne.n	80095ea <memset+0xa>
 80095e8:	4770      	bx	lr
 80095ea:	f803 1b01 	strb.w	r1, [r3], #1
 80095ee:	e7f9      	b.n	80095e4 <memset+0x4>

080095f0 <_close_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	4d06      	ldr	r5, [pc, #24]	@ (800960c <_close_r+0x1c>)
 80095f4:	2300      	movs	r3, #0
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	f7f7 fe6f 	bl	80012de <_close>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_close_r+0x1a>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_close_r+0x1a>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	200034b4 	.word	0x200034b4

08009610 <_lseek_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d07      	ldr	r5, [pc, #28]	@ (8009630 <_lseek_r+0x20>)
 8009614:	4604      	mov	r4, r0
 8009616:	4608      	mov	r0, r1
 8009618:	4611      	mov	r1, r2
 800961a:	2200      	movs	r2, #0
 800961c:	602a      	str	r2, [r5, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	f7f7 fe84 	bl	800132c <_lseek>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_lseek_r+0x1e>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_lseek_r+0x1e>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	200034b4 	.word	0x200034b4

08009634 <_read_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d07      	ldr	r5, [pc, #28]	@ (8009654 <_read_r+0x20>)
 8009638:	4604      	mov	r4, r0
 800963a:	4608      	mov	r0, r1
 800963c:	4611      	mov	r1, r2
 800963e:	2200      	movs	r2, #0
 8009640:	602a      	str	r2, [r5, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	f7f7 fe2e 	bl	80012a4 <_read>
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	d102      	bne.n	8009652 <_read_r+0x1e>
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	b103      	cbz	r3, 8009652 <_read_r+0x1e>
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	bd38      	pop	{r3, r4, r5, pc}
 8009654:	200034b4 	.word	0x200034b4

08009658 <_sbrk_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4d06      	ldr	r5, [pc, #24]	@ (8009674 <_sbrk_r+0x1c>)
 800965c:	2300      	movs	r3, #0
 800965e:	4604      	mov	r4, r0
 8009660:	4608      	mov	r0, r1
 8009662:	602b      	str	r3, [r5, #0]
 8009664:	f7f7 fe70 	bl	8001348 <_sbrk>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_sbrk_r+0x1a>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_sbrk_r+0x1a>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	200034b4 	.word	0x200034b4

08009678 <_write_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d07      	ldr	r5, [pc, #28]	@ (8009698 <_write_r+0x20>)
 800967c:	4604      	mov	r4, r0
 800967e:	4608      	mov	r0, r1
 8009680:	4611      	mov	r1, r2
 8009682:	2200      	movs	r2, #0
 8009684:	602a      	str	r2, [r5, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	f7f7 fb3c 	bl	8000d04 <_write>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_write_r+0x1e>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_write_r+0x1e>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	200034b4 	.word	0x200034b4

0800969c <__errno>:
 800969c:	4b01      	ldr	r3, [pc, #4]	@ (80096a4 <__errno+0x8>)
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20000054 	.word	0x20000054

080096a8 <__libc_init_array>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	4d0d      	ldr	r5, [pc, #52]	@ (80096e0 <__libc_init_array+0x38>)
 80096ac:	4c0d      	ldr	r4, [pc, #52]	@ (80096e4 <__libc_init_array+0x3c>)
 80096ae:	1b64      	subs	r4, r4, r5
 80096b0:	10a4      	asrs	r4, r4, #2
 80096b2:	2600      	movs	r6, #0
 80096b4:	42a6      	cmp	r6, r4
 80096b6:	d109      	bne.n	80096cc <__libc_init_array+0x24>
 80096b8:	4d0b      	ldr	r5, [pc, #44]	@ (80096e8 <__libc_init_array+0x40>)
 80096ba:	4c0c      	ldr	r4, [pc, #48]	@ (80096ec <__libc_init_array+0x44>)
 80096bc:	f000 fc66 	bl	8009f8c <_init>
 80096c0:	1b64      	subs	r4, r4, r5
 80096c2:	10a4      	asrs	r4, r4, #2
 80096c4:	2600      	movs	r6, #0
 80096c6:	42a6      	cmp	r6, r4
 80096c8:	d105      	bne.n	80096d6 <__libc_init_array+0x2e>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d0:	4798      	blx	r3
 80096d2:	3601      	adds	r6, #1
 80096d4:	e7ee      	b.n	80096b4 <__libc_init_array+0xc>
 80096d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096da:	4798      	blx	r3
 80096dc:	3601      	adds	r6, #1
 80096de:	e7f2      	b.n	80096c6 <__libc_init_array+0x1e>
 80096e0:	0800a5c0 	.word	0x0800a5c0
 80096e4:	0800a5c0 	.word	0x0800a5c0
 80096e8:	0800a5c0 	.word	0x0800a5c0
 80096ec:	0800a5c4 	.word	0x0800a5c4

080096f0 <__retarget_lock_init_recursive>:
 80096f0:	4770      	bx	lr

080096f2 <__retarget_lock_acquire_recursive>:
 80096f2:	4770      	bx	lr

080096f4 <__retarget_lock_release_recursive>:
 80096f4:	4770      	bx	lr
	...

080096f8 <_free_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4605      	mov	r5, r0
 80096fc:	2900      	cmp	r1, #0
 80096fe:	d041      	beq.n	8009784 <_free_r+0x8c>
 8009700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009704:	1f0c      	subs	r4, r1, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	bfb8      	it	lt
 800970a:	18e4      	addlt	r4, r4, r3
 800970c:	f7ff fd52 	bl	80091b4 <__malloc_lock>
 8009710:	4a1d      	ldr	r2, [pc, #116]	@ (8009788 <_free_r+0x90>)
 8009712:	6813      	ldr	r3, [r2, #0]
 8009714:	b933      	cbnz	r3, 8009724 <_free_r+0x2c>
 8009716:	6063      	str	r3, [r4, #4]
 8009718:	6014      	str	r4, [r2, #0]
 800971a:	4628      	mov	r0, r5
 800971c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009720:	f7ff bd4e 	b.w	80091c0 <__malloc_unlock>
 8009724:	42a3      	cmp	r3, r4
 8009726:	d908      	bls.n	800973a <_free_r+0x42>
 8009728:	6820      	ldr	r0, [r4, #0]
 800972a:	1821      	adds	r1, r4, r0
 800972c:	428b      	cmp	r3, r1
 800972e:	bf01      	itttt	eq
 8009730:	6819      	ldreq	r1, [r3, #0]
 8009732:	685b      	ldreq	r3, [r3, #4]
 8009734:	1809      	addeq	r1, r1, r0
 8009736:	6021      	streq	r1, [r4, #0]
 8009738:	e7ed      	b.n	8009716 <_free_r+0x1e>
 800973a:	461a      	mov	r2, r3
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	b10b      	cbz	r3, 8009744 <_free_r+0x4c>
 8009740:	42a3      	cmp	r3, r4
 8009742:	d9fa      	bls.n	800973a <_free_r+0x42>
 8009744:	6811      	ldr	r1, [r2, #0]
 8009746:	1850      	adds	r0, r2, r1
 8009748:	42a0      	cmp	r0, r4
 800974a:	d10b      	bne.n	8009764 <_free_r+0x6c>
 800974c:	6820      	ldr	r0, [r4, #0]
 800974e:	4401      	add	r1, r0
 8009750:	1850      	adds	r0, r2, r1
 8009752:	4283      	cmp	r3, r0
 8009754:	6011      	str	r1, [r2, #0]
 8009756:	d1e0      	bne.n	800971a <_free_r+0x22>
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	6053      	str	r3, [r2, #4]
 800975e:	4408      	add	r0, r1
 8009760:	6010      	str	r0, [r2, #0]
 8009762:	e7da      	b.n	800971a <_free_r+0x22>
 8009764:	d902      	bls.n	800976c <_free_r+0x74>
 8009766:	230c      	movs	r3, #12
 8009768:	602b      	str	r3, [r5, #0]
 800976a:	e7d6      	b.n	800971a <_free_r+0x22>
 800976c:	6820      	ldr	r0, [r4, #0]
 800976e:	1821      	adds	r1, r4, r0
 8009770:	428b      	cmp	r3, r1
 8009772:	bf04      	itt	eq
 8009774:	6819      	ldreq	r1, [r3, #0]
 8009776:	685b      	ldreq	r3, [r3, #4]
 8009778:	6063      	str	r3, [r4, #4]
 800977a:	bf04      	itt	eq
 800977c:	1809      	addeq	r1, r1, r0
 800977e:	6021      	streq	r1, [r4, #0]
 8009780:	6054      	str	r4, [r2, #4]
 8009782:	e7ca      	b.n	800971a <_free_r+0x22>
 8009784:	bd38      	pop	{r3, r4, r5, pc}
 8009786:	bf00      	nop
 8009788:	20003374 	.word	0x20003374

0800978c <__sfputc_r>:
 800978c:	6893      	ldr	r3, [r2, #8]
 800978e:	3b01      	subs	r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	b410      	push	{r4}
 8009794:	6093      	str	r3, [r2, #8]
 8009796:	da08      	bge.n	80097aa <__sfputc_r+0x1e>
 8009798:	6994      	ldr	r4, [r2, #24]
 800979a:	42a3      	cmp	r3, r4
 800979c:	db01      	blt.n	80097a2 <__sfputc_r+0x16>
 800979e:	290a      	cmp	r1, #10
 80097a0:	d103      	bne.n	80097aa <__sfputc_r+0x1e>
 80097a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097a6:	f7ff be86 	b.w	80094b6 <__swbuf_r>
 80097aa:	6813      	ldr	r3, [r2, #0]
 80097ac:	1c58      	adds	r0, r3, #1
 80097ae:	6010      	str	r0, [r2, #0]
 80097b0:	7019      	strb	r1, [r3, #0]
 80097b2:	4608      	mov	r0, r1
 80097b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <__sfputs_r>:
 80097ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097bc:	4606      	mov	r6, r0
 80097be:	460f      	mov	r7, r1
 80097c0:	4614      	mov	r4, r2
 80097c2:	18d5      	adds	r5, r2, r3
 80097c4:	42ac      	cmp	r4, r5
 80097c6:	d101      	bne.n	80097cc <__sfputs_r+0x12>
 80097c8:	2000      	movs	r0, #0
 80097ca:	e007      	b.n	80097dc <__sfputs_r+0x22>
 80097cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d0:	463a      	mov	r2, r7
 80097d2:	4630      	mov	r0, r6
 80097d4:	f7ff ffda 	bl	800978c <__sfputc_r>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d1f3      	bne.n	80097c4 <__sfputs_r+0xa>
 80097dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097e0 <_vfiprintf_r>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	460d      	mov	r5, r1
 80097e6:	b09d      	sub	sp, #116	@ 0x74
 80097e8:	4614      	mov	r4, r2
 80097ea:	4698      	mov	r8, r3
 80097ec:	4606      	mov	r6, r0
 80097ee:	b118      	cbz	r0, 80097f8 <_vfiprintf_r+0x18>
 80097f0:	6a03      	ldr	r3, [r0, #32]
 80097f2:	b90b      	cbnz	r3, 80097f8 <_vfiprintf_r+0x18>
 80097f4:	f7ff fd76 	bl	80092e4 <__sinit>
 80097f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097fa:	07d9      	lsls	r1, r3, #31
 80097fc:	d405      	bmi.n	800980a <_vfiprintf_r+0x2a>
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	059a      	lsls	r2, r3, #22
 8009802:	d402      	bmi.n	800980a <_vfiprintf_r+0x2a>
 8009804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009806:	f7ff ff74 	bl	80096f2 <__retarget_lock_acquire_recursive>
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	071b      	lsls	r3, r3, #28
 800980e:	d501      	bpl.n	8009814 <_vfiprintf_r+0x34>
 8009810:	692b      	ldr	r3, [r5, #16]
 8009812:	b99b      	cbnz	r3, 800983c <_vfiprintf_r+0x5c>
 8009814:	4629      	mov	r1, r5
 8009816:	4630      	mov	r0, r6
 8009818:	f7ff fe8c 	bl	8009534 <__swsetup_r>
 800981c:	b170      	cbz	r0, 800983c <_vfiprintf_r+0x5c>
 800981e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009820:	07dc      	lsls	r4, r3, #31
 8009822:	d504      	bpl.n	800982e <_vfiprintf_r+0x4e>
 8009824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009828:	b01d      	add	sp, #116	@ 0x74
 800982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	0598      	lsls	r0, r3, #22
 8009832:	d4f7      	bmi.n	8009824 <_vfiprintf_r+0x44>
 8009834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009836:	f7ff ff5d 	bl	80096f4 <__retarget_lock_release_recursive>
 800983a:	e7f3      	b.n	8009824 <_vfiprintf_r+0x44>
 800983c:	2300      	movs	r3, #0
 800983e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009840:	2320      	movs	r3, #32
 8009842:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009846:	f8cd 800c 	str.w	r8, [sp, #12]
 800984a:	2330      	movs	r3, #48	@ 0x30
 800984c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80099fc <_vfiprintf_r+0x21c>
 8009850:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009854:	f04f 0901 	mov.w	r9, #1
 8009858:	4623      	mov	r3, r4
 800985a:	469a      	mov	sl, r3
 800985c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009860:	b10a      	cbz	r2, 8009866 <_vfiprintf_r+0x86>
 8009862:	2a25      	cmp	r2, #37	@ 0x25
 8009864:	d1f9      	bne.n	800985a <_vfiprintf_r+0x7a>
 8009866:	ebba 0b04 	subs.w	fp, sl, r4
 800986a:	d00b      	beq.n	8009884 <_vfiprintf_r+0xa4>
 800986c:	465b      	mov	r3, fp
 800986e:	4622      	mov	r2, r4
 8009870:	4629      	mov	r1, r5
 8009872:	4630      	mov	r0, r6
 8009874:	f7ff ffa1 	bl	80097ba <__sfputs_r>
 8009878:	3001      	adds	r0, #1
 800987a:	f000 80a7 	beq.w	80099cc <_vfiprintf_r+0x1ec>
 800987e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009880:	445a      	add	r2, fp
 8009882:	9209      	str	r2, [sp, #36]	@ 0x24
 8009884:	f89a 3000 	ldrb.w	r3, [sl]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 809f 	beq.w	80099cc <_vfiprintf_r+0x1ec>
 800988e:	2300      	movs	r3, #0
 8009890:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009898:	f10a 0a01 	add.w	sl, sl, #1
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	9307      	str	r3, [sp, #28]
 80098a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80098a6:	4654      	mov	r4, sl
 80098a8:	2205      	movs	r2, #5
 80098aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ae:	4853      	ldr	r0, [pc, #332]	@ (80099fc <_vfiprintf_r+0x21c>)
 80098b0:	f7f6 fcae 	bl	8000210 <memchr>
 80098b4:	9a04      	ldr	r2, [sp, #16]
 80098b6:	b9d8      	cbnz	r0, 80098f0 <_vfiprintf_r+0x110>
 80098b8:	06d1      	lsls	r1, r2, #27
 80098ba:	bf44      	itt	mi
 80098bc:	2320      	movmi	r3, #32
 80098be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098c2:	0713      	lsls	r3, r2, #28
 80098c4:	bf44      	itt	mi
 80098c6:	232b      	movmi	r3, #43	@ 0x2b
 80098c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098cc:	f89a 3000 	ldrb.w	r3, [sl]
 80098d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80098d2:	d015      	beq.n	8009900 <_vfiprintf_r+0x120>
 80098d4:	9a07      	ldr	r2, [sp, #28]
 80098d6:	4654      	mov	r4, sl
 80098d8:	2000      	movs	r0, #0
 80098da:	f04f 0c0a 	mov.w	ip, #10
 80098de:	4621      	mov	r1, r4
 80098e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e4:	3b30      	subs	r3, #48	@ 0x30
 80098e6:	2b09      	cmp	r3, #9
 80098e8:	d94b      	bls.n	8009982 <_vfiprintf_r+0x1a2>
 80098ea:	b1b0      	cbz	r0, 800991a <_vfiprintf_r+0x13a>
 80098ec:	9207      	str	r2, [sp, #28]
 80098ee:	e014      	b.n	800991a <_vfiprintf_r+0x13a>
 80098f0:	eba0 0308 	sub.w	r3, r0, r8
 80098f4:	fa09 f303 	lsl.w	r3, r9, r3
 80098f8:	4313      	orrs	r3, r2
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	46a2      	mov	sl, r4
 80098fe:	e7d2      	b.n	80098a6 <_vfiprintf_r+0xc6>
 8009900:	9b03      	ldr	r3, [sp, #12]
 8009902:	1d19      	adds	r1, r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	9103      	str	r1, [sp, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfbb      	ittet	lt
 800990c:	425b      	neglt	r3, r3
 800990e:	f042 0202 	orrlt.w	r2, r2, #2
 8009912:	9307      	strge	r3, [sp, #28]
 8009914:	9307      	strlt	r3, [sp, #28]
 8009916:	bfb8      	it	lt
 8009918:	9204      	strlt	r2, [sp, #16]
 800991a:	7823      	ldrb	r3, [r4, #0]
 800991c:	2b2e      	cmp	r3, #46	@ 0x2e
 800991e:	d10a      	bne.n	8009936 <_vfiprintf_r+0x156>
 8009920:	7863      	ldrb	r3, [r4, #1]
 8009922:	2b2a      	cmp	r3, #42	@ 0x2a
 8009924:	d132      	bne.n	800998c <_vfiprintf_r+0x1ac>
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	1d1a      	adds	r2, r3, #4
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	9203      	str	r2, [sp, #12]
 800992e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009932:	3402      	adds	r4, #2
 8009934:	9305      	str	r3, [sp, #20]
 8009936:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a0c <_vfiprintf_r+0x22c>
 800993a:	7821      	ldrb	r1, [r4, #0]
 800993c:	2203      	movs	r2, #3
 800993e:	4650      	mov	r0, sl
 8009940:	f7f6 fc66 	bl	8000210 <memchr>
 8009944:	b138      	cbz	r0, 8009956 <_vfiprintf_r+0x176>
 8009946:	9b04      	ldr	r3, [sp, #16]
 8009948:	eba0 000a 	sub.w	r0, r0, sl
 800994c:	2240      	movs	r2, #64	@ 0x40
 800994e:	4082      	lsls	r2, r0
 8009950:	4313      	orrs	r3, r2
 8009952:	3401      	adds	r4, #1
 8009954:	9304      	str	r3, [sp, #16]
 8009956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995a:	4829      	ldr	r0, [pc, #164]	@ (8009a00 <_vfiprintf_r+0x220>)
 800995c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009960:	2206      	movs	r2, #6
 8009962:	f7f6 fc55 	bl	8000210 <memchr>
 8009966:	2800      	cmp	r0, #0
 8009968:	d03f      	beq.n	80099ea <_vfiprintf_r+0x20a>
 800996a:	4b26      	ldr	r3, [pc, #152]	@ (8009a04 <_vfiprintf_r+0x224>)
 800996c:	bb1b      	cbnz	r3, 80099b6 <_vfiprintf_r+0x1d6>
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	3307      	adds	r3, #7
 8009972:	f023 0307 	bic.w	r3, r3, #7
 8009976:	3308      	adds	r3, #8
 8009978:	9303      	str	r3, [sp, #12]
 800997a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800997c:	443b      	add	r3, r7
 800997e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009980:	e76a      	b.n	8009858 <_vfiprintf_r+0x78>
 8009982:	fb0c 3202 	mla	r2, ip, r2, r3
 8009986:	460c      	mov	r4, r1
 8009988:	2001      	movs	r0, #1
 800998a:	e7a8      	b.n	80098de <_vfiprintf_r+0xfe>
 800998c:	2300      	movs	r3, #0
 800998e:	3401      	adds	r4, #1
 8009990:	9305      	str	r3, [sp, #20]
 8009992:	4619      	mov	r1, r3
 8009994:	f04f 0c0a 	mov.w	ip, #10
 8009998:	4620      	mov	r0, r4
 800999a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800999e:	3a30      	subs	r2, #48	@ 0x30
 80099a0:	2a09      	cmp	r2, #9
 80099a2:	d903      	bls.n	80099ac <_vfiprintf_r+0x1cc>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d0c6      	beq.n	8009936 <_vfiprintf_r+0x156>
 80099a8:	9105      	str	r1, [sp, #20]
 80099aa:	e7c4      	b.n	8009936 <_vfiprintf_r+0x156>
 80099ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80099b0:	4604      	mov	r4, r0
 80099b2:	2301      	movs	r3, #1
 80099b4:	e7f0      	b.n	8009998 <_vfiprintf_r+0x1b8>
 80099b6:	ab03      	add	r3, sp, #12
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	462a      	mov	r2, r5
 80099bc:	4b12      	ldr	r3, [pc, #72]	@ (8009a08 <_vfiprintf_r+0x228>)
 80099be:	a904      	add	r1, sp, #16
 80099c0:	4630      	mov	r0, r6
 80099c2:	f3af 8000 	nop.w
 80099c6:	4607      	mov	r7, r0
 80099c8:	1c78      	adds	r0, r7, #1
 80099ca:	d1d6      	bne.n	800997a <_vfiprintf_r+0x19a>
 80099cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099ce:	07d9      	lsls	r1, r3, #31
 80099d0:	d405      	bmi.n	80099de <_vfiprintf_r+0x1fe>
 80099d2:	89ab      	ldrh	r3, [r5, #12]
 80099d4:	059a      	lsls	r2, r3, #22
 80099d6:	d402      	bmi.n	80099de <_vfiprintf_r+0x1fe>
 80099d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099da:	f7ff fe8b 	bl	80096f4 <__retarget_lock_release_recursive>
 80099de:	89ab      	ldrh	r3, [r5, #12]
 80099e0:	065b      	lsls	r3, r3, #25
 80099e2:	f53f af1f 	bmi.w	8009824 <_vfiprintf_r+0x44>
 80099e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099e8:	e71e      	b.n	8009828 <_vfiprintf_r+0x48>
 80099ea:	ab03      	add	r3, sp, #12
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	462a      	mov	r2, r5
 80099f0:	4b05      	ldr	r3, [pc, #20]	@ (8009a08 <_vfiprintf_r+0x228>)
 80099f2:	a904      	add	r1, sp, #16
 80099f4:	4630      	mov	r0, r6
 80099f6:	f000 f879 	bl	8009aec <_printf_i>
 80099fa:	e7e4      	b.n	80099c6 <_vfiprintf_r+0x1e6>
 80099fc:	0800a584 	.word	0x0800a584
 8009a00:	0800a58e 	.word	0x0800a58e
 8009a04:	00000000 	.word	0x00000000
 8009a08:	080097bb 	.word	0x080097bb
 8009a0c:	0800a58a 	.word	0x0800a58a

08009a10 <_printf_common>:
 8009a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a14:	4616      	mov	r6, r2
 8009a16:	4698      	mov	r8, r3
 8009a18:	688a      	ldr	r2, [r1, #8]
 8009a1a:	690b      	ldr	r3, [r1, #16]
 8009a1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a20:	4293      	cmp	r3, r2
 8009a22:	bfb8      	it	lt
 8009a24:	4613      	movlt	r3, r2
 8009a26:	6033      	str	r3, [r6, #0]
 8009a28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	b10a      	cbz	r2, 8009a36 <_printf_common+0x26>
 8009a32:	3301      	adds	r3, #1
 8009a34:	6033      	str	r3, [r6, #0]
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	0699      	lsls	r1, r3, #26
 8009a3a:	bf42      	ittt	mi
 8009a3c:	6833      	ldrmi	r3, [r6, #0]
 8009a3e:	3302      	addmi	r3, #2
 8009a40:	6033      	strmi	r3, [r6, #0]
 8009a42:	6825      	ldr	r5, [r4, #0]
 8009a44:	f015 0506 	ands.w	r5, r5, #6
 8009a48:	d106      	bne.n	8009a58 <_printf_common+0x48>
 8009a4a:	f104 0a19 	add.w	sl, r4, #25
 8009a4e:	68e3      	ldr	r3, [r4, #12]
 8009a50:	6832      	ldr	r2, [r6, #0]
 8009a52:	1a9b      	subs	r3, r3, r2
 8009a54:	42ab      	cmp	r3, r5
 8009a56:	dc26      	bgt.n	8009aa6 <_printf_common+0x96>
 8009a58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a5c:	6822      	ldr	r2, [r4, #0]
 8009a5e:	3b00      	subs	r3, #0
 8009a60:	bf18      	it	ne
 8009a62:	2301      	movne	r3, #1
 8009a64:	0692      	lsls	r2, r2, #26
 8009a66:	d42b      	bmi.n	8009ac0 <_printf_common+0xb0>
 8009a68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a6c:	4641      	mov	r1, r8
 8009a6e:	4638      	mov	r0, r7
 8009a70:	47c8      	blx	r9
 8009a72:	3001      	adds	r0, #1
 8009a74:	d01e      	beq.n	8009ab4 <_printf_common+0xa4>
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	6922      	ldr	r2, [r4, #16]
 8009a7a:	f003 0306 	and.w	r3, r3, #6
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	bf02      	ittt	eq
 8009a82:	68e5      	ldreq	r5, [r4, #12]
 8009a84:	6833      	ldreq	r3, [r6, #0]
 8009a86:	1aed      	subeq	r5, r5, r3
 8009a88:	68a3      	ldr	r3, [r4, #8]
 8009a8a:	bf0c      	ite	eq
 8009a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a90:	2500      	movne	r5, #0
 8009a92:	4293      	cmp	r3, r2
 8009a94:	bfc4      	itt	gt
 8009a96:	1a9b      	subgt	r3, r3, r2
 8009a98:	18ed      	addgt	r5, r5, r3
 8009a9a:	2600      	movs	r6, #0
 8009a9c:	341a      	adds	r4, #26
 8009a9e:	42b5      	cmp	r5, r6
 8009aa0:	d11a      	bne.n	8009ad8 <_printf_common+0xc8>
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	e008      	b.n	8009ab8 <_printf_common+0xa8>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	4652      	mov	r2, sl
 8009aaa:	4641      	mov	r1, r8
 8009aac:	4638      	mov	r0, r7
 8009aae:	47c8      	blx	r9
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d103      	bne.n	8009abc <_printf_common+0xac>
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009abc:	3501      	adds	r5, #1
 8009abe:	e7c6      	b.n	8009a4e <_printf_common+0x3e>
 8009ac0:	18e1      	adds	r1, r4, r3
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	2030      	movs	r0, #48	@ 0x30
 8009ac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009aca:	4422      	add	r2, r4
 8009acc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ad0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	e7c7      	b.n	8009a68 <_printf_common+0x58>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4622      	mov	r2, r4
 8009adc:	4641      	mov	r1, r8
 8009ade:	4638      	mov	r0, r7
 8009ae0:	47c8      	blx	r9
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d0e6      	beq.n	8009ab4 <_printf_common+0xa4>
 8009ae6:	3601      	adds	r6, #1
 8009ae8:	e7d9      	b.n	8009a9e <_printf_common+0x8e>
	...

08009aec <_printf_i>:
 8009aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	7e0f      	ldrb	r7, [r1, #24]
 8009af2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009af4:	2f78      	cmp	r7, #120	@ 0x78
 8009af6:	4691      	mov	r9, r2
 8009af8:	4680      	mov	r8, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	469a      	mov	sl, r3
 8009afe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b02:	d807      	bhi.n	8009b14 <_printf_i+0x28>
 8009b04:	2f62      	cmp	r7, #98	@ 0x62
 8009b06:	d80a      	bhi.n	8009b1e <_printf_i+0x32>
 8009b08:	2f00      	cmp	r7, #0
 8009b0a:	f000 80d2 	beq.w	8009cb2 <_printf_i+0x1c6>
 8009b0e:	2f58      	cmp	r7, #88	@ 0x58
 8009b10:	f000 80b9 	beq.w	8009c86 <_printf_i+0x19a>
 8009b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b1c:	e03a      	b.n	8009b94 <_printf_i+0xa8>
 8009b1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b22:	2b15      	cmp	r3, #21
 8009b24:	d8f6      	bhi.n	8009b14 <_printf_i+0x28>
 8009b26:	a101      	add	r1, pc, #4	@ (adr r1, 8009b2c <_printf_i+0x40>)
 8009b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b2c:	08009b85 	.word	0x08009b85
 8009b30:	08009b99 	.word	0x08009b99
 8009b34:	08009b15 	.word	0x08009b15
 8009b38:	08009b15 	.word	0x08009b15
 8009b3c:	08009b15 	.word	0x08009b15
 8009b40:	08009b15 	.word	0x08009b15
 8009b44:	08009b99 	.word	0x08009b99
 8009b48:	08009b15 	.word	0x08009b15
 8009b4c:	08009b15 	.word	0x08009b15
 8009b50:	08009b15 	.word	0x08009b15
 8009b54:	08009b15 	.word	0x08009b15
 8009b58:	08009c99 	.word	0x08009c99
 8009b5c:	08009bc3 	.word	0x08009bc3
 8009b60:	08009c53 	.word	0x08009c53
 8009b64:	08009b15 	.word	0x08009b15
 8009b68:	08009b15 	.word	0x08009b15
 8009b6c:	08009cbb 	.word	0x08009cbb
 8009b70:	08009b15 	.word	0x08009b15
 8009b74:	08009bc3 	.word	0x08009bc3
 8009b78:	08009b15 	.word	0x08009b15
 8009b7c:	08009b15 	.word	0x08009b15
 8009b80:	08009c5b 	.word	0x08009c5b
 8009b84:	6833      	ldr	r3, [r6, #0]
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6032      	str	r2, [r6, #0]
 8009b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b94:	2301      	movs	r3, #1
 8009b96:	e09d      	b.n	8009cd4 <_printf_i+0x1e8>
 8009b98:	6833      	ldr	r3, [r6, #0]
 8009b9a:	6820      	ldr	r0, [r4, #0]
 8009b9c:	1d19      	adds	r1, r3, #4
 8009b9e:	6031      	str	r1, [r6, #0]
 8009ba0:	0606      	lsls	r6, r0, #24
 8009ba2:	d501      	bpl.n	8009ba8 <_printf_i+0xbc>
 8009ba4:	681d      	ldr	r5, [r3, #0]
 8009ba6:	e003      	b.n	8009bb0 <_printf_i+0xc4>
 8009ba8:	0645      	lsls	r5, r0, #25
 8009baa:	d5fb      	bpl.n	8009ba4 <_printf_i+0xb8>
 8009bac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009bb0:	2d00      	cmp	r5, #0
 8009bb2:	da03      	bge.n	8009bbc <_printf_i+0xd0>
 8009bb4:	232d      	movs	r3, #45	@ 0x2d
 8009bb6:	426d      	negs	r5, r5
 8009bb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bbc:	4859      	ldr	r0, [pc, #356]	@ (8009d24 <_printf_i+0x238>)
 8009bbe:	230a      	movs	r3, #10
 8009bc0:	e011      	b.n	8009be6 <_printf_i+0xfa>
 8009bc2:	6821      	ldr	r1, [r4, #0]
 8009bc4:	6833      	ldr	r3, [r6, #0]
 8009bc6:	0608      	lsls	r0, r1, #24
 8009bc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bcc:	d402      	bmi.n	8009bd4 <_printf_i+0xe8>
 8009bce:	0649      	lsls	r1, r1, #25
 8009bd0:	bf48      	it	mi
 8009bd2:	b2ad      	uxthmi	r5, r5
 8009bd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bd6:	4853      	ldr	r0, [pc, #332]	@ (8009d24 <_printf_i+0x238>)
 8009bd8:	6033      	str	r3, [r6, #0]
 8009bda:	bf14      	ite	ne
 8009bdc:	230a      	movne	r3, #10
 8009bde:	2308      	moveq	r3, #8
 8009be0:	2100      	movs	r1, #0
 8009be2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009be6:	6866      	ldr	r6, [r4, #4]
 8009be8:	60a6      	str	r6, [r4, #8]
 8009bea:	2e00      	cmp	r6, #0
 8009bec:	bfa2      	ittt	ge
 8009bee:	6821      	ldrge	r1, [r4, #0]
 8009bf0:	f021 0104 	bicge.w	r1, r1, #4
 8009bf4:	6021      	strge	r1, [r4, #0]
 8009bf6:	b90d      	cbnz	r5, 8009bfc <_printf_i+0x110>
 8009bf8:	2e00      	cmp	r6, #0
 8009bfa:	d04b      	beq.n	8009c94 <_printf_i+0x1a8>
 8009bfc:	4616      	mov	r6, r2
 8009bfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c02:	fb03 5711 	mls	r7, r3, r1, r5
 8009c06:	5dc7      	ldrb	r7, [r0, r7]
 8009c08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c0c:	462f      	mov	r7, r5
 8009c0e:	42bb      	cmp	r3, r7
 8009c10:	460d      	mov	r5, r1
 8009c12:	d9f4      	bls.n	8009bfe <_printf_i+0x112>
 8009c14:	2b08      	cmp	r3, #8
 8009c16:	d10b      	bne.n	8009c30 <_printf_i+0x144>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	07df      	lsls	r7, r3, #31
 8009c1c:	d508      	bpl.n	8009c30 <_printf_i+0x144>
 8009c1e:	6923      	ldr	r3, [r4, #16]
 8009c20:	6861      	ldr	r1, [r4, #4]
 8009c22:	4299      	cmp	r1, r3
 8009c24:	bfde      	ittt	le
 8009c26:	2330      	movle	r3, #48	@ 0x30
 8009c28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c2c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009c30:	1b92      	subs	r2, r2, r6
 8009c32:	6122      	str	r2, [r4, #16]
 8009c34:	f8cd a000 	str.w	sl, [sp]
 8009c38:	464b      	mov	r3, r9
 8009c3a:	aa03      	add	r2, sp, #12
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4640      	mov	r0, r8
 8009c40:	f7ff fee6 	bl	8009a10 <_printf_common>
 8009c44:	3001      	adds	r0, #1
 8009c46:	d14a      	bne.n	8009cde <_printf_i+0x1f2>
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c4c:	b004      	add	sp, #16
 8009c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	f043 0320 	orr.w	r3, r3, #32
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	4833      	ldr	r0, [pc, #204]	@ (8009d28 <_printf_i+0x23c>)
 8009c5c:	2778      	movs	r7, #120	@ 0x78
 8009c5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	6831      	ldr	r1, [r6, #0]
 8009c66:	061f      	lsls	r7, r3, #24
 8009c68:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c6c:	d402      	bmi.n	8009c74 <_printf_i+0x188>
 8009c6e:	065f      	lsls	r7, r3, #25
 8009c70:	bf48      	it	mi
 8009c72:	b2ad      	uxthmi	r5, r5
 8009c74:	6031      	str	r1, [r6, #0]
 8009c76:	07d9      	lsls	r1, r3, #31
 8009c78:	bf44      	itt	mi
 8009c7a:	f043 0320 	orrmi.w	r3, r3, #32
 8009c7e:	6023      	strmi	r3, [r4, #0]
 8009c80:	b11d      	cbz	r5, 8009c8a <_printf_i+0x19e>
 8009c82:	2310      	movs	r3, #16
 8009c84:	e7ac      	b.n	8009be0 <_printf_i+0xf4>
 8009c86:	4827      	ldr	r0, [pc, #156]	@ (8009d24 <_printf_i+0x238>)
 8009c88:	e7e9      	b.n	8009c5e <_printf_i+0x172>
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	f023 0320 	bic.w	r3, r3, #32
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	e7f6      	b.n	8009c82 <_printf_i+0x196>
 8009c94:	4616      	mov	r6, r2
 8009c96:	e7bd      	b.n	8009c14 <_printf_i+0x128>
 8009c98:	6833      	ldr	r3, [r6, #0]
 8009c9a:	6825      	ldr	r5, [r4, #0]
 8009c9c:	6961      	ldr	r1, [r4, #20]
 8009c9e:	1d18      	adds	r0, r3, #4
 8009ca0:	6030      	str	r0, [r6, #0]
 8009ca2:	062e      	lsls	r6, r5, #24
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	d501      	bpl.n	8009cac <_printf_i+0x1c0>
 8009ca8:	6019      	str	r1, [r3, #0]
 8009caa:	e002      	b.n	8009cb2 <_printf_i+0x1c6>
 8009cac:	0668      	lsls	r0, r5, #25
 8009cae:	d5fb      	bpl.n	8009ca8 <_printf_i+0x1bc>
 8009cb0:	8019      	strh	r1, [r3, #0]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6123      	str	r3, [r4, #16]
 8009cb6:	4616      	mov	r6, r2
 8009cb8:	e7bc      	b.n	8009c34 <_printf_i+0x148>
 8009cba:	6833      	ldr	r3, [r6, #0]
 8009cbc:	1d1a      	adds	r2, r3, #4
 8009cbe:	6032      	str	r2, [r6, #0]
 8009cc0:	681e      	ldr	r6, [r3, #0]
 8009cc2:	6862      	ldr	r2, [r4, #4]
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f7f6 faa2 	bl	8000210 <memchr>
 8009ccc:	b108      	cbz	r0, 8009cd2 <_printf_i+0x1e6>
 8009cce:	1b80      	subs	r0, r0, r6
 8009cd0:	6060      	str	r0, [r4, #4]
 8009cd2:	6863      	ldr	r3, [r4, #4]
 8009cd4:	6123      	str	r3, [r4, #16]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cdc:	e7aa      	b.n	8009c34 <_printf_i+0x148>
 8009cde:	6923      	ldr	r3, [r4, #16]
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	47d0      	blx	sl
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d0ad      	beq.n	8009c48 <_printf_i+0x15c>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	079b      	lsls	r3, r3, #30
 8009cf0:	d413      	bmi.n	8009d1a <_printf_i+0x22e>
 8009cf2:	68e0      	ldr	r0, [r4, #12]
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	4298      	cmp	r0, r3
 8009cf8:	bfb8      	it	lt
 8009cfa:	4618      	movlt	r0, r3
 8009cfc:	e7a6      	b.n	8009c4c <_printf_i+0x160>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4632      	mov	r2, r6
 8009d02:	4649      	mov	r1, r9
 8009d04:	4640      	mov	r0, r8
 8009d06:	47d0      	blx	sl
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d09d      	beq.n	8009c48 <_printf_i+0x15c>
 8009d0c:	3501      	adds	r5, #1
 8009d0e:	68e3      	ldr	r3, [r4, #12]
 8009d10:	9903      	ldr	r1, [sp, #12]
 8009d12:	1a5b      	subs	r3, r3, r1
 8009d14:	42ab      	cmp	r3, r5
 8009d16:	dcf2      	bgt.n	8009cfe <_printf_i+0x212>
 8009d18:	e7eb      	b.n	8009cf2 <_printf_i+0x206>
 8009d1a:	2500      	movs	r5, #0
 8009d1c:	f104 0619 	add.w	r6, r4, #25
 8009d20:	e7f5      	b.n	8009d0e <_printf_i+0x222>
 8009d22:	bf00      	nop
 8009d24:	0800a595 	.word	0x0800a595
 8009d28:	0800a5a6 	.word	0x0800a5a6

08009d2c <__sflush_r>:
 8009d2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d34:	0716      	lsls	r6, r2, #28
 8009d36:	4605      	mov	r5, r0
 8009d38:	460c      	mov	r4, r1
 8009d3a:	d454      	bmi.n	8009de6 <__sflush_r+0xba>
 8009d3c:	684b      	ldr	r3, [r1, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	dc02      	bgt.n	8009d48 <__sflush_r+0x1c>
 8009d42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	dd48      	ble.n	8009dda <__sflush_r+0xae>
 8009d48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d4a:	2e00      	cmp	r6, #0
 8009d4c:	d045      	beq.n	8009dda <__sflush_r+0xae>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d54:	682f      	ldr	r7, [r5, #0]
 8009d56:	6a21      	ldr	r1, [r4, #32]
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	d030      	beq.n	8009dbe <__sflush_r+0x92>
 8009d5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	0759      	lsls	r1, r3, #29
 8009d62:	d505      	bpl.n	8009d70 <__sflush_r+0x44>
 8009d64:	6863      	ldr	r3, [r4, #4]
 8009d66:	1ad2      	subs	r2, r2, r3
 8009d68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d6a:	b10b      	cbz	r3, 8009d70 <__sflush_r+0x44>
 8009d6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	2300      	movs	r3, #0
 8009d72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d74:	6a21      	ldr	r1, [r4, #32]
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b0      	blx	r6
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	d106      	bne.n	8009d8e <__sflush_r+0x62>
 8009d80:	6829      	ldr	r1, [r5, #0]
 8009d82:	291d      	cmp	r1, #29
 8009d84:	d82b      	bhi.n	8009dde <__sflush_r+0xb2>
 8009d86:	4a2a      	ldr	r2, [pc, #168]	@ (8009e30 <__sflush_r+0x104>)
 8009d88:	410a      	asrs	r2, r1
 8009d8a:	07d6      	lsls	r6, r2, #31
 8009d8c:	d427      	bmi.n	8009dde <__sflush_r+0xb2>
 8009d8e:	2200      	movs	r2, #0
 8009d90:	6062      	str	r2, [r4, #4]
 8009d92:	04d9      	lsls	r1, r3, #19
 8009d94:	6922      	ldr	r2, [r4, #16]
 8009d96:	6022      	str	r2, [r4, #0]
 8009d98:	d504      	bpl.n	8009da4 <__sflush_r+0x78>
 8009d9a:	1c42      	adds	r2, r0, #1
 8009d9c:	d101      	bne.n	8009da2 <__sflush_r+0x76>
 8009d9e:	682b      	ldr	r3, [r5, #0]
 8009da0:	b903      	cbnz	r3, 8009da4 <__sflush_r+0x78>
 8009da2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009da4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009da6:	602f      	str	r7, [r5, #0]
 8009da8:	b1b9      	cbz	r1, 8009dda <__sflush_r+0xae>
 8009daa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dae:	4299      	cmp	r1, r3
 8009db0:	d002      	beq.n	8009db8 <__sflush_r+0x8c>
 8009db2:	4628      	mov	r0, r5
 8009db4:	f7ff fca0 	bl	80096f8 <_free_r>
 8009db8:	2300      	movs	r3, #0
 8009dba:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dbc:	e00d      	b.n	8009dda <__sflush_r+0xae>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b0      	blx	r6
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	1c50      	adds	r0, r2, #1
 8009dc8:	d1c9      	bne.n	8009d5e <__sflush_r+0x32>
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d0c6      	beq.n	8009d5e <__sflush_r+0x32>
 8009dd0:	2b1d      	cmp	r3, #29
 8009dd2:	d001      	beq.n	8009dd8 <__sflush_r+0xac>
 8009dd4:	2b16      	cmp	r3, #22
 8009dd6:	d11e      	bne.n	8009e16 <__sflush_r+0xea>
 8009dd8:	602f      	str	r7, [r5, #0]
 8009dda:	2000      	movs	r0, #0
 8009ddc:	e022      	b.n	8009e24 <__sflush_r+0xf8>
 8009dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009de2:	b21b      	sxth	r3, r3
 8009de4:	e01b      	b.n	8009e1e <__sflush_r+0xf2>
 8009de6:	690f      	ldr	r7, [r1, #16]
 8009de8:	2f00      	cmp	r7, #0
 8009dea:	d0f6      	beq.n	8009dda <__sflush_r+0xae>
 8009dec:	0793      	lsls	r3, r2, #30
 8009dee:	680e      	ldr	r6, [r1, #0]
 8009df0:	bf08      	it	eq
 8009df2:	694b      	ldreq	r3, [r1, #20]
 8009df4:	600f      	str	r7, [r1, #0]
 8009df6:	bf18      	it	ne
 8009df8:	2300      	movne	r3, #0
 8009dfa:	eba6 0807 	sub.w	r8, r6, r7
 8009dfe:	608b      	str	r3, [r1, #8]
 8009e00:	f1b8 0f00 	cmp.w	r8, #0
 8009e04:	dde9      	ble.n	8009dda <__sflush_r+0xae>
 8009e06:	6a21      	ldr	r1, [r4, #32]
 8009e08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e0a:	4643      	mov	r3, r8
 8009e0c:	463a      	mov	r2, r7
 8009e0e:	4628      	mov	r0, r5
 8009e10:	47b0      	blx	r6
 8009e12:	2800      	cmp	r0, #0
 8009e14:	dc08      	bgt.n	8009e28 <__sflush_r+0xfc>
 8009e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e1e:	81a3      	strh	r3, [r4, #12]
 8009e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e28:	4407      	add	r7, r0
 8009e2a:	eba8 0800 	sub.w	r8, r8, r0
 8009e2e:	e7e7      	b.n	8009e00 <__sflush_r+0xd4>
 8009e30:	dfbffffe 	.word	0xdfbffffe

08009e34 <_fflush_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	690b      	ldr	r3, [r1, #16]
 8009e38:	4605      	mov	r5, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	b913      	cbnz	r3, 8009e44 <_fflush_r+0x10>
 8009e3e:	2500      	movs	r5, #0
 8009e40:	4628      	mov	r0, r5
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	b118      	cbz	r0, 8009e4e <_fflush_r+0x1a>
 8009e46:	6a03      	ldr	r3, [r0, #32]
 8009e48:	b90b      	cbnz	r3, 8009e4e <_fflush_r+0x1a>
 8009e4a:	f7ff fa4b 	bl	80092e4 <__sinit>
 8009e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0f3      	beq.n	8009e3e <_fflush_r+0xa>
 8009e56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e58:	07d0      	lsls	r0, r2, #31
 8009e5a:	d404      	bmi.n	8009e66 <_fflush_r+0x32>
 8009e5c:	0599      	lsls	r1, r3, #22
 8009e5e:	d402      	bmi.n	8009e66 <_fflush_r+0x32>
 8009e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e62:	f7ff fc46 	bl	80096f2 <__retarget_lock_acquire_recursive>
 8009e66:	4628      	mov	r0, r5
 8009e68:	4621      	mov	r1, r4
 8009e6a:	f7ff ff5f 	bl	8009d2c <__sflush_r>
 8009e6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e70:	07da      	lsls	r2, r3, #31
 8009e72:	4605      	mov	r5, r0
 8009e74:	d4e4      	bmi.n	8009e40 <_fflush_r+0xc>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	059b      	lsls	r3, r3, #22
 8009e7a:	d4e1      	bmi.n	8009e40 <_fflush_r+0xc>
 8009e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e7e:	f7ff fc39 	bl	80096f4 <__retarget_lock_release_recursive>
 8009e82:	e7dd      	b.n	8009e40 <_fflush_r+0xc>

08009e84 <__swhatbuf_r>:
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	460c      	mov	r4, r1
 8009e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8c:	2900      	cmp	r1, #0
 8009e8e:	b096      	sub	sp, #88	@ 0x58
 8009e90:	4615      	mov	r5, r2
 8009e92:	461e      	mov	r6, r3
 8009e94:	da0d      	bge.n	8009eb2 <__swhatbuf_r+0x2e>
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e9c:	f04f 0100 	mov.w	r1, #0
 8009ea0:	bf14      	ite	ne
 8009ea2:	2340      	movne	r3, #64	@ 0x40
 8009ea4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	6031      	str	r1, [r6, #0]
 8009eac:	602b      	str	r3, [r5, #0]
 8009eae:	b016      	add	sp, #88	@ 0x58
 8009eb0:	bd70      	pop	{r4, r5, r6, pc}
 8009eb2:	466a      	mov	r2, sp
 8009eb4:	f000 f848 	bl	8009f48 <_fstat_r>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	dbec      	blt.n	8009e96 <__swhatbuf_r+0x12>
 8009ebc:	9901      	ldr	r1, [sp, #4]
 8009ebe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ec2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ec6:	4259      	negs	r1, r3
 8009ec8:	4159      	adcs	r1, r3
 8009eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ece:	e7eb      	b.n	8009ea8 <__swhatbuf_r+0x24>

08009ed0 <__smakebuf_r>:
 8009ed0:	898b      	ldrh	r3, [r1, #12]
 8009ed2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ed4:	079d      	lsls	r5, r3, #30
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	460c      	mov	r4, r1
 8009eda:	d507      	bpl.n	8009eec <__smakebuf_r+0x1c>
 8009edc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	6123      	str	r3, [r4, #16]
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	6163      	str	r3, [r4, #20]
 8009ee8:	b003      	add	sp, #12
 8009eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eec:	ab01      	add	r3, sp, #4
 8009eee:	466a      	mov	r2, sp
 8009ef0:	f7ff ffc8 	bl	8009e84 <__swhatbuf_r>
 8009ef4:	9f00      	ldr	r7, [sp, #0]
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	4639      	mov	r1, r7
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7ff f8da 	bl	80090b4 <_malloc_r>
 8009f00:	b948      	cbnz	r0, 8009f16 <__smakebuf_r+0x46>
 8009f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f06:	059a      	lsls	r2, r3, #22
 8009f08:	d4ee      	bmi.n	8009ee8 <__smakebuf_r+0x18>
 8009f0a:	f023 0303 	bic.w	r3, r3, #3
 8009f0e:	f043 0302 	orr.w	r3, r3, #2
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	e7e2      	b.n	8009edc <__smakebuf_r+0xc>
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	6020      	str	r0, [r4, #0]
 8009f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	9b01      	ldr	r3, [sp, #4]
 8009f22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f26:	b15b      	cbz	r3, 8009f40 <__smakebuf_r+0x70>
 8009f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f000 f81d 	bl	8009f6c <_isatty_r>
 8009f32:	b128      	cbz	r0, 8009f40 <__smakebuf_r+0x70>
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	f023 0303 	bic.w	r3, r3, #3
 8009f3a:	f043 0301 	orr.w	r3, r3, #1
 8009f3e:	81a3      	strh	r3, [r4, #12]
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	431d      	orrs	r5, r3
 8009f44:	81a5      	strh	r5, [r4, #12]
 8009f46:	e7cf      	b.n	8009ee8 <__smakebuf_r+0x18>

08009f48 <_fstat_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	@ (8009f68 <_fstat_r+0x20>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	4611      	mov	r1, r2
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	f7f7 f9ce 	bl	80012f6 <_fstat>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	d102      	bne.n	8009f64 <_fstat_r+0x1c>
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	b103      	cbz	r3, 8009f64 <_fstat_r+0x1c>
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	bd38      	pop	{r3, r4, r5, pc}
 8009f66:	bf00      	nop
 8009f68:	200034b4 	.word	0x200034b4

08009f6c <_isatty_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d06      	ldr	r5, [pc, #24]	@ (8009f88 <_isatty_r+0x1c>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	f7f7 f9cd 	bl	8001316 <_isatty>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_isatty_r+0x1a>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_isatty_r+0x1a>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	200034b4 	.word	0x200034b4

08009f8c <_init>:
 8009f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8e:	bf00      	nop
 8009f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f92:	bc08      	pop	{r3}
 8009f94:	469e      	mov	lr, r3
 8009f96:	4770      	bx	lr

08009f98 <_fini>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	bf00      	nop
 8009f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9e:	bc08      	pop	{r3}
 8009fa0:	469e      	mov	lr, r3
 8009fa2:	4770      	bx	lr
