
sph0645.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08009584  08009584  0000a584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d4  080097d4  0000b0a4  2**0
                  CONTENTS
  4 .ARM          00000008  080097d4  080097d4  0000a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097dc  080097dc  0000b0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097dc  080097dc  0000a7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097e0  080097e0  0000a7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  080097e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001518  200000a4  08009888  0000b0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  08009888  0000b5bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0d7  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcd  00000000  00000000  0001a1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9e  00000000  00000000  0001ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ead  00000000  00000000  0001e84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001303f  00000000  00000000  000436fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0525  00000000  00000000  0005673a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126c5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000404c  00000000  00000000  00126ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0012acf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800956c 	.word	0x0800956c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	0800956c 	.word	0x0800956c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d013      	beq.n	80005e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	e000      	b.n	80005cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fe2c 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f886 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f960 	bl	80008c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000600:	f000 f93e 	bl	8000880 <MX_DMA_Init>
  MX_I2S2_Init();
 8000604:	f000 f8ec 	bl	80007e0 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8000608:	f000 f918 	bl	800083c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800060c:	f005 fb02 	bl	8005c14 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_DMAStop(&hi2s2);
 8000610:	4834      	ldr	r0, [pc, #208]	@ (80006e4 <main+0xf4>)
 8000612:	f001 ff19 	bl	8002448 <HAL_I2S_DMAStop>
  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
 8000616:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800061a:	4933      	ldr	r1, [pc, #204]	@ (80006e8 <main+0xf8>)
 800061c:	4831      	ldr	r0, [pc, #196]	@ (80006e4 <main+0xf4>)
 800061e:	f001 fe5b 	bl	80022d8 <HAL_I2S_Receive_DMA>
  HAL_Delay(500);
 8000622:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000626:	f000 fe85 	bl	8001334 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //printf("Hello World\n");
	  //HAL_Delay(1000);
	  if (button_flag)
 800062a:	4b30      	ldr	r3, [pc, #192]	@ (80006ec <main+0xfc>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d031      	beq.n	8000698 <main+0xa8>
	  {
		  if (start_stop_recording)
 8000634:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <main+0x100>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d011      	beq.n	8000662 <main+0x72>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 800063e:	4829      	ldr	r0, [pc, #164]	@ (80006e4 <main+0xf4>)
 8000640:	f001 ff02 	bl	8002448 <HAL_I2S_DMAStop>
			  start_stop_recording = 0;
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <main+0x100>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
			  stop_recording();
 800064a:	f000 fafd 	bl	8000c48 <stop_recording>
			  half_i2s = 0;
 800064e:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <main+0x104>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
			  full_i2s = 0;
 8000654:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <main+0x108>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
			  printf("stop recording \n");
 800065a:	4828      	ldr	r0, [pc, #160]	@ (80006fc <main+0x10c>)
 800065c:	f008 f922 	bl	80088a4 <puts>
 8000660:	e017      	b.n	8000692 <main+0xa2>
		  }
		  else
		  {
			  start_stop_recording = 1;
 8000662:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <main+0x100>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
			  start_recording(I2S_AUDIOFREQ_32K);
 8000668:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 800066c:	f000 f9ec 	bl	8000a48 <start_recording>
			  printf("start_recording %d and %d\n", half_i2s, full_i2s);
 8000670:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <main+0x104>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4619      	mov	r1, r3
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <main+0x108>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	481f      	ldr	r0, [pc, #124]	@ (8000700 <main+0x110>)
 8000682:	f008 f8a7 	bl	80087d4 <iprintf>
			  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
 8000686:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068a:	4917      	ldr	r1, [pc, #92]	@ (80006e8 <main+0xf8>)
 800068c:	4815      	ldr	r0, [pc, #84]	@ (80006e4 <main+0xf4>)
 800068e:	f001 fe23 	bl	80022d8 <HAL_I2S_Receive_DMA>
		  }
		  button_flag = 0;
 8000692:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <main+0xfc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(start_stop_recording == 1 && half_i2s == 1)
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <main+0x100>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10c      	bne.n	80006bc <main+0xcc>
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <main+0x104>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d107      	bne.n	80006bc <main+0xcc>
	  {
		  write2wave_file(((uint8_t*)data_i2s),	 WAV_WRITE_SAMPLE_COUNT);
 80006ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006b0:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <main+0xf8>)
 80006b2:	f000 fa79 	bl	8000ba8 <write2wave_file>
		  half_i2s = 0;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <main+0x104>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
	  }
	  if(start_stop_recording == 1 && full_i2s == 1)
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <main+0x100>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d1b1      	bne.n	800062a <main+0x3a>
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <main+0x108>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d1ac      	bne.n	800062a <main+0x3a>
	  {
		  write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <main+0x114>)
 80006d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fa66 	bl	8000ba8 <write2wave_file>
		  full_i2s = 0;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <main+0x108>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
	  if (button_flag)
 80006e2:	e7a2      	b.n	800062a <main+0x3a>
 80006e4:	200000c0 	.word	0x200000c0
 80006e8:	200001ec 	.word	0x200001ec
 80006ec:	200011ec 	.word	0x200011ec
 80006f0:	200011ed 	.word	0x200011ed
 80006f4:	200011ee 	.word	0x200011ee
 80006f8:	200011ef 	.word	0x200011ef
 80006fc:	08009584 	.word	0x08009584
 8000700:	08009594 	.word	0x08009594
 8000704:	200009ec 	.word	0x200009ec

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2234      	movs	r2, #52	@ 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f008 f9a4 	bl	8008a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b29      	ldr	r3, [pc, #164]	@ (80007d8 <SystemClock_Config+0xd0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a28      	ldr	r2, [pc, #160]	@ (80007d8 <SystemClock_Config+0xd0>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <SystemClock_Config+0xd0>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <SystemClock_Config+0xd4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000754:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <SystemClock_Config+0xd4>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <SystemClock_Config+0xd4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800077c:	2308      	movs	r3, #8
 800077e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000780:	2348      	movs	r3, #72	@ 0x48
 8000782:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000788:	2303      	movs	r3, #3
 800078a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4618      	mov	r0, r3
 8000796:	f003 f8a1 	bl	80038dc <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007a0:	f000 f94c 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	2102      	movs	r1, #2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 f887 	bl	80028d4 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007cc:	f000 f936 	bl	8000a3c <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3750      	adds	r7, #80	@ 0x50
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_I2S2_Init+0x54>)
 80007e6:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <MX_I2S2_Init+0x58>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_I2S2_Init+0x54>)
 80007ec:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007f0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <MX_I2S2_Init+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_I2S2_Init+0x54>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <MX_I2S2_Init+0x54>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000804:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_I2S2_Init+0x54>)
 8000806:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800080a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_I2S2_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_I2S2_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_I2S2_Init+0x54>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_I2S2_Init+0x54>)
 8000820:	f001 fc62 	bl	80020e8 <HAL_I2S_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800082a:	f000 f907 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000c0 	.word	0x200000c0
 8000838:	40003800 	.word	0x40003800

0800083c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <MX_SDIO_SD_Init+0x3c>)
 8000842:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <MX_SDIO_SD_Init+0x40>)
 8000844:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_SDIO_SD_Init+0x3c>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <MX_SDIO_SD_Init+0x3c>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_SDIO_SD_Init+0x3c>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <MX_SDIO_SD_Init+0x3c>)
 800085a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800085e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <MX_SDIO_SD_Init+0x3c>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8000866:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <MX_SDIO_SD_Init+0x3c>)
 8000868:	2208      	movs	r2, #8
 800086a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000168 	.word	0x20000168
 800087c:	40012c00 	.word	0x40012c00

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_DMA_Init+0x3c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a0b      	ldr	r2, [pc, #44]	@ (80008bc <MX_DMA_Init+0x3c>)
 8000890:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_DMA_Init+0x3c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	200e      	movs	r0, #14
 80008a8:	f000 fe43 	bl	8001532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008ac:	200e      	movs	r0, #14
 80008ae:	f000 fe5c 	bl	800156a <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b2e      	ldr	r3, [pc, #184]	@ (8000994 <MX_GPIO_Init+0xd4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2d      	ldr	r2, [pc, #180]	@ (8000994 <MX_GPIO_Init+0xd4>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000994 <MX_GPIO_Init+0xd4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b27      	ldr	r3, [pc, #156]	@ (8000994 <MX_GPIO_Init+0xd4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a26      	ldr	r2, [pc, #152]	@ (8000994 <MX_GPIO_Init+0xd4>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <MX_GPIO_Init+0xd4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <MX_GPIO_Init+0xd4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a1f      	ldr	r2, [pc, #124]	@ (8000994 <MX_GPIO_Init+0xd4>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <MX_GPIO_Init+0xd4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <MX_GPIO_Init+0xd4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a18      	ldr	r2, [pc, #96]	@ (8000994 <MX_GPIO_Init+0xd4>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_GPIO_Init+0xd4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0xd8>)
 800095c:	f001 fa00 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4808      	ldr	r0, [pc, #32]	@ (8000998 <MX_GPIO_Init+0xd8>)
 8000976:	f001 f9f3 	bl	8001d60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2006      	movs	r0, #6
 8000980:	f000 fdd7 	bl	8001532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000984:	2006      	movs	r0, #6
 8000986:	f000 fdf0 	bl	800156a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	@ 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e009      	b.n	80009c2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1c5a      	adds	r2, r3, #1
 80009b2:	60ba      	str	r2, [r7, #8]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fdf2 	bl	80005a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	3301      	adds	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	dbf1      	blt.n	80009ae <_write+0x12>
  }
  return len;
 80009ca:	687b      	ldr	r3, [r7, #4]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	full_i2s = 1;
 80009dc:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <HAL_I2S_RxCpltCallback+0x1c>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	200011ef 	.word	0x200011ef

080009f4 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	//sample_i2s = data_i2s[0];
	half_i2s = 1;
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200011ee 	.word	0x200011ee

08000a14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d102      	bne.n	8000a2a <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000a24:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <HAL_GPIO_EXTI_Callback+0x24>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	200011ec 	.word	0x200011ec

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <start_recording>:
	f_close(&test_file);
	*/
}

void start_recording(uint32_t frequency)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	static char file_name[] = "w_000.wav";
	static uint8_t file_counter = 10;
	int file_number_digits = file_counter;
 8000a50:	4b4b      	ldr	r3, [pc, #300]	@ (8000b80 <start_recording+0x138>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t)frequency;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b48      	ldr	r3, [pc, #288]	@ (8000b84 <start_recording+0x13c>)
 8000a62:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	0a1b      	lsrs	r3, r3, #8
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b46      	ldr	r3, [pc, #280]	@ (8000b84 <start_recording+0x13c>)
 8000a6c:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	0c1b      	lsrs	r3, r3, #16
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b43      	ldr	r3, [pc, #268]	@ (8000b84 <start_recording+0x13c>)
 8000a76:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	0e1b      	lsrs	r3, r3, #24
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b41      	ldr	r3, [pc, #260]	@ (8000b84 <start_recording+0x13c>)
 8000a80:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b3f      	ldr	r3, [pc, #252]	@ (8000b84 <start_recording+0x13c>)
 8000a88:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b3c      	ldr	r3, [pc, #240]	@ (8000b84 <start_recording+0x13c>)
 8000a92:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b84 <start_recording+0x13c>)
 8000a9c:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	0e1b      	lsrs	r3, r3, #24
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b37      	ldr	r3, [pc, #220]	@ (8000b84 <start_recording+0x13c>)
 8000aa6:	77da      	strb	r2, [r3, #31]

	// defining a wave file name
	file_name[4] = file_number_digits%10 + 48;
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4b37      	ldr	r3, [pc, #220]	@ (8000b88 <start_recording+0x140>)
 8000aac:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab0:	1099      	asrs	r1, r3, #2
 8000ab2:	17d3      	asrs	r3, r2, #31
 8000ab4:	1ac9      	subs	r1, r1, r3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	440b      	add	r3, r1
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	1ad1      	subs	r1, r2, r3
 8000ac0:	b2cb      	uxtb	r3, r1
 8000ac2:	3330      	adds	r3, #48	@ 0x30
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b31      	ldr	r3, [pc, #196]	@ (8000b8c <start_recording+0x144>)
 8000ac8:	711a      	strb	r2, [r3, #4]
	file_number_digits /= 10;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4a2e      	ldr	r2, [pc, #184]	@ (8000b88 <start_recording+0x140>)
 8000ace:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad2:	1092      	asrs	r2, r2, #2
 8000ad4:	17db      	asrs	r3, r3, #31
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	60fb      	str	r3, [r7, #12]
	file_name[3] = file_number_digits%10 + 48;
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <start_recording+0x140>)
 8000ade:	fb83 1302 	smull	r1, r3, r3, r2
 8000ae2:	1099      	asrs	r1, r3, #2
 8000ae4:	17d3      	asrs	r3, r2, #31
 8000ae6:	1ac9      	subs	r1, r1, r3
 8000ae8:	460b      	mov	r3, r1
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	440b      	add	r3, r1
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	1ad1      	subs	r1, r2, r3
 8000af2:	b2cb      	uxtb	r3, r1
 8000af4:	3330      	adds	r3, #48	@ 0x30
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <start_recording+0x144>)
 8000afa:	70da      	strb	r2, [r3, #3]
	file_number_digits /= 10;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4a22      	ldr	r2, [pc, #136]	@ (8000b88 <start_recording+0x140>)
 8000b00:	fb82 1203 	smull	r1, r2, r2, r3
 8000b04:	1092      	asrs	r2, r2, #2
 8000b06:	17db      	asrs	r3, r3, #31
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	60fb      	str	r3, [r7, #12]
	file_name[2] = file_number_digits%10 + 48;
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <start_recording+0x140>)
 8000b10:	fb83 1302 	smull	r1, r3, r3, r2
 8000b14:	1099      	asrs	r1, r3, #2
 8000b16:	17d3      	asrs	r3, r2, #31
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	440b      	add	r3, r1
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	1ad1      	subs	r1, r2, r3
 8000b24:	b2cb      	uxtb	r3, r1
 8000b26:	3330      	adds	r3, #48	@ 0x30
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <start_recording+0x144>)
 8000b2c:	709a      	strb	r2, [r3, #2]
	printf("file name %s \n", file_name);
 8000b2e:	4917      	ldr	r1, [pc, #92]	@ (8000b8c <start_recording+0x144>)
 8000b30:	4817      	ldr	r0, [pc, #92]	@ (8000b90 <start_recording+0x148>)
 8000b32:	f007 fe4f 	bl	80087d4 <iprintf>
	file_counter++;
 8000b36:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <start_recording+0x138>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <start_recording+0x138>)
 8000b40:	701a      	strb	r2, [r3, #0]

	// creating a file
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 8000b42:	220a      	movs	r2, #10
 8000b44:	4911      	ldr	r1, [pc, #68]	@ (8000b8c <start_recording+0x144>)
 8000b46:	4813      	ldr	r0, [pc, #76]	@ (8000b94 <start_recording+0x14c>)
 8000b48:	f006 ff45 	bl	80079d6 <f_open>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <start_recording+0x150>)
 8000b52:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 8000b54:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <start_recording+0x150>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d007      	beq.n	8000b6c <start_recording+0x124>
	{
		printf("error in creating a file: %d \n", sd_result);
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <start_recording+0x150>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	480e      	ldr	r0, [pc, #56]	@ (8000b9c <start_recording+0x154>)
 8000b64:	f007 fe36 	bl	80087d4 <iprintf>
		while(1);
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <start_recording+0x120>
	}
	else
	{
		printf("succeeded in opening a file \n");
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <start_recording+0x158>)
 8000b6e:	f007 fe99 	bl	80088a4 <puts>
	}
	wav_file_size = 0;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <start_recording+0x15c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000002c 	.word	0x2000002c
 8000b84:	20000000 	.word	0x20000000
 8000b88:	66666667 	.word	0x66666667
 8000b8c:	20000030 	.word	0x20000030
 8000b90:	080095f8 	.word	0x080095f8
 8000b94:	200011f4 	.word	0x200011f4
 8000b98:	200011f0 	.word	0x200011f0
 8000b9c:	08009608 	.word	0x08009608
 8000ba0:	08009628 	.word	0x08009628
 8000ba4:	20001424 	.word	0x20001424

08000ba8 <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	printf("w\n");
 8000bb4:	481d      	ldr	r0, [pc, #116]	@ (8000c2c <write2wave_file+0x84>)
 8000bb6:	f007 fe75 	bl	80088a4 <puts>
	if(first_time == 0)
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <write2wave_file+0x88>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d113      	bne.n	8000bea <write2wave_file+0x42>
	{
		for(int i = 0; i < 44; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e00a      	b.n	8000bde <write2wave_file+0x36>
		{
			*(data + i) = wav_file_header[i];
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4919      	ldr	r1, [pc, #100]	@ (8000c34 <write2wave_file+0x8c>)
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	440a      	add	r2, r1
 8000bd4:	7812      	ldrb	r2, [r2, #0]
 8000bd6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2b2b      	cmp	r3, #43	@ 0x2b
 8000be2:	ddf1      	ble.n	8000bc8 <write2wave_file+0x20>
		}
		first_time = 1;
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <write2wave_file+0x88>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 8000bea:	887a      	ldrh	r2, [r7, #2]
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	4811      	ldr	r0, [pc, #68]	@ (8000c38 <write2wave_file+0x90>)
 8000bf4:	f007 f8a9 	bl	8007d4a <f_write>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <write2wave_file+0x94>)
 8000bfe:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <write2wave_file+0x94>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d007      	beq.n	8000c18 <write2wave_file+0x70>
	{
		printf("error in writing to the file: %d \n", sd_result);
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <write2wave_file+0x94>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <write2wave_file+0x98>)
 8000c10:	f007 fde0 	bl	80087d4 <iprintf>
		while(1);
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <write2wave_file+0x6c>
	}
	wav_file_size += data_size;
 8000c18:	887a      	ldrh	r2, [r7, #2]
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <write2wave_file+0x9c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <write2wave_file+0x9c>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	08009648 	.word	0x08009648
 8000c30:	20001428 	.word	0x20001428
 8000c34:	20000000 	.word	0x20000000
 8000c38:	200011f4 	.word	0x200011f4
 8000c3c:	200011f0 	.word	0x200011f0
 8000c40:	0800964c 	.word	0x0800964c
 8000c44:	20001424 	.word	0x20001424

08000c48 <stop_recording>:

void stop_recording()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d0c <stop_recording+0xc4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3b08      	subs	r3, #8
 8000c54:	4a2d      	ldr	r2, [pc, #180]	@ (8000d0c <stop_recording+0xc4>)
 8000c56:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000c58:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <stop_recording+0xc4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d10 <stop_recording+0xc8>)
 8000c60:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 8000c62:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <stop_recording+0xc4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <stop_recording+0xc8>)
 8000c6c:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 8000c6e:	4b27      	ldr	r3, [pc, #156]	@ (8000d0c <stop_recording+0xc4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	0c1b      	lsrs	r3, r3, #16
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <stop_recording+0xc8>)
 8000c78:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 8000c7a:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <stop_recording+0xc4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	0e1b      	lsrs	r3, r3, #24
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <stop_recording+0xc8>)
 8000c84:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000c86:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <stop_recording+0xc4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b24      	subs	r3, #36	@ 0x24
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d0c <stop_recording+0xc4>)
 8000c8e:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <stop_recording+0xc4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <stop_recording+0xc8>)
 8000c98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <stop_recording+0xc4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <stop_recording+0xc8>)
 8000ca6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <stop_recording+0xc4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	0c1b      	lsrs	r3, r3, #16
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <stop_recording+0xc8>)
 8000cb4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <stop_recording+0xc4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	0e1b      	lsrs	r3, r3, #24
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <stop_recording+0xc8>)
 8000cc2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4812      	ldr	r0, [pc, #72]	@ (8000d14 <stop_recording+0xcc>)
 8000cca:	f007 fa5b 	bl	8008184 <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 8000cce:	1dbb      	adds	r3, r7, #6
 8000cd0:	222c      	movs	r2, #44	@ 0x2c
 8000cd2:	490f      	ldr	r1, [pc, #60]	@ (8000d10 <stop_recording+0xc8>)
 8000cd4:	480f      	ldr	r0, [pc, #60]	@ (8000d14 <stop_recording+0xcc>)
 8000cd6:	f007 f838 	bl	8007d4a <f_write>
	if(sd_result != 0)
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <stop_recording+0xd0>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d007      	beq.n	8000cf2 <stop_recording+0xaa>
	{
		printf("error in updating the first sector: %d \n", sd_result);
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <stop_recording+0xd0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	@ (8000d1c <stop_recording+0xd4>)
 8000cea:	f007 fd73 	bl	80087d4 <iprintf>
		while(1);
 8000cee:	bf00      	nop
 8000cf0:	e7fd      	b.n	8000cee <stop_recording+0xa6>
	}
	f_close(&wavFile);
 8000cf2:	4808      	ldr	r0, [pc, #32]	@ (8000d14 <stop_recording+0xcc>)
 8000cf4:	f007 fa1c 	bl	8008130 <f_close>
	first_time = 0;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <stop_recording+0xd8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
	printf("closed the file \n");
 8000cfe:	4809      	ldr	r0, [pc, #36]	@ (8000d24 <stop_recording+0xdc>)
 8000d00:	f007 fdd0 	bl	80088a4 <puts>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20001424 	.word	0x20001424
 8000d10:	20000000 	.word	0x20000000
 8000d14:	200011f4 	.word	0x200011f4
 8000d18:	200011f0 	.word	0x200011f0
 8000d1c:	08009670 	.word	0x08009670
 8000d20:	20001428 	.word	0x20001428
 8000d24:	0800969c 	.word	0x0800969c

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0a2      	sub	sp, #136	@ 0x88
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 0318 	add.w	r3, r7, #24
 8000d94:	225c      	movs	r2, #92	@ 0x5c
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f007 fe63 	bl	8008a64 <memset>
  if(hi2s->Instance==SPI2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a50      	ldr	r2, [pc, #320]	@ (8000ee4 <HAL_I2S_MspInit+0x16c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	f040 8099 	bne.w	8000edc <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000dae:	2332      	movs	r3, #50	@ 0x32
 8000db0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000db6:	2308      	movs	r3, #8
 8000db8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fe66 	bl	8002aa0 <HAL_RCCEx_PeriphCLKConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8000dda:	f7ff fe2f 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	4b41      	ldr	r3, [pc, #260]	@ (8000ee8 <HAL_I2S_MspInit+0x170>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	4a40      	ldr	r2, [pc, #256]	@ (8000ee8 <HAL_I2S_MspInit+0x170>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dee:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee8 <HAL_I2S_MspInit+0x170>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <HAL_I2S_MspInit+0x170>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a39      	ldr	r2, [pc, #228]	@ (8000ee8 <HAL_I2S_MspInit+0x170>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b37      	ldr	r3, [pc, #220]	@ (8000ee8 <HAL_I2S_MspInit+0x170>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <HAL_I2S_MspInit+0x170>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a32      	ldr	r2, [pc, #200]	@ (8000ee8 <HAL_I2S_MspInit+0x170>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b30      	ldr	r3, [pc, #192]	@ (8000ee8 <HAL_I2S_MspInit+0x170>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e32:	2302      	movs	r3, #2
 8000e34:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000e44:	2307      	movs	r3, #7
 8000e46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4826      	ldr	r0, [pc, #152]	@ (8000eec <HAL_I2S_MspInit+0x174>)
 8000e52:	f000 ff85 	bl	8001d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e56:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e5a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e74:	4619      	mov	r1, r3
 8000e76:	481e      	ldr	r0, [pc, #120]	@ (8000ef0 <HAL_I2S_MspInit+0x178>)
 8000e78:	f000 ff72 	bl	8001d60 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef8 <HAL_I2S_MspInit+0x180>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e94:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000e96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e9a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ea2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000ea6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eaa:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000eae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eb2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000ec2:	f000 fb6d 	bl	80015a0 <HAL_DMA_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_I2S_MspInit+0x158>
    {
      Error_Handler();
 8000ecc:	f7ff fdb6 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000ed4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ed6:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <HAL_I2S_MspInit+0x17c>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000edc:	bf00      	nop
 8000ede:	3788      	adds	r7, #136	@ 0x88
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40003800 	.word	0x40003800
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	20000108 	.word	0x20000108
 8000ef8:	40026058 	.word	0x40026058

08000efc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0a2      	sub	sp, #136	@ 0x88
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f14:	f107 0318 	add.w	r3, r7, #24
 8000f18:	225c      	movs	r2, #92	@ 0x5c
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f007 fda1 	bl	8008a64 <memset>
  if(hsd->Instance==SDIO)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a43      	ldr	r2, [pc, #268]	@ (8001034 <HAL_SD_MspInit+0x138>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d17f      	bne.n	800102c <HAL_SD_MspInit+0x130>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000f2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f32:	2300      	movs	r3, #0
 8000f34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000f36:	2300      	movs	r3, #0
 8000f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3a:	f107 0318 	add.w	r3, r7, #24
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fdae 	bl	8002aa0 <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000f4a:	f7ff fd77 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b39      	ldr	r3, [pc, #228]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f56:	4a38      	ldr	r2, [pc, #224]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000f58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5e:	4b36      	ldr	r3, [pc, #216]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b32      	ldr	r3, [pc, #200]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a31      	ldr	r2, [pc, #196]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a23      	ldr	r2, [pc, #140]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <HAL_SD_MspInit+0x13c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4817      	ldr	r0, [pc, #92]	@ (800103c <HAL_SD_MspInit+0x140>)
 8000fde:	f000 febf 	bl	8001d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fe2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000fe6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001000:	4619      	mov	r1, r3
 8001002:	480f      	ldr	r0, [pc, #60]	@ (8001040 <HAL_SD_MspInit+0x144>)
 8001004:	f000 feac 	bl	8001d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001008:	2304      	movs	r3, #4
 800100a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800101a:	230c      	movs	r3, #12
 800101c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001020:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001024:	4619      	mov	r1, r3
 8001026:	4807      	ldr	r0, [pc, #28]	@ (8001044 <HAL_SD_MspInit+0x148>)
 8001028:	f000 fe9a 	bl	8001d60 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 800102c:	bf00      	nop
 800102e:	3788      	adds	r7, #136	@ 0x88
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40012c00 	.word	0x40012c00
 8001038:	40023800 	.word	0x40023800
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
 8001044:	40020c00 	.word	0x40020c00

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <NMI_Handler+0x4>

08001050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <MemManage_Handler+0x4>

08001060 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <UsageFault_Handler+0x4>

08001070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 f929 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f001 f804 	bl	80020b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <DMA1_Stream3_IRQHandler+0x10>)
 80010ba:	f000 fbe7 	bl	800188c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000108 	.word	0x20000108

080010c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e00a      	b.n	80010f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010da:	f3af 8000 	nop.w
 80010de:	4601      	mov	r1, r0
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	b2ca      	uxtb	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbf0      	blt.n	80010da <_read+0x12>
  }

  return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800112a:	605a      	str	r2, [r3, #4]
  return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_isatty>:

int _isatty(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f007 fcb0 	bl	8008b00 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20020000 	.word	0x20020000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	2000142c 	.word	0x2000142c
 80011d4:	200015c0 	.word	0x200015c0

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001234 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001200:	f7ff ffea 	bl	80011d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	@ (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	@ (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	@ (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800122a:	f007 fc6f 	bl	8008b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f9df 	bl	80005f0 <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001240:	080097e4 	.word	0x080097e4
  ldr r2, =_sbss
 8001244:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001248:	200015bc 	.word	0x200015bc

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f94f 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	200f      	movs	r0, #15
 8001280:	f000 f808 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fd50 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <HAL_InitTick+0x54>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_InitTick+0x58>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f967 	bl	8001586 <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012d0:	f000 f92f 	bl	8001532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	@ (80012f0 <HAL_InitTick+0x5c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000003c 	.word	0x2000003c
 80012ec:	20000044 	.word	0x20000044
 80012f0:	20000040 	.word	0x20000040

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000044 	.word	0x20000044
 8001318:	20001430 	.word	0x20001430

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20001430 	.word	0x20001430

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff ffee 	bl	800131c <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800135a:	bf00      	nop
 800135c:	f7ff ffde 	bl	800131c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000044 	.word	0x20000044

0800137c <__NVIC_SetPriorityGrouping>:
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4907      	ldr	r1, [pc, #28]	@ (8001418 <__NVIC_EnableIRQ+0x38>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	@ (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	@ (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	@ 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	@ 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff29 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff3e 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff31 	bl	80013e0 <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa2 	bl	80014d8 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff feb6 	bl	800131c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e099      	b.n	80016f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015dc:	e00f      	b.n	80015fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015de:	f7ff fe9d 	bl	800131c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d908      	bls.n	80015fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2220      	movs	r2, #32
 80015f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2203      	movs	r2, #3
 80015f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e078      	b.n	80016f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e8      	bne.n	80015de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <HAL_DMA_Init+0x158>)
 8001618:	4013      	ands	r3, r2
 800161a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800162a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4313      	orrs	r3, r2
 800164e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001654:	2b04      	cmp	r3, #4
 8001656:	d107      	bne.n	8001668 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	4313      	orrs	r3, r2
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4313      	orrs	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f023 0307 	bic.w	r3, r3, #7
 800167e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	4313      	orrs	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	2b04      	cmp	r3, #4
 8001690:	d117      	bne.n	80016c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00e      	beq.n	80016c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 fadf 	bl	8001c68 <DMA_CheckFifoParam>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2240      	movs	r2, #64	@ 0x40
 80016b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80016be:	2301      	movs	r3, #1
 80016c0:	e016      	b.n	80016f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fa96 	bl	8001bfc <DMA_CalcBaseAndBitshift>
 80016d0:	4603      	mov	r3, r0
 80016d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d8:	223f      	movs	r2, #63	@ 0x3f
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	f010803f 	.word	0xf010803f

080016fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_DMA_Start_IT+0x26>
 800171e:	2302      	movs	r3, #2
 8001720:	e040      	b.n	80017a4 <HAL_DMA_Start_IT+0xa8>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d12f      	bne.n	8001796 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2202      	movs	r2, #2
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 fa28 	bl	8001ba0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001754:	223f      	movs	r2, #63	@ 0x3f
 8001756:	409a      	lsls	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0216 	orr.w	r2, r2, #22
 800176a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0208 	orr.w	r2, r2, #8
 8001782:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0201 	orr.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e005      	b.n	80017a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800179e:	2302      	movs	r3, #2
 80017a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017ba:	f7ff fdaf 	bl	800131c <HAL_GetTick>
 80017be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d008      	beq.n	80017de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2280      	movs	r2, #128	@ 0x80
 80017d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e052      	b.n	8001884 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0216 	bic.w	r2, r2, #22
 80017ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d103      	bne.n	800180e <HAL_DMA_Abort+0x62>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0208 	bic.w	r2, r2, #8
 800181c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800182e:	e013      	b.n	8001858 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001830:	f7ff fd74 	bl	800131c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b05      	cmp	r3, #5
 800183c:	d90c      	bls.n	8001858 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2220      	movs	r2, #32
 8001842:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2203      	movs	r2, #3
 8001848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e015      	b.n	8001884 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e4      	bne.n	8001830 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186a:	223f      	movs	r2, #63	@ 0x3f
 800186c:	409a      	lsls	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001898:	4b8e      	ldr	r3, [pc, #568]	@ (8001ad4 <HAL_DMA_IRQHandler+0x248>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ad8 <HAL_DMA_IRQHandler+0x24c>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0a9b      	lsrs	r3, r3, #10
 80018a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b6:	2208      	movs	r2, #8
 80018b8:	409a      	lsls	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4013      	ands	r3, r2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d01a      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0204 	bic.w	r2, r2, #4
 80018de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e4:	2208      	movs	r2, #8
 80018e6:	409a      	lsls	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d012      	beq.n	800192e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191a:	2201      	movs	r2, #1
 800191c:	409a      	lsls	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001932:	2204      	movs	r2, #4
 8001934:	409a      	lsls	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d012      	beq.n	8001964 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00b      	beq.n	8001964 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001950:	2204      	movs	r2, #4
 8001952:	409a      	lsls	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800195c:	f043 0204 	orr.w	r2, r3, #4
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001968:	2210      	movs	r2, #16
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d043      	beq.n	80019fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d03c      	beq.n	80019fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001986:	2210      	movs	r2, #16
 8001988:	409a      	lsls	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d018      	beq.n	80019ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d108      	bne.n	80019bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d024      	beq.n	80019fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
 80019ba:	e01f      	b.n	80019fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01b      	beq.n	80019fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
 80019cc:	e016      	b.n	80019fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d107      	bne.n	80019ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0208 	bic.w	r2, r2, #8
 80019ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a00:	2220      	movs	r2, #32
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 808f 	beq.w	8001b2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 8087 	beq.w	8001b2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a22:	2220      	movs	r2, #32
 8001a24:	409a      	lsls	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d136      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0216 	bic.w	r2, r2, #22
 8001a44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <HAL_DMA_IRQHandler+0x1da>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0208 	bic.w	r2, r2, #8
 8001a74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7a:	223f      	movs	r2, #63	@ 0x3f
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d07e      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
        }
        return;
 8001aa2:	e079      	b.n	8001b98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d01d      	beq.n	8001aee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10d      	bne.n	8001adc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d031      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
 8001ad0:	e02c      	b.n	8001b2c <HAL_DMA_IRQHandler+0x2a0>
 8001ad2:	bf00      	nop
 8001ad4:	2000003c 	.word	0x2000003c
 8001ad8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d023      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
 8001aec:	e01e      	b.n	8001b2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10f      	bne.n	8001b1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0210 	bic.w	r2, r2, #16
 8001b0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d032      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d022      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2205      	movs	r2, #5
 8001b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d307      	bcc.n	8001b74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f2      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x2cc>
 8001b72:	e000      	b.n	8001b76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
 8001b96:	e000      	b.n	8001b9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b98:	bf00      	nop
    }
  }
}
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b40      	cmp	r3, #64	@ 0x40
 8001bcc:	d108      	bne.n	8001be0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bde:	e007      	b.n	8001bf0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	60da      	str	r2, [r3, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3b10      	subs	r3, #16
 8001c0c:	4a14      	ldr	r2, [pc, #80]	@ (8001c60 <DMA_CalcBaseAndBitshift+0x64>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c16:	4a13      	ldr	r2, [pc, #76]	@ (8001c64 <DMA_CalcBaseAndBitshift+0x68>)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d909      	bls.n	8001c3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c32:	f023 0303 	bic.w	r3, r3, #3
 8001c36:	1d1a      	adds	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c3c:	e007      	b.n	8001c4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	aaaaaaab 	.word	0xaaaaaaab
 8001c64:	08009704 	.word	0x08009704

08001c68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d11f      	bne.n	8001cc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d856      	bhi.n	8001d36 <DMA_CheckFifoParam+0xce>
 8001c88:	a201      	add	r2, pc, #4	@ (adr r2, 8001c90 <DMA_CheckFifoParam+0x28>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001ca1 	.word	0x08001ca1
 8001c94:	08001cb3 	.word	0x08001cb3
 8001c98:	08001ca1 	.word	0x08001ca1
 8001c9c:	08001d37 	.word	0x08001d37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d046      	beq.n	8001d3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb0:	e043      	b.n	8001d3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cba:	d140      	bne.n	8001d3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc0:	e03d      	b.n	8001d3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cca:	d121      	bne.n	8001d10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d837      	bhi.n	8001d42 <DMA_CheckFifoParam+0xda>
 8001cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd8 <DMA_CheckFifoParam+0x70>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001cef 	.word	0x08001cef
 8001ce0:	08001ce9 	.word	0x08001ce9
 8001ce4:	08001d01 	.word	0x08001d01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
      break;
 8001cec:	e030      	b.n	8001d50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d025      	beq.n	8001d46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cfe:	e022      	b.n	8001d46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d08:	d11f      	bne.n	8001d4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d0e:	e01c      	b.n	8001d4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d903      	bls.n	8001d1e <DMA_CheckFifoParam+0xb6>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d003      	beq.n	8001d24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d1c:	e018      	b.n	8001d50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
      break;
 8001d22:	e015      	b.n	8001d50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00e      	beq.n	8001d4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
      break;
 8001d34:	e00b      	b.n	8001d4e <DMA_CheckFifoParam+0xe6>
      break;
 8001d36:	bf00      	nop
 8001d38:	e00a      	b.n	8001d50 <DMA_CheckFifoParam+0xe8>
      break;
 8001d3a:	bf00      	nop
 8001d3c:	e008      	b.n	8001d50 <DMA_CheckFifoParam+0xe8>
      break;
 8001d3e:	bf00      	nop
 8001d40:	e006      	b.n	8001d50 <DMA_CheckFifoParam+0xe8>
      break;
 8001d42:	bf00      	nop
 8001d44:	e004      	b.n	8001d50 <DMA_CheckFifoParam+0xe8>
      break;
 8001d46:	bf00      	nop
 8001d48:	e002      	b.n	8001d50 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d4a:	bf00      	nop
 8001d4c:	e000      	b.n	8001d50 <DMA_CheckFifoParam+0xe8>
      break;
 8001d4e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	@ 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e165      	b.n	8002048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 8154 	bne.w	8002042 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d005      	beq.n	8001db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d130      	bne.n	8001e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 0201 	and.w	r2, r3, #1
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d017      	beq.n	8001e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d123      	bne.n	8001ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	69b9      	ldr	r1, [r7, #24]
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80ae 	beq.w	8002042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b5d      	ldr	r3, [pc, #372]	@ (8002060 <HAL_GPIO_Init+0x300>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	4a5c      	ldr	r2, [pc, #368]	@ (8002060 <HAL_GPIO_Init+0x300>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef6:	4b5a      	ldr	r3, [pc, #360]	@ (8002060 <HAL_GPIO_Init+0x300>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f02:	4a58      	ldr	r2, [pc, #352]	@ (8002064 <HAL_GPIO_Init+0x304>)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	@ (8002068 <HAL_GPIO_Init+0x308>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x21a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4e      	ldr	r2, [pc, #312]	@ (800206c <HAL_GPIO_Init+0x30c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x216>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4d      	ldr	r2, [pc, #308]	@ (8002070 <HAL_GPIO_Init+0x310>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x212>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4c      	ldr	r2, [pc, #304]	@ (8002074 <HAL_GPIO_Init+0x314>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x20e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4b      	ldr	r2, [pc, #300]	@ (8002078 <HAL_GPIO_Init+0x318>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x20a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4a      	ldr	r2, [pc, #296]	@ (800207c <HAL_GPIO_Init+0x31c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x206>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a49      	ldr	r2, [pc, #292]	@ (8002080 <HAL_GPIO_Init+0x320>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x202>
 8001f5e:	2306      	movs	r3, #6
 8001f60:	e00c      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f62:	2307      	movs	r3, #7
 8001f64:	e00a      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e008      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e004      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e002      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	f002 0203 	and.w	r2, r2, #3
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	4093      	lsls	r3, r2
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8c:	4935      	ldr	r1, [pc, #212]	@ (8002064 <HAL_GPIO_Init+0x304>)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fbe:	4a31      	ldr	r2, [pc, #196]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe8:	4a26      	ldr	r2, [pc, #152]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fee:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002012:	4a1c      	ldr	r2, [pc, #112]	@ (8002084 <HAL_GPIO_Init+0x324>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002018:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_GPIO_Init+0x324>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800203c:	4a11      	ldr	r2, [pc, #68]	@ (8002084 <HAL_GPIO_Init+0x324>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	f67f ae96 	bls.w	8001d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40013800 	.word	0x40013800
 8002068:	40020000 	.word	0x40020000
 800206c:	40020400 	.word	0x40020400
 8002070:	40020800 	.word	0x40020800
 8002074:	40020c00 	.word	0x40020c00
 8002078:	40021000 	.word	0x40021000
 800207c:	40021400 	.word	0x40021400
 8002080:	40021800 	.word	0x40021800
 8002084:	40013c00 	.word	0x40013c00

08002088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e001      	b.n	80020aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ce:	4a05      	ldr	r2, [pc, #20]	@ (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fc9c 	bl	8000a14 <HAL_GPIO_EXTI_Callback>
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40013c00 	.word	0x40013c00

080020e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0e1      	b.n	80022be <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a6d      	ldr	r2, [pc, #436]	@ (80022c8 <HAL_I2S_Init+0x1e0>)
 8002112:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7fe fe2f 	bl	8000d78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002130:	f023 030f 	bic.w	r3, r3, #15
 8002134:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2202      	movs	r2, #2
 800213c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d06f      	beq.n	8002226 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800214e:	2310      	movs	r3, #16
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e001      	b.n	8002158 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b20      	cmp	r3, #32
 800215e:	d802      	bhi.n	8002166 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a58      	ldr	r2, [pc, #352]	@ (80022cc <HAL_I2S_Init+0x1e4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d004      	beq.n	800217a <HAL_I2S_Init+0x92>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a56      	ldr	r2, [pc, #344]	@ (80022d0 <HAL_I2S_Init+0x1e8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d104      	bne.n	8002184 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800217a:	2001      	movs	r0, #1
 800217c:	f000 ffba 	bl	80030f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	e003      	b.n	800218c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002184:	2002      	movs	r0, #2
 8002186:	f000 ffb5 	bl	80030f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800218a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002194:	d125      	bne.n	80021e2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d010      	beq.n	80021c0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	461a      	mov	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	3305      	adds	r3, #5
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	e01f      	b.n	8002200 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	461a      	mov	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	3305      	adds	r3, #5
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	e00e      	b.n	8002200 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	3305      	adds	r3, #5
 80021fe:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4a34      	ldr	r2, [pc, #208]	@ (80022d4 <HAL_I2S_Init+0x1ec>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	e003      	b.n	800222e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002226:	2302      	movs	r3, #2
 8002228:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d902      	bls.n	800223a <HAL_I2S_Init+0x152>
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	2bff      	cmp	r3, #255	@ 0xff
 8002238:	d907      	bls.n	800224a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	f043 0210 	orr.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e039      	b.n	80022be <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	ea42 0103 	orr.w	r1, r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	430a      	orrs	r2, r1
 800225c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002268:	f023 030f 	bic.w	r3, r3, #15
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6851      	ldr	r1, [r2, #4]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6892      	ldr	r2, [r2, #8]
 8002274:	4311      	orrs	r1, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68d2      	ldr	r2, [r2, #12]
 800227a:	4311      	orrs	r1, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6992      	ldr	r2, [r2, #24]
 8002280:	430a      	orrs	r2, r1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800228c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b30      	cmp	r3, #48	@ 0x30
 8002294:	d003      	beq.n	800229e <HAL_I2S_Init+0x1b6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2bb0      	cmp	r3, #176	@ 0xb0
 800229c:	d107      	bne.n	80022ae <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022ac:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	0800274d 	.word	0x0800274d
 80022cc:	40003800 	.word	0x40003800
 80022d0:	40003c00 	.word	0x40003c00
 80022d4:	cccccccd 	.word	0xcccccccd

080022d8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_I2S_Receive_DMA+0x1a>
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e09d      	b.n	8002432 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8002302:	2302      	movs	r3, #2
 8002304:	e095      	b.n	8002432 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_I2S_Receive_DMA+0x3e>
 8002312:	2302      	movs	r3, #2
 8002314:	e08d      	b.n	8002432 <HAL_I2S_Receive_DMA+0x15a>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2204      	movs	r2, #4
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d002      	beq.n	800234a <HAL_I2S_Receive_DMA+0x72>
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b05      	cmp	r3, #5
 8002348:	d10a      	bne.n	8002360 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	865a      	strh	r2, [r3, #50]	@ 0x32
 800235e:	e005      	b.n	800236c <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	88fa      	ldrh	r2, [r7, #6]
 8002364:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002370:	4a32      	ldr	r2, [pc, #200]	@ (800243c <HAL_I2S_Receive_DMA+0x164>)
 8002372:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002378:	4a31      	ldr	r2, [pc, #196]	@ (8002440 <HAL_I2S_Receive_DMA+0x168>)
 800237a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002380:	4a30      	ldr	r2, [pc, #192]	@ (8002444 <HAL_I2S_Receive_DMA+0x16c>)
 8002382:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800238e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002392:	d10a      	bne.n	80023aa <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	330c      	adds	r3, #12
 80023b4:	4619      	mov	r1, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80023c0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80023c2:	f7ff f99b 	bl	80016fc <HAL_DMA_Start_IT>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00f      	beq.n	80023ec <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d0:	f043 0208 	orr.w	r2, r3, #8
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e022      	b.n	8002432 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d107      	bne.n	8002412 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d107      	bne.n	8002430 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800242e:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	0800262b 	.word	0x0800262b
 8002440:	080025e9 	.word	0x080025e9
 8002444:	08002647 	.word	0x08002647

08002448 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800245c:	d003      	beq.n	8002466 <HAL_I2S_DMAStop+0x1e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d155      	bne.n	8002512 <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00f      	beq.n	800248e <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff f99a 	bl	80017ac <HAL_DMA_Abort>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f043 0208 	orr.w	r2, r3, #8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800248e:	2364      	movs	r3, #100	@ 0x64
 8002490:	2201      	movs	r2, #1
 8002492:	2102      	movs	r1, #2
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f9e3 	bl	8002860 <I2S_WaitFlagStateUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00b      	beq.n	80024b8 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80024b8:	2364      	movs	r3, #100	@ 0x64
 80024ba:	2200      	movs	r2, #0
 80024bc:	2180      	movs	r1, #128	@ 0x80
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f9ce 	bl	8002860 <I2S_WaitFlagStateUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ce:	f043 0201 	orr.w	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f0:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0202 	bic.w	r2, r2, #2
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	e04d      	b.n	80025ae <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800251a:	d004      	beq.n	8002526 <HAL_I2S_DMAStop+0xde>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002524:	d143      	bne.n	80025ae <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00f      	beq.n	800254e <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f93a 	bl	80017ac <HAL_DMA_Abort>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f043 0208 	orr.w	r2, r3, #8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800255c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800258c:	d10c      	bne.n	80025a8 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
 80025a6:	e002      	b.n	80025ae <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10e      	bne.n	800261c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7fe f9d9 	bl	80009d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002636:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7fe f9db 	bl	80009f4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002652:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0203 	bic.w	r2, r2, #3
 8002662:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267c:	f043 0208 	orr.w	r2, r3, #8
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff ffa5 	bl	80025d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	1c9a      	adds	r2, r3, #2
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10e      	bne.n	80026e6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff6d 	bl	80025c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	b292      	uxth	r2, r2
 8002702:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	1c9a      	adds	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10e      	bne.n	8002744 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002734:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe f948 	bl	80009d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b04      	cmp	r3, #4
 8002766:	d13a      	bne.n	80027de <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d109      	bne.n	8002786 <I2S_IRQHandler+0x3a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277c:	2b40      	cmp	r3, #64	@ 0x40
 800277e:	d102      	bne.n	8002786 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ffb4 	bl	80026ee <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278c:	2b40      	cmp	r3, #64	@ 0x40
 800278e:	d126      	bne.n	80027de <I2S_IRQHandler+0x92>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b20      	cmp	r3, #32
 800279c:	d11f      	bne.n	80027de <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027ac:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d0:	f043 0202 	orr.w	r2, r3, #2
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fefb 	bl	80025d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d136      	bne.n	8002858 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d109      	bne.n	8002808 <I2S_IRQHandler+0xbc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fe:	2b80      	cmp	r3, #128	@ 0x80
 8002800:	d102      	bne.n	8002808 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ff45 	bl	8002692 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b08      	cmp	r3, #8
 8002810:	d122      	bne.n	8002858 <I2S_IRQHandler+0x10c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b20      	cmp	r3, #32
 800281e:	d11b      	bne.n	8002858 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800282e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	f043 0204 	orr.w	r2, r3, #4
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff febe 	bl	80025d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002870:	f7fe fd54 	bl	800131c <HAL_GetTick>
 8002874:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002876:	e018      	b.n	80028aa <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800287e:	d014      	beq.n	80028aa <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002880:	f7fe fd4c 	bl	800131c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d902      	bls.n	8002896 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e00f      	b.n	80028ca <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4013      	ands	r3, r2
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1d7      	bne.n	8002878 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0cc      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b68      	ldr	r3, [pc, #416]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d90c      	bls.n	8002910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a58      	ldr	r2, [pc, #352]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002932:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a52      	ldr	r2, [pc, #328]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800294a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d044      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d119      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d003      	beq.n	8002992 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298e:	2b03      	cmp	r3, #3
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b3f      	ldr	r3, [pc, #252]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e067      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b37      	ldr	r3, [pc, #220]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4934      	ldr	r1, [pc, #208]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7fe fcaa 	bl	800131c <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fe fca6 	bl	800131c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e04f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b25      	ldr	r3, [pc, #148]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d20c      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 fd95 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	490a      	ldr	r1, [pc, #40]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	5ccb      	ldrb	r3, [r1, r3]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	@ (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fc0a 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023c00 	.word	0x40023c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	080096f4 	.word	0x080096f4
 8002a98:	2000003c 	.word	0x2000003c
 8002a9c:	20000040 	.word	0x20000040

08002aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	@ 0x30
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d010      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ade:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae6:	496c      	ldr	r1, [pc, #432]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002af6:	2301      	movs	r3, #1
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002b06:	4b64      	ldr	r3, [pc, #400]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b0c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b14:	4960      	ldr	r1, [pc, #384]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002b24:	2301      	movs	r3, #1
 8002b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d017      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b34:	4b58      	ldr	r3, [pc, #352]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	4955      	ldr	r1, [pc, #340]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b52:	d101      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002b54:	2301      	movs	r3, #1
 8002b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002b60:	2301      	movs	r3, #1
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d017      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b70:	4b49      	ldr	r3, [pc, #292]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7e:	4946      	ldr	r1, [pc, #280]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002b90:	2301      	movs	r3, #1
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 808a 	beq.w	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	4b39      	ldr	r3, [pc, #228]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	4a38      	ldr	r2, [pc, #224]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bbe:	4b36      	ldr	r3, [pc, #216]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bca:	4b34      	ldr	r3, [pc, #208]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a33      	ldr	r2, [pc, #204]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bd6:	f7fe fba1 	bl	800131c <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7fe fb9d 	bl	800131c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e278      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bfc:	4b26      	ldr	r3, [pc, #152]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c04:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d02f      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d028      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c22:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c30:	4a19      	ldr	r2, [pc, #100]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c36:	4b18      	ldr	r3, [pc, #96]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d114      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fe fb6b 	bl	800131c <HAL_GetTick>
 8002c46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fe fb67 	bl	800131c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e240      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	4b0d      	ldr	r3, [pc, #52]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ee      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c78:	d114      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002c7a:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c8e:	4902      	ldr	r1, [pc, #8]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]
 8002c94:	e00c      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	42470e40 	.word	0x42470e40
 8002ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a49      	ldr	r2, [pc, #292]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002caa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cae:	6093      	str	r3, [r2, #8]
 8002cb0:	4b47      	ldr	r3, [pc, #284]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	4944      	ldr	r1, [pc, #272]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002cd6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf2:	4937      	ldr	r1, [pc, #220]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d06:	4b32      	ldr	r3, [pc, #200]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d14:	492e      	ldr	r1, [pc, #184]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d011      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d28:	4b29      	ldr	r3, [pc, #164]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d36:	4926      	ldr	r1, [pc, #152]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d46:	d101      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002d58:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d5e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	491a      	ldr	r1, [pc, #104]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d011      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d80:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d88:	4911      	ldr	r1, [pc, #68]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d98:	d101      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d005      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dac:	f040 80ff 	bne.w	8002fae <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002db0:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002db6:	f7fe fab1 	bl	800131c <HAL_GetTick>
 8002dba:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dbc:	e00e      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dbe:	f7fe faad 	bl	800131c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d907      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e188      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	424711e0 	.word	0x424711e0
 8002dd8:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ea      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d009      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d028      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d124      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e10:	4b71      	ldr	r3, [pc, #452]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e16:	0c1b      	lsrs	r3, r3, #16
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e22:	4b6d      	ldr	r3, [pc, #436]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e28:	0e1b      	lsrs	r3, r3, #24
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	3b01      	subs	r3, #1
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	431a      	orrs	r2, r3
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	071b      	lsls	r3, r3, #28
 8002e52:	4961      	ldr	r1, [pc, #388]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d035      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e84:	d130      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e86:	4b54      	ldr	r3, [pc, #336]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	3301      	adds	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e98:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9e:	0f1b      	lsrs	r3, r3, #28
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	019b      	lsls	r3, r3, #6
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	085b      	lsrs	r3, r3, #1
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	071b      	lsls	r3, r3, #28
 8002ec8:	4943      	ldr	r1, [pc, #268]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ed0:	4b41      	ldr	r3, [pc, #260]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ed6:	f023 021f 	bic.w	r2, r3, #31
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	493d      	ldr	r1, [pc, #244]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d029      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002efc:	d124      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002efe:	4b36      	ldr	r3, [pc, #216]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f10:	4b31      	ldr	r3, [pc, #196]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f16:	0f1b      	lsrs	r3, r3, #28
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	019b      	lsls	r3, r3, #6
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	3b01      	subs	r3, #1
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	071b      	lsls	r3, r3, #28
 8002f40:	4925      	ldr	r1, [pc, #148]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d016      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	3b01      	subs	r3, #1
 8002f68:	041b      	lsls	r3, r3, #16
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	071b      	lsls	r3, r3, #28
 8002f7a:	4917      	ldr	r1, [pc, #92]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f82:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f88:	f7fe f9c8 	bl	800131c <HAL_GetTick>
 8002f8c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f90:	f7fe f9c4 	bl	800131c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e09f      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 8095 	bne.w	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fbc:	f7fe f9ae 	bl	800131c <HAL_GetTick>
 8002fc0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fc2:	e00f      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fc4:	f7fe f9aa 	bl	800131c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d908      	bls.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e085      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	42470068 	.word	0x42470068
 8002fe0:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fe4:	4b41      	ldr	r3, [pc, #260]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ff0:	d0e8      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02b      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	2b00      	cmp	r3, #0
 8003018:	d127      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800301a:	4b34      	ldr	r3, [pc, #208]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	3301      	adds	r3, #1
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	431a      	orrs	r2, r3
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	3b01      	subs	r3, #1
 800303e:	041b      	lsls	r3, r3, #16
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	061b      	lsls	r3, r3, #24
 8003048:	4928      	ldr	r1, [pc, #160]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003050:	4b26      	ldr	r3, [pc, #152]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003056:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	3b01      	subs	r3, #1
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	4922      	ldr	r1, [pc, #136]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01d      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800307e:	d118      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003080:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	0e1b      	lsrs	r3, r3, #24
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	019b      	lsls	r3, r3, #6
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	3b01      	subs	r3, #1
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	4910      	ldr	r1, [pc, #64]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030b2:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe f930 	bl	800131c <HAL_GetTick>
 80030bc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030c0:	f7fe f92c 	bl	800131c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e007      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030de:	d1ef      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3730      	adds	r7, #48	@ 0x30
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	42470070 	.word	0x42470070

080030f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	@ 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	2b07      	cmp	r3, #7
 800311a:	f200 8224 	bhi.w	8003566 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800311e:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	08003327 	.word	0x08003327
 8003128:	08003451 	.word	0x08003451
 800312c:	08003567 	.word	0x08003567
 8003130:	08003145 	.word	0x08003145
 8003134:	08003567 	.word	0x08003567
 8003138:	08003567 	.word	0x08003567
 800313c:	08003567 	.word	0x08003567
 8003140:	08003145 	.word	0x08003145
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003144:	4ba8      	ldr	r3, [pc, #672]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003146:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800314a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800315a:	f000 80d6 	beq.w	800330a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003164:	f200 80dd 	bhi.w	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800316e:	f000 809f 	beq.w	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003178:	f200 80d3 	bhi.w	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003182:	d05b      	beq.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800318a:	f200 80ca 	bhi.w	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003194:	f000 80b6 	beq.w	8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800319e:	f200 80c0 	bhi.w	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031a8:	f000 8082 	beq.w	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031b2:	f200 80b6 	bhi.w	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031c2:	d03b      	beq.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 80031c4:	e0ad      	b.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80031c6:	4b88      	ldr	r3, [pc, #544]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80031d2:	4b85      	ldr	r3, [pc, #532]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031dc:	4a83      	ldr	r2, [pc, #524]	@ (80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80031de:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	e008      	b.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80031e6:	4b80      	ldr	r3, [pc, #512]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031f0:	4a7f      	ldr	r2, [pc, #508]	@ (80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80031f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f6:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80031f8:	4b7b      	ldr	r3, [pc, #492]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fe:	0e1b      	lsrs	r3, r3, #24
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 8003206:	4b78      	ldr	r3, [pc, #480]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	fb03 f202 	mul.w	r2, r3, r2
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003220:	4b71      	ldr	r3, [pc, #452]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003222:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	3301      	adds	r3, #1
 800322e:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	61fb      	str	r3, [r7, #28]
          break;
 800323a:	e073      	b.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800323c:	4b6a      	ldr	r3, [pc, #424]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003248:	4b67      	ldr	r3, [pc, #412]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800324a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800324e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003252:	4a66      	ldr	r2, [pc, #408]	@ (80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	e008      	b.n	800326e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800325c:	4b62      	ldr	r3, [pc, #392]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003262:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003266:	4a62      	ldr	r2, [pc, #392]	@ (80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800326e:	4b5e      	ldr	r3, [pc, #376]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003274:	0e1b      	lsrs	r3, r3, #24
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 800327c:	4b5a      	ldr	r3, [pc, #360]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800327e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	fb03 f202 	mul.w	r2, r3, r2
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003296:	4b54      	ldr	r3, [pc, #336]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	3301      	adds	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	61fb      	str	r3, [r7, #28]
          break;
 80032ae:	e039      	b.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80032b0:	4b4d      	ldr	r3, [pc, #308]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d108      	bne.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032bc:	4b4a      	ldr	r3, [pc, #296]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032c4:	4a49      	ldr	r2, [pc, #292]	@ (80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	e007      	b.n	80032de <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80032ce:	4b46      	ldr	r3, [pc, #280]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032d6:	4a46      	ldr	r2, [pc, #280]	@ (80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80032de:	4b42      	ldr	r3, [pc, #264]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0f1b      	lsrs	r3, r3, #28
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 80032ea:	4b3f      	ldr	r3, [pc, #252]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	fb03 f202 	mul.w	r2, r3, r2
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	61fb      	str	r3, [r7, #28]
          break;
 8003302:	e00f      	b.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003304:	4b3b      	ldr	r3, [pc, #236]	@ (80033f4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003306:	61fb      	str	r3, [r7, #28]
          break;
 8003308:	e00c      	b.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800330a:	4b37      	ldr	r3, [pc, #220]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003316:	4b35      	ldr	r3, [pc, #212]	@ (80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003318:	61fb      	str	r3, [r7, #28]
          break;
 800331a:	e003      	b.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800331c:	4b34      	ldr	r3, [pc, #208]	@ (80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800331e:	61fb      	str	r3, [r7, #28]
          break;
 8003320:	e000      	b.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003322:	bf00      	nop
        }
      }
      break;
 8003324:	e120      	b.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003326:	4b30      	ldr	r3, [pc, #192]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800332c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8003338:	d079      	beq.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8003340:	f200 8082 	bhi.w	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800334a:	d03c      	beq.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003352:	d879      	bhi.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d006      	beq.n	8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003360:	d172      	bne.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003362:	4b24      	ldr	r3, [pc, #144]	@ (80033f4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003364:	61fb      	str	r3, [r7, #28]
          break;
 8003366:	e072      	b.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003368:	4b1f      	ldr	r3, [pc, #124]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003370:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003374:	d109      	bne.n	800338a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003376:	4b1c      	ldr	r3, [pc, #112]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800337c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003380:	4a1b      	ldr	r2, [pc, #108]	@ (80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	e008      	b.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800338a:	4b17      	ldr	r3, [pc, #92]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800338c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003394:	4a15      	ldr	r2, [pc, #84]	@ (80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003396:	fbb2 f3f3 	udiv	r3, r2, r3
 800339a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800339c:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800339e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80033b0:	4b0d      	ldr	r3, [pc, #52]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b6:	0f1b      	lsrs	r3, r3, #28
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c2:	61fb      	str	r3, [r7, #28]
          break;
 80033c4:	e043      	b.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033c6:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033d2:	d111      	bne.n	80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033d4:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033dc:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e010      	b.n	8003408 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	017d7840 	.word	0x017d7840
 80033f4:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033f8:	4b5f      	ldr	r3, [pc, #380]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003400:	4a5e      	ldr	r2, [pc, #376]	@ (800357c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003402:	fbb2 f3f3 	udiv	r3, r2, r3
 8003406:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003408:	4b5b      	ldr	r3, [pc, #364]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800341a:	4b57      	ldr	r3, [pc, #348]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	0f1b      	lsrs	r3, r3, #28
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	61fb      	str	r3, [r7, #28]
          break;
 800342c:	e00f      	b.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800342e:	4b52      	ldr	r3, [pc, #328]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800343a:	d102      	bne.n	8003442 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800343c:	4b50      	ldr	r3, [pc, #320]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800343e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003440:	e005      	b.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003442:	4b4e      	ldr	r3, [pc, #312]	@ (800357c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003444:	61fb      	str	r3, [r7, #28]
          break;
 8003446:	e002      	b.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
          break;
 800344c:	bf00      	nop
        }
      }
      break;
 800344e:	e08b      	b.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003450:	4b49      	ldr	r3, [pc, #292]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003456:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003462:	d06f      	beq.n	8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800346a:	d878      	bhi.n	800355e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003472:	d03c      	beq.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800347a:	d870      	bhi.n	800355e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003488:	d169      	bne.n	800355e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800348a:	4b3e      	ldr	r3, [pc, #248]	@ (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 800348c:	61fb      	str	r3, [r7, #28]
          break;
 800348e:	e069      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003490:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003498:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800349c:	d109      	bne.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800349e:	4b36      	ldr	r3, [pc, #216]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80034a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a8:	4a35      	ldr	r2, [pc, #212]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	e008      	b.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80034b2:	4b31      	ldr	r3, [pc, #196]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80034b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034bc:	4a2f      	ldr	r2, [pc, #188]	@ (800357c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80034c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80034c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ca:	099b      	lsrs	r3, r3, #6
 80034cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80034d8:	4b27      	ldr	r3, [pc, #156]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80034da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034de:	0f1b      	lsrs	r3, r3, #28
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ea:	61fb      	str	r3, [r7, #28]
          break;
 80034ec:	e03a      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034ee:	4b22      	ldr	r3, [pc, #136]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034fa:	d108      	bne.n	800350e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80034fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003504:	4a1e      	ldr	r2, [pc, #120]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	e007      	b.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800350e:	4b1a      	ldr	r3, [pc, #104]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003516:	4a19      	ldr	r2, [pc, #100]	@ (800357c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800351e:	4b16      	ldr	r3, [pc, #88]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003530:	4b11      	ldr	r3, [pc, #68]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0f1b      	lsrs	r3, r3, #28
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	61fb      	str	r3, [r7, #28]
          break;
 8003542:	e00f      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003544:	4b0c      	ldr	r3, [pc, #48]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003550:	d102      	bne.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003552:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003554:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003556:	e005      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003558:	4b08      	ldr	r3, [pc, #32]	@ (800357c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800355a:	61fb      	str	r3, [r7, #28]
          break;
 800355c:	e002      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
          break;
 8003562:	bf00      	nop
        }
      }
      break;
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 8003566:	bf00      	nop
    }
  }
  return frequency;
 8003568:	69fb      	ldr	r3, [r7, #28]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	@ 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	017d7840 	.word	0x017d7840
 8003584:	00bb8000 	.word	0x00bb8000

08003588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800358c:	b0a6      	sub	sp, #152	@ 0x98
 800358e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ae:	4bc8      	ldr	r3, [pc, #800]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	f200 817e 	bhi.w	80038b8 <HAL_RCC_GetSysClockFreq+0x330>
 80035bc:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035f9 	.word	0x080035f9
 80035c8:	080038b9 	.word	0x080038b9
 80035cc:	080038b9 	.word	0x080038b9
 80035d0:	080038b9 	.word	0x080038b9
 80035d4:	08003601 	.word	0x08003601
 80035d8:	080038b9 	.word	0x080038b9
 80035dc:	080038b9 	.word	0x080038b9
 80035e0:	080038b9 	.word	0x080038b9
 80035e4:	08003609 	.word	0x08003609
 80035e8:	080038b9 	.word	0x080038b9
 80035ec:	080038b9 	.word	0x080038b9
 80035f0:	080038b9 	.word	0x080038b9
 80035f4:	08003773 	.word	0x08003773
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4bb6      	ldr	r3, [pc, #728]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80035fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80035fe:	e15f      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003600:	4bb5      	ldr	r3, [pc, #724]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003606:	e15b      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003608:	4bb1      	ldr	r3, [pc, #708]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003610:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003614:	4bae      	ldr	r3, [pc, #696]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d031      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003620:	4bab      	ldr	r3, [pc, #684]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	2200      	movs	r2, #0
 8003628:	66bb      	str	r3, [r7, #104]	@ 0x68
 800362a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800362c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800362e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003632:	663b      	str	r3, [r7, #96]	@ 0x60
 8003634:	2300      	movs	r3, #0
 8003636:	667b      	str	r3, [r7, #100]	@ 0x64
 8003638:	4ba7      	ldr	r3, [pc, #668]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x350>)
 800363a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800363e:	462a      	mov	r2, r5
 8003640:	fb03 f202 	mul.w	r2, r3, r2
 8003644:	2300      	movs	r3, #0
 8003646:	4621      	mov	r1, r4
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	4aa2      	ldr	r2, [pc, #648]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003650:	4621      	mov	r1, r4
 8003652:	fba1 1202 	umull	r1, r2, r1, r2
 8003656:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003658:	460a      	mov	r2, r1
 800365a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800365c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800365e:	4413      	add	r3, r2
 8003660:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003666:	2200      	movs	r2, #0
 8003668:	65bb      	str	r3, [r7, #88]	@ 0x58
 800366a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800366c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003670:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003674:	f7fc fe1c 	bl	80002b0 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003682:	e064      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003684:	4b92      	ldr	r3, [pc, #584]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	2200      	movs	r2, #0
 800368c:	653b      	str	r3, [r7, #80]	@ 0x50
 800368e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003698:	2300      	movs	r3, #0
 800369a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800369c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80036a0:	4622      	mov	r2, r4
 80036a2:	462b      	mov	r3, r5
 80036a4:	f04f 0000 	mov.w	r0, #0
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	0159      	lsls	r1, r3, #5
 80036ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b2:	0150      	lsls	r0, r2, #5
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4621      	mov	r1, r4
 80036ba:	1a51      	subs	r1, r2, r1
 80036bc:	6139      	str	r1, [r7, #16]
 80036be:	4629      	mov	r1, r5
 80036c0:	eb63 0301 	sbc.w	r3, r3, r1
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036d2:	4659      	mov	r1, fp
 80036d4:	018b      	lsls	r3, r1, #6
 80036d6:	4651      	mov	r1, sl
 80036d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036dc:	4651      	mov	r1, sl
 80036de:	018a      	lsls	r2, r1, #6
 80036e0:	4651      	mov	r1, sl
 80036e2:	ebb2 0801 	subs.w	r8, r2, r1
 80036e6:	4659      	mov	r1, fp
 80036e8:	eb63 0901 	sbc.w	r9, r3, r1
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003700:	4690      	mov	r8, r2
 8003702:	4699      	mov	r9, r3
 8003704:	4623      	mov	r3, r4
 8003706:	eb18 0303 	adds.w	r3, r8, r3
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	462b      	mov	r3, r5
 800370e:	eb49 0303 	adc.w	r3, r9, r3
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003720:	4629      	mov	r1, r5
 8003722:	028b      	lsls	r3, r1, #10
 8003724:	4621      	mov	r1, r4
 8003726:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800372a:	4621      	mov	r1, r4
 800372c:	028a      	lsls	r2, r1, #10
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003736:	2200      	movs	r2, #0
 8003738:	643b      	str	r3, [r7, #64]	@ 0x40
 800373a:	647a      	str	r2, [r7, #68]	@ 0x44
 800373c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003740:	f7fc fdb6 	bl	80002b0 <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4613      	mov	r3, r2
 800374a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800374e:	4b60      	ldr	r3, [pc, #384]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	0c1b      	lsrs	r3, r3, #16
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	3301      	adds	r3, #1
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003760:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003764:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003770:	e0a6      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003772:	4b57      	ldr	r3, [pc, #348]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800377a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800377e:	4b54      	ldr	r3, [pc, #336]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02a      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378a:	4b51      	ldr	r3, [pc, #324]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	099b      	lsrs	r3, r3, #6
 8003790:	2200      	movs	r2, #0
 8003792:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003794:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003798:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800379c:	2100      	movs	r1, #0
 800379e:	4b4e      	ldr	r3, [pc, #312]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80037a0:	fb03 f201 	mul.w	r2, r3, r1
 80037a4:	2300      	movs	r3, #0
 80037a6:	fb00 f303 	mul.w	r3, r0, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	4a4a      	ldr	r2, [pc, #296]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80037ae:	fba0 1202 	umull	r1, r2, r0, r2
 80037b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80037b4:	460a      	mov	r2, r1
 80037b6:	673a      	str	r2, [r7, #112]	@ 0x70
 80037b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037ba:	4413      	add	r3, r2
 80037bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80037be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c2:	2200      	movs	r2, #0
 80037c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037c6:	637a      	str	r2, [r7, #52]	@ 0x34
 80037c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80037cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80037d0:	f7fc fd6e 	bl	80002b0 <__aeabi_uldivmod>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4613      	mov	r3, r2
 80037da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037de:	e05b      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e0:	4b3b      	ldr	r3, [pc, #236]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	099b      	lsrs	r3, r3, #6
 80037e6:	2200      	movs	r2, #0
 80037e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	f04f 0000 	mov.w	r0, #0
 8003804:	f04f 0100 	mov.w	r1, #0
 8003808:	0159      	lsls	r1, r3, #5
 800380a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800380e:	0150      	lsls	r0, r2, #5
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4641      	mov	r1, r8
 8003816:	ebb2 0a01 	subs.w	sl, r2, r1
 800381a:	4649      	mov	r1, r9
 800381c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800382c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003834:	ebb2 040a 	subs.w	r4, r2, sl
 8003838:	eb63 050b 	sbc.w	r5, r3, fp
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	00eb      	lsls	r3, r5, #3
 8003846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800384a:	00e2      	lsls	r2, r4, #3
 800384c:	4614      	mov	r4, r2
 800384e:	461d      	mov	r5, r3
 8003850:	4643      	mov	r3, r8
 8003852:	18e3      	adds	r3, r4, r3
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	464b      	mov	r3, r9
 8003858:	eb45 0303 	adc.w	r3, r5, r3
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800386a:	4629      	mov	r1, r5
 800386c:	028b      	lsls	r3, r1, #10
 800386e:	4621      	mov	r1, r4
 8003870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003874:	4621      	mov	r1, r4
 8003876:	028a      	lsls	r2, r1, #10
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003880:	2200      	movs	r2, #0
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	61fa      	str	r2, [r7, #28]
 8003886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800388a:	f7fc fd11 	bl	80002b0 <__aeabi_uldivmod>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4613      	mov	r3, r2
 8003894:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003898:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	0f1b      	lsrs	r3, r3, #28
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80038a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80038b6:	e003      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b8:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80038ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80038be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3798      	adds	r7, #152	@ 0x98
 80038c8:	46bd      	mov	sp, r7
 80038ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	017d7840 	.word	0x017d7840

080038dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e28d      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8083 	beq.w	8003a02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038fc:	4b94      	ldr	r3, [pc, #592]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b04      	cmp	r3, #4
 8003906:	d019      	beq.n	800393c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003908:	4b91      	ldr	r3, [pc, #580]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003910:	2b08      	cmp	r3, #8
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003914:	4b8e      	ldr	r3, [pc, #568]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800391c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003920:	d00c      	beq.n	800393c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4b8b      	ldr	r3, [pc, #556]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800392a:	2b0c      	cmp	r3, #12
 800392c:	d112      	bne.n	8003954 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392e:	4b88      	ldr	r3, [pc, #544]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003936:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800393a:	d10b      	bne.n	8003954 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	4b84      	ldr	r3, [pc, #528]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d05b      	beq.n	8003a00 <HAL_RCC_OscConfig+0x124>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d157      	bne.n	8003a00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e25a      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800395c:	d106      	bne.n	800396c <HAL_RCC_OscConfig+0x90>
 800395e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a7b      	ldr	r2, [pc, #492]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e01d      	b.n	80039a8 <HAL_RCC_OscConfig+0xcc>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0xb4>
 8003976:	4b76      	ldr	r3, [pc, #472]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a75      	ldr	r2, [pc, #468]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b73      	ldr	r3, [pc, #460]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a72      	ldr	r2, [pc, #456]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0xcc>
 8003990:	4b6f      	ldr	r3, [pc, #444]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a6e      	ldr	r2, [pc, #440]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b6c      	ldr	r3, [pc, #432]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fd fcb4 	bl	800131c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fd fcb0 	bl	800131c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	@ 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e21f      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b61      	ldr	r3, [pc, #388]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0xdc>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fca0 	bl	800131c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fd fc9c 	bl	800131c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	@ 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e20b      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	4b57      	ldr	r3, [pc, #348]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x104>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d06f      	beq.n	8003aee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a0e:	4b50      	ldr	r3, [pc, #320]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d017      	beq.n	8003a4a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a1a:	4b4d      	ldr	r3, [pc, #308]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d105      	bne.n	8003a32 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a26:	4b4a      	ldr	r3, [pc, #296]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a32:	4b47      	ldr	r3, [pc, #284]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d11c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3e:	4b44      	ldr	r3, [pc, #272]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d116      	bne.n	8003a78 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	4b41      	ldr	r3, [pc, #260]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_RCC_OscConfig+0x186>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e1d3      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b3b      	ldr	r3, [pc, #236]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4937      	ldr	r1, [pc, #220]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	e03a      	b.n	8003aee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a80:	4b34      	ldr	r3, [pc, #208]	@ (8003b54 <HAL_RCC_OscConfig+0x278>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fd fc49 	bl	800131c <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8e:	f7fd fc45 	bl	800131c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1b4      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b28      	ldr	r3, [pc, #160]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4925      	ldr	r1, [pc, #148]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac2:	4b24      	ldr	r3, [pc, #144]	@ (8003b54 <HAL_RCC_OscConfig+0x278>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fc28 	bl	800131c <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7fd fc24 	bl	800131c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e193      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d036      	beq.n	8003b68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d016      	beq.n	8003b30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b02:	4b15      	ldr	r3, [pc, #84]	@ (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fd fc08 	bl	800131c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b10:	f7fd fc04 	bl	800131c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e173      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b22:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCC_OscConfig+0x274>)
 8003b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x234>
 8003b2e:	e01b      	b.n	8003b68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b30:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_RCC_OscConfig+0x27c>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fd fbf1 	bl	800131c <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3c:	e00e      	b.n	8003b5c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3e:	f7fd fbed 	bl	800131c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d907      	bls.n	8003b5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e15c      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	42470000 	.word	0x42470000
 8003b58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5c:	4b8a      	ldr	r3, [pc, #552]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ea      	bne.n	8003b3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8097 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7a:	4b83      	ldr	r3, [pc, #524]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10f      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b96:	4b7c      	ldr	r3, [pc, #496]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4b79      	ldr	r3, [pc, #484]	@ (8003d8c <HAL_RCC_OscConfig+0x4b0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb2:	4b76      	ldr	r3, [pc, #472]	@ (8003d8c <HAL_RCC_OscConfig+0x4b0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a75      	ldr	r2, [pc, #468]	@ (8003d8c <HAL_RCC_OscConfig+0x4b0>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7fd fbad 	bl	800131c <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fd fba9 	bl	800131c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e118      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8003d8c <HAL_RCC_OscConfig+0x4b0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x31e>
 8003bec:	4b66      	ldr	r3, [pc, #408]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf0:	4a65      	ldr	r2, [pc, #404]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf8:	e01c      	b.n	8003c34 <HAL_RCC_OscConfig+0x358>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b05      	cmp	r3, #5
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x340>
 8003c02:	4b61      	ldr	r3, [pc, #388]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	4a60      	ldr	r2, [pc, #384]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0e:	4b5e      	ldr	r3, [pc, #376]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	4a5d      	ldr	r2, [pc, #372]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0x358>
 8003c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	4a59      	ldr	r2, [pc, #356]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c28:	4b57      	ldr	r3, [pc, #348]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2c:	4a56      	ldr	r2, [pc, #344]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c2e:	f023 0304 	bic.w	r3, r3, #4
 8003c32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d015      	beq.n	8003c68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fd fb6e 	bl	800131c <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c44:	f7fd fb6a 	bl	800131c <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e0d7      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ee      	beq.n	8003c44 <HAL_RCC_OscConfig+0x368>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fd fb58 	bl	800131c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fd fb54 	bl	800131c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0c1      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c86:	4b40      	ldr	r3, [pc, #256]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1ee      	bne.n	8003c70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b3b      	ldr	r3, [pc, #236]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80ad 	beq.w	8003e08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cae:	4b36      	ldr	r3, [pc, #216]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d060      	beq.n	8003d7c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d145      	bne.n	8003d4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b33      	ldr	r3, [pc, #204]	@ (8003d90 <HAL_RCC_OscConfig+0x4b4>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fb28 	bl	800131c <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fd fb24 	bl	800131c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e093      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce2:	4b29      	ldr	r3, [pc, #164]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	3b01      	subs	r3, #1
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	491b      	ldr	r1, [pc, #108]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d20:	4b1b      	ldr	r3, [pc, #108]	@ (8003d90 <HAL_RCC_OscConfig+0x4b4>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fd faf9 	bl	800131c <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2e:	f7fd faf5 	bl	800131c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e064      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d40:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x452>
 8003d4c:	e05c      	b.n	8003e08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4e:	4b10      	ldr	r3, [pc, #64]	@ (8003d90 <HAL_RCC_OscConfig+0x4b4>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd fae2 	bl	800131c <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fd fade 	bl	800131c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e04d      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_RCC_OscConfig+0x4ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x480>
 8003d7a:	e045      	b.n	8003e08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e040      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d94:	4b1f      	ldr	r3, [pc, #124]	@ (8003e14 <HAL_RCC_OscConfig+0x538>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d030      	beq.n	8003e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d129      	bne.n	8003e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d122      	bne.n	8003e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d119      	bne.n	8003e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d10f      	bne.n	8003e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d107      	bne.n	8003e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800

08003e18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e022      	b.n	8003e70 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d105      	bne.n	8003e42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fd f85d 	bl	8000efc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2203      	movs	r2, #3
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f814 	bl	8003e78 <HAL_SD_InitCard>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00a      	b.n	8003e70 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e78:	b5b0      	push	{r4, r5, r7, lr}
 8003e7a:	b08e      	sub	sp, #56	@ 0x38
 8003e7c:	af04      	add	r7, sp, #16
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003e94:	2376      	movs	r3, #118	@ 0x76
 8003e96:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681d      	ldr	r5, [r3, #0]
 8003e9c:	466c      	mov	r4, sp
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003eaa:	f107 0308 	add.w	r3, r7, #8
 8003eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f001 f93c 	bl	800512e <SDIO_Init>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e04f      	b.n	8003f68 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003ec8:	4b29      	ldr	r3, [pc, #164]	@ (8003f70 <HAL_SD_InitCard+0xf8>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 f974 	bl	80051c0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003ed8:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <HAL_SD_InitCard+0xf8>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003ede:	2002      	movs	r0, #2
 8003ee0:	f7fd fa28 	bl	8001334 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 ff03 	bl	8004cf0 <SD_PowerON>
 8003eea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e02e      	b.n	8003f68 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fe22 	bl	8004b54 <SD_InitCard>
 8003f10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00b      	beq.n	8003f30 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e01b      	b.n	8003f68 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f9d3 	bl	80052e4 <SDMMC_CmdBlockLength>
 8003f3e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00f      	beq.n	8003f66 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f74 <HAL_SD_InitCard+0xfc>)
 8003f4c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3728      	adds	r7, #40	@ 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f70:	422580a0 	.word	0x422580a0
 8003f74:	004005ff 	.word	0x004005ff

08003f78 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b092      	sub	sp, #72	@ 0x48
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f86:	f7fd f9c9 	bl	800131c <HAL_GetTick>
 8003f8a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e1bd      	b.n	8004326 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	f040 81b0 	bne.w	8004318 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003fbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d907      	bls.n	8003fdc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e1a4      	b.n	8004326 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2203      	movs	r2, #3
 8003fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d002      	beq.n	8003ffa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff6:	025b      	lsls	r3, r3, #9
 8003ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ffe:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	025b      	lsls	r3, r3, #9
 8004004:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004006:	2390      	movs	r3, #144	@ 0x90
 8004008:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800400a:	2302      	movs	r3, #2
 800400c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004012:	2301      	movs	r3, #1
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f107 0214 	add.w	r2, r7, #20
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f001 f933 	bl	800528c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d90a      	bls.n	8004042 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2202      	movs	r2, #2
 8004030:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004038:	4618      	mov	r0, r3
 800403a:	f001 f997 	bl	800536c <SDMMC_CmdReadMultiBlock>
 800403e:	6478      	str	r0, [r7, #68]	@ 0x44
 8004040:	e009      	b.n	8004056 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800404e:	4618      	mov	r0, r3
 8004050:	f001 f96a 	bl	8005328 <SDMMC_CmdReadSingleBlock>
 8004054:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004058:	2b00      	cmp	r3, #0
 800405a:	d012      	beq.n	8004082 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a7a      	ldr	r2, [pc, #488]	@ (800424c <HAL_SD_ReadBlocks+0x2d4>)
 8004062:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800406a:	431a      	orrs	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e151      	b.n	8004326 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004086:	e061      	b.n	800414c <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d03c      	beq.n	8004110 <HAL_SD_ReadBlocks+0x198>
 8004096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d039      	beq.n	8004110 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800409c:	2300      	movs	r3, #0
 800409e:	643b      	str	r3, [r7, #64]	@ 0x40
 80040a0:	e033      	b.n	800410a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 f86c 	bl	8005184 <SDIO_ReadFIFO>
 80040ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80040ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80040b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b8:	3301      	adds	r3, #1
 80040ba:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040be:	3b01      	subs	r3, #1
 80040c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80040c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80040cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ce:	3301      	adds	r3, #1
 80040d0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d4:	3b01      	subs	r3, #1
 80040d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80040d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80040e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e4:	3301      	adds	r3, #1
 80040e6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ea:	3b01      	subs	r3, #1
 80040ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80040ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f0:	0e1b      	lsrs	r3, r3, #24
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80040f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040fa:	3301      	adds	r3, #1
 80040fc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004100:	3b01      	subs	r3, #1
 8004102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004106:	3301      	adds	r3, #1
 8004108:	643b      	str	r3, [r7, #64]	@ 0x40
 800410a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800410c:	2b07      	cmp	r3, #7
 800410e:	d9c8      	bls.n	80040a2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004110:	f7fd f904 	bl	800131c <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800411c:	429a      	cmp	r2, r3
 800411e:	d902      	bls.n	8004126 <HAL_SD_ReadBlocks+0x1ae>
 8004120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004122:	2b00      	cmp	r3, #0
 8004124:	d112      	bne.n	800414c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a48      	ldr	r2, [pc, #288]	@ (800424c <HAL_SD_ReadBlocks+0x2d4>)
 800412c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004132:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0ec      	b.n	8004326 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004152:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8004156:	2b00      	cmp	r3, #0
 8004158:	d096      	beq.n	8004088 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d022      	beq.n	80041ae <HAL_SD_ReadBlocks+0x236>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d91f      	bls.n	80041ae <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004172:	2b03      	cmp	r3, #3
 8004174:	d01b      	beq.n	80041ae <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f001 f95c 	bl	8005438 <SDMMC_CmdStopTransfer>
 8004180:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2f      	ldr	r2, [pc, #188]	@ (800424c <HAL_SD_ReadBlocks+0x2d4>)
 800418e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004196:	431a      	orrs	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0bb      	b.n	8004326 <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d012      	beq.n	80041e2 <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a22      	ldr	r2, [pc, #136]	@ (800424c <HAL_SD_ReadBlocks+0x2d4>)
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c8:	f043 0208 	orr.w	r2, r3, #8
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e0a1      	b.n	8004326 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d012      	beq.n	8004216 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a15      	ldr	r2, [pc, #84]	@ (800424c <HAL_SD_ReadBlocks+0x2d4>)
 80041f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fc:	f043 0202 	orr.w	r2, r3, #2
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e087      	b.n	8004326 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d064      	beq.n	80042ee <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a08      	ldr	r2, [pc, #32]	@ (800424c <HAL_SD_ReadBlocks+0x2d4>)
 800422a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	f043 0220 	orr.w	r2, r3, #32
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e06d      	b.n	8004326 <HAL_SD_ReadBlocks+0x3ae>
 800424a:	bf00      	nop
 800424c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 ff95 	bl	8005184 <SDIO_ReadFIFO>
 800425a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800425c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425e:	b2da      	uxtb	r2, r3
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004262:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004266:	3301      	adds	r3, #1
 8004268:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800426a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426c:	3b01      	subs	r3, #1
 800426e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	b2da      	uxtb	r2, r3
 8004276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004278:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800427a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427c:	3301      	adds	r3, #1
 800427e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004282:	3b01      	subs	r3, #1
 8004284:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	b2da      	uxtb	r2, r3
 800428c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004292:	3301      	adds	r3, #1
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004298:	3b01      	subs	r3, #1
 800429a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800429c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429e:	0e1b      	lsrs	r3, r3, #24
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80042a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a8:	3301      	adds	r3, #1
 80042aa:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80042ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ae:	3b01      	subs	r3, #1
 80042b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80042b2:	f7fd f833 	bl	800131c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042be:	429a      	cmp	r2, r3
 80042c0:	d902      	bls.n	80042c8 <HAL_SD_ReadBlocks+0x350>
 80042c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d112      	bne.n	80042ee <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a18      	ldr	r2, [pc, #96]	@ (8004330 <HAL_SD_ReadBlocks+0x3b8>)
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e01b      	b.n	8004326 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_SD_ReadBlocks+0x38a>
 80042fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1a6      	bne.n	8004250 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f240 523a 	movw	r2, #1338	@ 0x53a
 800430a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	e006      	b.n	8004326 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3748      	adds	r7, #72	@ 0x48
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	004005ff 	.word	0x004005ff

08004334 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b092      	sub	sp, #72	@ 0x48
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004342:	f7fc ffeb 	bl	800131c <HAL_GetTick>
 8004346:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d107      	bne.n	8004366 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e165      	b.n	8004632 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	f040 8158 	bne.w	8004624 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800437a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	441a      	add	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004384:	429a      	cmp	r2, r3
 8004386:	d907      	bls.n	8004398 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e14c      	b.n	8004632 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2203      	movs	r2, #3
 800439c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2200      	movs	r2, #0
 80043a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d002      	beq.n	80043b6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80043b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b2:	025b      	lsls	r3, r3, #9
 80043b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043ba:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	025b      	lsls	r3, r3, #9
 80043c0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80043c2:	2390      	movs	r3, #144	@ 0x90
 80043c4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80043c6:	2300      	movs	r3, #0
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80043ce:	2301      	movs	r3, #1
 80043d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f107 0218 	add.w	r2, r7, #24
 80043da:	4611      	mov	r1, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 ff55 	bl	800528c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d90a      	bls.n	80043fe <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fffd 	bl	80053f4 <SDMMC_CmdWriteMultiBlock>
 80043fa:	6478      	str	r0, [r7, #68]	@ 0x44
 80043fc:	e009      	b.n	8004412 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2210      	movs	r2, #16
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800440a:	4618      	mov	r0, r3
 800440c:	f000 ffd0 	bl	80053b0 <SDMMC_CmdWriteSingleBlock>
 8004410:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004414:	2b00      	cmp	r3, #0
 8004416:	d012      	beq.n	800443e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a87      	ldr	r2, [pc, #540]	@ (800463c <HAL_SD_WriteBlocks+0x308>)
 800441e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004426:	431a      	orrs	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e0f9      	b.n	8004632 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004442:	e065      	b.n	8004510 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d040      	beq.n	80044d4 <HAL_SD_WriteBlocks+0x1a0>
 8004452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d03d      	beq.n	80044d4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004458:	2300      	movs	r3, #0
 800445a:	643b      	str	r3, [r7, #64]	@ 0x40
 800445c:	e037      	b.n	80044ce <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800445e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	3301      	adds	r3, #1
 8004468:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800446a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446c:	3b01      	subs	r3, #1
 800446e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	021a      	lsls	r2, r3, #8
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800447c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447e:	3301      	adds	r3, #1
 8004480:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004484:	3b01      	subs	r3, #1
 8004486:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	041a      	lsls	r2, r3, #16
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004496:	3301      	adds	r3, #1
 8004498:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800449a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800449c:	3b01      	subs	r3, #1
 800449e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80044a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	061a      	lsls	r2, r3, #24
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80044ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ae:	3301      	adds	r3, #1
 80044b0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80044b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b4:	3b01      	subs	r3, #1
 80044b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f107 0214 	add.w	r2, r7, #20
 80044c0:	4611      	mov	r1, r2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fe6b 	bl	800519e <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80044c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ca:	3301      	adds	r3, #1
 80044cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044d0:	2b07      	cmp	r3, #7
 80044d2:	d9c4      	bls.n	800445e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80044d4:	f7fc ff22 	bl	800131c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d902      	bls.n	80044ea <HAL_SD_WriteBlocks+0x1b6>
 80044e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d112      	bne.n	8004510 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a53      	ldr	r2, [pc, #332]	@ (800463c <HAL_SD_WriteBlocks+0x308>)
 80044f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f8:	431a      	orrs	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e090      	b.n	8004632 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004516:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800451a:	2b00      	cmp	r3, #0
 800451c:	d092      	beq.n	8004444 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d022      	beq.n	8004572 <HAL_SD_WriteBlocks+0x23e>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d91f      	bls.n	8004572 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	2b03      	cmp	r3, #3
 8004538:	d01b      	beq.n	8004572 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 ff7a 	bl	8005438 <SDMMC_CmdStopTransfer>
 8004544:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004548:	2b00      	cmp	r3, #0
 800454a:	d012      	beq.n	8004572 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3a      	ldr	r2, [pc, #232]	@ (800463c <HAL_SD_WriteBlocks+0x308>)
 8004552:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800455a:	431a      	orrs	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e05f      	b.n	8004632 <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d012      	beq.n	80045a6 <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2d      	ldr	r2, [pc, #180]	@ (800463c <HAL_SD_WriteBlocks+0x308>)
 8004586:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	f043 0208 	orr.w	r2, r3, #8
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e045      	b.n	8004632 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d012      	beq.n	80045da <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a20      	ldr	r2, [pc, #128]	@ (800463c <HAL_SD_WriteBlocks+0x308>)
 80045ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c0:	f043 0202 	orr.w	r2, r3, #2
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e02b      	b.n	8004632 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d012      	beq.n	800460e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a13      	ldr	r2, [pc, #76]	@ (800463c <HAL_SD_WriteBlocks+0x308>)
 80045ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f4:	f043 0210 	orr.w	r2, r3, #16
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e011      	b.n	8004632 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004616:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	e006      	b.n	8004632 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
  }
}
 8004632:	4618      	mov	r0, r3
 8004634:	3748      	adds	r7, #72	@ 0x48
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	004005ff 	.word	0x004005ff

08004640 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800464e:	0f9b      	lsrs	r3, r3, #30
 8004650:	b2da      	uxtb	r2, r3
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800465a:	0e9b      	lsrs	r3, r3, #26
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	b2da      	uxtb	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800466c:	0e1b      	lsrs	r3, r3, #24
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	b2da      	uxtb	r2, r3
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	b2da      	uxtb	r2, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	b2da      	uxtb	r2, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004696:	b2da      	uxtb	r2, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046a0:	0d1b      	lsrs	r3, r3, #20
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046be:	0bdb      	lsrs	r3, r3, #15
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046d0:	0b9b      	lsrs	r3, r3, #14
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046e2:	0b5b      	lsrs	r3, r3, #13
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046f4:	0b1b      	lsrs	r3, r3, #12
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470c:	2b00      	cmp	r3, #0
 800470e:	d163      	bne.n	80047d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004714:	009a      	lsls	r2, r3, #2
 8004716:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800471a:	4013      	ands	r3, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004720:	0f92      	lsrs	r2, r2, #30
 8004722:	431a      	orrs	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800472c:	0edb      	lsrs	r3, r3, #27
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	b2da      	uxtb	r2, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800473e:	0e1b      	lsrs	r3, r3, #24
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	b2da      	uxtb	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004750:	0d5b      	lsrs	r3, r3, #21
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	b2da      	uxtb	r2, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004762:	0c9b      	lsrs	r3, r3, #18
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	b2da      	uxtb	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004774:	0bdb      	lsrs	r3, r3, #15
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	b2da      	uxtb	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	7e1b      	ldrb	r3, [r3, #24]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	3302      	adds	r3, #2
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80047a2:	fb03 f202 	mul.w	r2, r3, r2
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	7a1b      	ldrb	r3, [r3, #8]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	2201      	movs	r2, #1
 80047b6:	409a      	lsls	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80047c4:	0a52      	lsrs	r2, r2, #9
 80047c6:	fb03 f202 	mul.w	r2, r3, r2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80047d6:	e031      	b.n	800483c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d11d      	bne.n	800481c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047e4:	041b      	lsls	r3, r3, #16
 80047e6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ee:	0c1b      	lsrs	r3, r3, #16
 80047f0:	431a      	orrs	r2, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	3301      	adds	r3, #1
 80047fc:	029a      	lsls	r2, r3, #10
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004810:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	661a      	str	r2, [r3, #96]	@ 0x60
 800481a:	e00f      	b.n	800483c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a58      	ldr	r2, [pc, #352]	@ (8004984 <HAL_SD_GetCardCSD+0x344>)
 8004822:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e09d      	b.n	8004978 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004840:	0b9b      	lsrs	r3, r3, #14
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	b2da      	uxtb	r2, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004852:	09db      	lsrs	r3, r3, #7
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800485a:	b2da      	uxtb	r2, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800486a:	b2da      	uxtb	r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004874:	0fdb      	lsrs	r3, r3, #31
 8004876:	b2da      	uxtb	r2, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004880:	0f5b      	lsrs	r3, r3, #29
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	b2da      	uxtb	r2, r3
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004892:	0e9b      	lsrs	r3, r3, #26
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	b2da      	uxtb	r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a4:	0d9b      	lsrs	r3, r3, #22
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b6:	0d5b      	lsrs	r3, r3, #21
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	0bdb      	lsrs	r3, r3, #15
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fa:	0b9b      	lsrs	r3, r3, #14
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	b2da      	uxtb	r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490e:	0b5b      	lsrs	r3, r3, #13
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	b2da      	uxtb	r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004922:	0b1b      	lsrs	r3, r3, #12
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004936:	0a9b      	lsrs	r3, r3, #10
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	b2da      	uxtb	r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	b2da      	uxtb	r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004966:	b2da      	uxtb	r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	004005ff 	.word	0x004005ff

08004988 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80049e0:	b5b0      	push	{r4, r5, r7, lr}
 80049e2:	b08e      	sub	sp, #56	@ 0x38
 80049e4:	af04      	add	r7, sp, #16
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2203      	movs	r2, #3
 80049f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d02e      	beq.n	8004a5e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a06:	d106      	bne.n	8004a16 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a14:	e029      	b.n	8004a6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a1c:	d10a      	bne.n	8004a34 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fa1c 	bl	8004e5c <SD_WideBus_Enable>
 8004a24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a32:	e01a      	b.n	8004a6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10a      	bne.n	8004a50 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa59 	bl	8004ef2 <SD_WideBus_Disable>
 8004a40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a4e:	e00c      	b.n	8004a6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a54:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a5c:	e005      	b.n	8004a6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a26      	ldr	r2, [pc, #152]	@ (8004b10 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004a78:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004a88:	e01f      	b.n	8004aca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681d      	ldr	r5, [r3, #0]
 8004ab0:	466c      	mov	r4, sp
 8004ab2:	f107 0314 	add.w	r3, r7, #20
 8004ab6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004abe:	f107 0308 	add.w	r3, r7, #8
 8004ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f000 fb32 	bl	800512e <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fc06 	bl	80052e4 <SDMMC_CmdBlockLength>
 8004ad8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00c      	beq.n	8004afa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8004b10 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004b02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3728      	adds	r7, #40	@ 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	004005ff 	.word	0x004005ff

08004b14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f970 	bl	8004e0c <SD_SendStatus>
 8004b2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	0a5b      	lsrs	r3, r3, #9
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004b4a:	693b      	ldr	r3, [r7, #16]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b54:	b5b0      	push	{r4, r5, r7, lr}
 8004b56:	b094      	sub	sp, #80	@ 0x50
 8004b58:	af04      	add	r7, sp, #16
 8004b5a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fb39 	bl	80051dc <SDIO_GetPowerState>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b70:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004b74:	e0b8      	b.n	8004ce8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d02f      	beq.n	8004bde <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fd62 	bl	800564c <SDMMC_CmdSendCID>
 8004b88:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <SD_InitCard+0x40>
    {
      return errorstate;
 8004b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b92:	e0a9      	b.n	8004ce8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fb63 	bl	8005266 <SDIO_GetResponse>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2104      	movs	r1, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fb5a 	bl	8005266 <SDIO_GetResponse>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2108      	movs	r1, #8
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fb51 	bl	8005266 <SDIO_GetResponse>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	210c      	movs	r1, #12
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fb48 	bl	8005266 <SDIO_GetResponse>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d00d      	beq.n	8004c02 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f107 020e 	add.w	r2, r7, #14
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fd68 	bl	80056c6 <SDMMC_CmdSetRelAdd>
 8004bf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <SD_InitCard+0xae>
    {
      return errorstate;
 8004bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c00:	e072      	b.n	8004ce8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d036      	beq.n	8004c78 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004c0a:	89fb      	ldrh	r3, [r7, #14]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f000 fd32 	bl	8005688 <SDMMC_CmdSendCSD>
 8004c24:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2e:	e05b      	b.n	8004ce8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2100      	movs	r1, #0
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fb15 	bl	8005266 <SDIO_GetResponse>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2104      	movs	r1, #4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fb0c 	bl	8005266 <SDIO_GetResponse>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2108      	movs	r1, #8
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fb03 	bl	8005266 <SDIO_GetResponse>
 8004c60:	4602      	mov	r2, r0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	210c      	movs	r1, #12
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fafa 	bl	8005266 <SDIO_GetResponse>
 8004c72:	4602      	mov	r2, r0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 faf1 	bl	8005266 <SDIO_GetResponse>
 8004c84:	4603      	mov	r3, r0
 8004c86:	0d1a      	lsrs	r2, r3, #20
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004c8c:	f107 0310 	add.w	r3, r7, #16
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fcd4 	bl	8004640 <HAL_SD_GetCardCSD>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004ca2:	e021      	b.n	8004ce8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6819      	ldr	r1, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	2200      	movs	r2, #0
 8004cb0:	461c      	mov	r4, r3
 8004cb2:	4615      	mov	r5, r2
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	4608      	mov	r0, r1
 8004cba:	f000 fbdf 	bl	800547c <SDMMC_CmdSelDesel>
 8004cbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <SD_InitCard+0x176>
  {
    return errorstate;
 8004cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc8:	e00e      	b.n	8004ce8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681d      	ldr	r5, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	466c      	mov	r4, sp
 8004cd2:	f103 0210 	add.w	r2, r3, #16
 8004cd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004cdc:	3304      	adds	r3, #4
 8004cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f000 fa24 	bl	800512e <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3740      	adds	r7, #64	@ 0x40
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bdb0      	pop	{r4, r5, r7, pc}

08004cf0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fbda 	bl	80054c2 <SDMMC_CmdGoIdleState>
 8004d0e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	e072      	b.n	8004e00 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fbed 	bl	80054fe <SDMMC_CmdOperCond>
 8004d24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00d      	beq.n	8004d48 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fbc3 	bl	80054c2 <SDMMC_CmdGoIdleState>
 8004d3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	e05b      	b.n	8004e00 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d137      	bne.n	8004dc6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fbed 	bl	800553c <SDMMC_CmdAppCommand>
 8004d62:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d02d      	beq.n	8004dc6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d6a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d6e:	e047      	b.n	8004e00 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fbe0 	bl	800553c <SDMMC_CmdAppCommand>
 8004d7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <SD_PowerON+0x98>
    {
      return errorstate;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	e03b      	b.n	8004e00 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	491e      	ldr	r1, [pc, #120]	@ (8004e08 <SD_PowerON+0x118>)
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fbf6 	bl	8005580 <SDMMC_CmdAppOperCommand>
 8004d94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d9c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004da0:	e02e      	b.n	8004e00 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2100      	movs	r1, #0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fa5c 	bl	8005266 <SDIO_GetResponse>
 8004dae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	0fdb      	lsrs	r3, r3, #31
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <SD_PowerON+0xcc>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <SD_PowerON+0xce>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	613b      	str	r3, [r7, #16]

    count++;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d802      	bhi.n	8004dd6 <SD_PowerON+0xe6>
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0cc      	beq.n	8004d70 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d902      	bls.n	8004de6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004de0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004de4:	e00c      	b.n	8004e00 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004df6:	e002      	b.n	8004dfe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	c1100000 	.word	0xc1100000

08004e0c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004e1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e20:	e018      	b.n	8004e54 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f000 fc6a 	bl	8005708 <SDMMC_CmdSendStatus>
 8004e34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	e009      	b.n	8004e54 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fa0d 	bl	8005266 <SDIO_GetResponse>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f9f7 	bl	8005266 <SDIO_GetResponse>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e82:	d102      	bne.n	8004e8a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004e84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e88:	e02f      	b.n	8004eea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004e8a:	f107 030c 	add.w	r3, r7, #12
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f879 	bl	8004f88 <SD_FindSCR>
 8004e96:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	e023      	b.n	8004eea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01c      	beq.n	8004ee6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f000 fb3f 	bl	800553c <SDMMC_CmdAppCommand>
 8004ebe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	e00f      	b.n	8004eea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2102      	movs	r1, #2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fb78 	bl	80055c6 <SDMMC_CmdBusWidth>
 8004ed6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	e003      	b.n	8004eea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e001      	b.n	8004eea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ee6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f9ac 	bl	8005266 <SDIO_GetResponse>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f18:	d102      	bne.n	8004f20 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004f1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f1e:	e02f      	b.n	8004f80 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004f20:	f107 030c 	add.w	r3, r7, #12
 8004f24:	4619      	mov	r1, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f82e 	bl	8004f88 <SD_FindSCR>
 8004f2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	e023      	b.n	8004f80 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01c      	beq.n	8004f7c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f000 faf4 	bl	800553c <SDMMC_CmdAppCommand>
 8004f54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	e00f      	b.n	8004f80 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fb2d 	bl	80055c6 <SDMMC_CmdBusWidth>
 8004f6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	e003      	b.n	8004f80 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e001      	b.n	8004f80 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004f7c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b08f      	sub	sp, #60	@ 0x3c
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004f92:	f7fc f9c3 	bl	800131c <HAL_GetTick>
 8004f96:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2108      	movs	r1, #8
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 f998 	bl	80052e4 <SDMMC_CmdBlockLength>
 8004fb4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbe:	e0b2      	b.n	8005126 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f000 fab5 	bl	800553c <SDMMC_CmdAppCommand>
 8004fd2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <SD_FindSCR+0x56>
  {
    return errorstate;
 8004fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fdc:	e0a3      	b.n	8005126 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004fe2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004fe4:	2308      	movs	r3, #8
 8004fe6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004fe8:	2330      	movs	r3, #48	@ 0x30
 8004fea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004fec:	2302      	movs	r3, #2
 8004fee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f107 0210 	add.w	r2, r7, #16
 8005000:	4611      	mov	r1, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f942 	bl	800528c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fafc 	bl	800560a <SDMMC_CmdSendSCR>
 8005012:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	2b00      	cmp	r3, #0
 8005018:	d02a      	beq.n	8005070 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	e083      	b.n	8005126 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00f      	beq.n	800504c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6819      	ldr	r1, [r3, #0]
 8005030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	f107 0208 	add.w	r2, r7, #8
 8005038:	18d4      	adds	r4, r2, r3
 800503a:	4608      	mov	r0, r1
 800503c:	f000 f8a2 	bl	8005184 <SDIO_ReadFIFO>
 8005040:	4603      	mov	r3, r0
 8005042:	6023      	str	r3, [r4, #0]
      index++;
 8005044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005046:	3301      	adds	r3, #1
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
 800504a:	e006      	b.n	800505a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d012      	beq.n	8005080 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800505a:	f7fc f95f 	bl	800131c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005068:	d102      	bne.n	8005070 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800506a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800506e:	e05a      	b.n	8005126 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005076:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0cf      	beq.n	800501e <SD_FindSCR+0x96>
 800507e:	e000      	b.n	8005082 <SD_FindSCR+0xfa>
      break;
 8005080:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2208      	movs	r2, #8
 8005096:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005098:	2308      	movs	r3, #8
 800509a:	e044      	b.n	8005126 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2202      	movs	r2, #2
 80050b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80050b2:	2302      	movs	r3, #2
 80050b4:	e037      	b.n	8005126 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2220      	movs	r2, #32
 80050ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80050cc:	2320      	movs	r3, #32
 80050ce:	e02a      	b.n	8005126 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80050d8:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	061a      	lsls	r2, r3, #24
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80050e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80050f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	0e1b      	lsrs	r3, r3, #24
 80050f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80050f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fa:	601a      	str	r2, [r3, #0]
    scr++;
 80050fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fe:	3304      	adds	r3, #4
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	061a      	lsls	r2, r3, #24
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800510e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	0a1b      	lsrs	r3, r3, #8
 8005114:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005118:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	0e1b      	lsrs	r3, r3, #24
 800511e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	373c      	adds	r7, #60	@ 0x3c
 800512a:	46bd      	mov	sp, r7
 800512c:	bd90      	pop	{r4, r7, pc}

0800512e <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800512e:	b084      	sub	sp, #16
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	f107 001c 	add.w	r0, r7, #28
 800513c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005144:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005146:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005148:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800514c:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800514e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005150:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005154:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005158:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005168:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	b004      	add	sp, #16
 8005182:	4770      	bx	lr

08005184 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2203      	movs	r2, #3
 80051cc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0303 	and.w	r3, r3, #3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005216:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800521c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005222:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005232:	f023 030f 	bic.w	r3, r3, #15
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	b2db      	uxtb	r3, r3
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3314      	adds	r3, #20
 8005274:	461a      	mov	r2, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	4413      	add	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
}  
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80052b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80052b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80052be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ca:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0

}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80052f2:	2310      	movs	r3, #16
 80052f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052f6:	2340      	movs	r3, #64	@ 0x40
 80052f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff ff74 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005314:	2110      	movs	r1, #16
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa18 	bl	800574c <SDMMC_GetCmdResp1>
 800531c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800531e:	69fb      	ldr	r3, [r7, #28]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3720      	adds	r7, #32
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005336:	2311      	movs	r3, #17
 8005338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800533a:	2340      	movs	r3, #64	@ 0x40
 800533c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005346:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005348:	f107 0308 	add.w	r3, r7, #8
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff ff52 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005358:	2111      	movs	r1, #17
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f9f6 	bl	800574c <SDMMC_GetCmdResp1>
 8005360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005362:	69fb      	ldr	r3, [r7, #28]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3720      	adds	r7, #32
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800537a:	2312      	movs	r3, #18
 800537c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800537e:	2340      	movs	r3, #64	@ 0x40
 8005380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800538a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800538c:	f107 0308 	add.w	r3, r7, #8
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff ff30 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539c:	2112      	movs	r1, #18
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f9d4 	bl	800574c <SDMMC_GetCmdResp1>
 80053a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053a6:	69fb      	ldr	r3, [r7, #28]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80053be:	2318      	movs	r3, #24
 80053c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053c2:	2340      	movs	r3, #64	@ 0x40
 80053c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053d0:	f107 0308 	add.w	r3, r7, #8
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff ff0e 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80053dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e0:	2118      	movs	r1, #24
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f9b2 	bl	800574c <SDMMC_GetCmdResp1>
 80053e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053ea:	69fb      	ldr	r3, [r7, #28]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005402:	2319      	movs	r3, #25
 8005404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005406:	2340      	movs	r3, #64	@ 0x40
 8005408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800540e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005412:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005414:	f107 0308 	add.w	r3, r7, #8
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff feec 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005424:	2119      	movs	r1, #25
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f990 	bl	800574c <SDMMC_GetCmdResp1>
 800542c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800542e:	69fb      	ldr	r3, [r7, #28]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005444:	230c      	movs	r3, #12
 8005446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005448:	2340      	movs	r3, #64	@ 0x40
 800544a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005454:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005456:	f107 0308 	add.w	r3, r7, #8
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fecb 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005462:	4a05      	ldr	r2, [pc, #20]	@ (8005478 <SDMMC_CmdStopTransfer+0x40>)
 8005464:	210c      	movs	r1, #12
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f970 	bl	800574c <SDMMC_GetCmdResp1>
 800546c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800546e:	69fb      	ldr	r3, [r7, #28]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	05f5e100 	.word	0x05f5e100

0800547c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08a      	sub	sp, #40	@ 0x28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800548c:	2307      	movs	r3, #7
 800548e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005490:	2340      	movs	r3, #64	@ 0x40
 8005492:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005498:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800549c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800549e:	f107 0310 	add.w	r3, r7, #16
 80054a2:	4619      	mov	r1, r3
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fea7 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80054aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ae:	2107      	movs	r1, #7
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f94b 	bl	800574c <SDMMC_GetCmdResp1>
 80054b6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3728      	adds	r7, #40	@ 0x28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b088      	sub	sp, #32
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80054d2:	2300      	movs	r3, #0
 80054d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054e0:	f107 0308 	add.w	r3, r7, #8
 80054e4:	4619      	mov	r1, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff fe86 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fb65 	bl	8005bbc <SDMMC_GetCmdError>
 80054f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f4:	69fb      	ldr	r3, [r7, #28]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005506:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800550a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800550c:	2308      	movs	r3, #8
 800550e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005510:	2340      	movs	r3, #64	@ 0x40
 8005512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800551c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800551e:	f107 0308 	add.w	r3, r7, #8
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fe67 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 faf8 	bl	8005b20 <SDMMC_GetCmdResp7>
 8005530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005532:	69fb      	ldr	r3, [r7, #28]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800554a:	2337      	movs	r3, #55	@ 0x37
 800554c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800554e:	2340      	movs	r3, #64	@ 0x40
 8005550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800555a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800555c:	f107 0308 	add.w	r3, r7, #8
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff fe48 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556c:	2137      	movs	r1, #55	@ 0x37
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f8ec 	bl	800574c <SDMMC_GetCmdResp1>
 8005574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005576:	69fb      	ldr	r3, [r7, #28]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005596:	2329      	movs	r3, #41	@ 0x29
 8005598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800559a:	2340      	movs	r3, #64	@ 0x40
 800559c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800559e:	2300      	movs	r3, #0
 80055a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055a8:	f107 0308 	add.w	r3, r7, #8
 80055ac:	4619      	mov	r1, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff fe22 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f9ff 	bl	80059b8 <SDMMC_GetCmdResp3>
 80055ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055bc:	69fb      	ldr	r3, [r7, #28]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3720      	adds	r7, #32
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b088      	sub	sp, #32
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80055d4:	2306      	movs	r3, #6
 80055d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055d8:	2340      	movs	r3, #64	@ 0x40
 80055da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055e6:	f107 0308 	add.w	r3, r7, #8
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff fe03 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80055f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f6:	2106      	movs	r1, #6
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f8a7 	bl	800574c <SDMMC_GetCmdResp1>
 80055fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005600:	69fb      	ldr	r3, [r7, #28]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b088      	sub	sp, #32
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005616:	2333      	movs	r3, #51	@ 0x33
 8005618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800561a:	2340      	movs	r3, #64	@ 0x40
 800561c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005626:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005628:	f107 0308 	add.w	r3, r7, #8
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fde2 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005638:	2133      	movs	r1, #51	@ 0x33
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f886 	bl	800574c <SDMMC_GetCmdResp1>
 8005640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005642:	69fb      	ldr	r3, [r7, #28]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005658:	2302      	movs	r3, #2
 800565a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800565c:	23c0      	movs	r3, #192	@ 0xc0
 800565e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005664:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005668:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800566a:	f107 0308 	add.w	r3, r7, #8
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff fdc1 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f956 	bl	8005928 <SDMMC_GetCmdResp2>
 800567c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800567e:	69fb      	ldr	r3, [r7, #28]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005696:	2309      	movs	r3, #9
 8005698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800569a:	23c0      	movs	r3, #192	@ 0xc0
 800569c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fda2 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f937 	bl	8005928 <SDMMC_GetCmdResp2>
 80056ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056bc:	69fb      	ldr	r3, [r7, #28]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b088      	sub	sp, #32
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80056d4:	2303      	movs	r3, #3
 80056d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056d8:	2340      	movs	r3, #64	@ 0x40
 80056da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff fd83 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	2103      	movs	r1, #3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f99c 	bl	8005a34 <SDMMC_GetCmdResp6>
 80056fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056fe:	69fb      	ldr	r3, [r7, #28]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005716:	230d      	movs	r3, #13
 8005718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800571a:	2340      	movs	r3, #64	@ 0x40
 800571c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005726:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005728:	f107 0308 	add.w	r3, r7, #8
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fd62 	bl	80051f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005738:	210d      	movs	r1, #13
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f806 	bl	800574c <SDMMC_GetCmdResp1>
 8005740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005742:	69fb      	ldr	r3, [r7, #28]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	460b      	mov	r3, r1
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800575a:	4b70      	ldr	r3, [pc, #448]	@ (800591c <SDMMC_GetCmdResp1+0x1d0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a70      	ldr	r2, [pc, #448]	@ (8005920 <SDMMC_GetCmdResp1+0x1d4>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	0a5a      	lsrs	r2, r3, #9
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	fb02 f303 	mul.w	r3, r2, r3
 800576c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	1e5a      	subs	r2, r3, #1
 8005772:	61fa      	str	r2, [r7, #28]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005778:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800577c:	e0c9      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005782:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ef      	beq.n	800576e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ea      	bne.n	800576e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d004      	beq.n	80057ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2204      	movs	r2, #4
 80057a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057aa:	2304      	movs	r3, #4
 80057ac:	e0b1      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0a6      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	22c5      	movs	r2, #197	@ 0xc5
 80057c8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff fd3e 	bl	800524c <SDIO_GetCommandResponse>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	7afb      	ldrb	r3, [r7, #11]
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d001      	beq.n	80057de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057da:	2301      	movs	r3, #1
 80057dc:	e099      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80057de:	2100      	movs	r1, #0
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7ff fd40 	bl	8005266 <SDIO_GetResponse>
 80057e6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4b4e      	ldr	r3, [pc, #312]	@ (8005924 <SDMMC_GetCmdResp1+0x1d8>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e08d      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	da02      	bge.n	8005802 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80057fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005800:	e087      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800580c:	2340      	movs	r3, #64	@ 0x40
 800580e:	e080      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800581a:	2380      	movs	r3, #128	@ 0x80
 800581c:	e079      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800582c:	e071      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005838:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800583c:	e069      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800584c:	e061      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005858:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800585c:	e059      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800586c:	e051      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800587c:	e049      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005888:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800588c:	e041      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800589c:	e039      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80058a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058ac:	e031      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80058b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80058bc:	e029      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80058c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80058cc:	e021      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80058d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80058dc:	e019      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80058e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80058ec:	e011      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80058f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80058fc:	e009      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005908:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800590c:	e001      	b.n	8005912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800590e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	2000003c 	.word	0x2000003c
 8005920:	10624dd3 	.word	0x10624dd3
 8005924:	fdffe008 	.word	0xfdffe008

08005928 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005930:	4b1f      	ldr	r3, [pc, #124]	@ (80059b0 <SDMMC_GetCmdResp2+0x88>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1f      	ldr	r2, [pc, #124]	@ (80059b4 <SDMMC_GetCmdResp2+0x8c>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	0a5b      	lsrs	r3, r3, #9
 800593c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005940:	fb02 f303 	mul.w	r3, r2, r3
 8005944:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1e5a      	subs	r2, r3, #1
 800594a:	60fa      	str	r2, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005950:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005954:	e026      	b.n	80059a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0ef      	beq.n	8005946 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1ea      	bne.n	8005946 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2204      	movs	r2, #4
 8005980:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005982:	2304      	movs	r3, #4
 8005984:	e00e      	b.n	80059a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005998:	2301      	movs	r3, #1
 800599a:	e003      	b.n	80059a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	22c5      	movs	r2, #197	@ 0xc5
 80059a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	2000003c 	.word	0x2000003c
 80059b4:	10624dd3 	.word	0x10624dd3

080059b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059c0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a2c <SDMMC_GetCmdResp3+0x74>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a30 <SDMMC_GetCmdResp3+0x78>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	0a5b      	lsrs	r3, r3, #9
 80059cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d0:	fb02 f303 	mul.w	r3, r2, r3
 80059d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1e5a      	subs	r2, r3, #1
 80059da:	60fa      	str	r2, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80059e4:	e01b      	b.n	8005a1e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0ef      	beq.n	80059d6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1ea      	bne.n	80059d6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2204      	movs	r2, #4
 8005a10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a12:	2304      	movs	r3, #4
 8005a14:	e003      	b.n	8005a1e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	22c5      	movs	r2, #197	@ 0xc5
 8005a1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	2000003c 	.word	0x2000003c
 8005a30:	10624dd3 	.word	0x10624dd3

08005a34 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a42:	4b35      	ldr	r3, [pc, #212]	@ (8005b18 <SDMMC_GetCmdResp6+0xe4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a35      	ldr	r2, [pc, #212]	@ (8005b1c <SDMMC_GetCmdResp6+0xe8>)
 8005a48:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4c:	0a5b      	lsrs	r3, r3, #9
 8005a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a52:	fb02 f303 	mul.w	r3, r2, r3
 8005a56:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	1e5a      	subs	r2, r3, #1
 8005a5c:	61fa      	str	r2, [r7, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d102      	bne.n	8005a68 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a62:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005a66:	e052      	b.n	8005b0e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0ef      	beq.n	8005a58 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1ea      	bne.n	8005a58 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d004      	beq.n	8005a98 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2204      	movs	r2, #4
 8005a92:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a94:	2304      	movs	r3, #4
 8005a96:	e03a      	b.n	8005b0e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d004      	beq.n	8005aae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e02f      	b.n	8005b0e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff fbcc 	bl	800524c <SDIO_GetCommandResponse>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	7afb      	ldrb	r3, [r7, #11]
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d001      	beq.n	8005ac2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e025      	b.n	8005b0e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	22c5      	movs	r2, #197	@ 0xc5
 8005ac6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff fbcb 	bl	8005266 <SDIO_GetResponse>
 8005ad0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	0c1b      	lsrs	r3, r3, #16
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e011      	b.n	8005b0e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005af8:	e009      	b.n	8005b0e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b08:	e001      	b.n	8005b0e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	2000003c 	.word	0x2000003c
 8005b1c:	10624dd3 	.word	0x10624dd3

08005b20 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b28:	4b22      	ldr	r3, [pc, #136]	@ (8005bb4 <SDMMC_GetCmdResp7+0x94>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a22      	ldr	r2, [pc, #136]	@ (8005bb8 <SDMMC_GetCmdResp7+0x98>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	0a5b      	lsrs	r3, r3, #9
 8005b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b38:	fb02 f303 	mul.w	r3, r2, r3
 8005b3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	60fa      	str	r2, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b4c:	e02c      	b.n	8005ba8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0ef      	beq.n	8005b3e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1ea      	bne.n	8005b3e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2204      	movs	r2, #4
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b7a:	2304      	movs	r3, #4
 8005b7c:	e014      	b.n	8005ba8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e009      	b.n	8005ba8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2240      	movs	r2, #64	@ 0x40
 8005ba4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005ba6:	2300      	movs	r3, #0
  
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	2000003c 	.word	0x2000003c
 8005bb8:	10624dd3 	.word	0x10624dd3

08005bbc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bc4:	4b11      	ldr	r3, [pc, #68]	@ (8005c0c <SDMMC_GetCmdError+0x50>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a11      	ldr	r2, [pc, #68]	@ (8005c10 <SDMMC_GetCmdError+0x54>)
 8005bca:	fba2 2303 	umull	r2, r3, r2, r3
 8005bce:	0a5b      	lsrs	r3, r3, #9
 8005bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bd4:	fb02 f303 	mul.w	r3, r2, r3
 8005bd8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1e5a      	subs	r2, r3, #1
 8005bde:	60fa      	str	r2, [r7, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005be4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005be8:	e009      	b.n	8005bfe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f1      	beq.n	8005bda <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	22c5      	movs	r2, #197	@ 0xc5
 8005bfa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	2000003c 	.word	0x2000003c
 8005c10:	10624dd3 	.word	0x10624dd3

08005c14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005c18:	4904      	ldr	r1, [pc, #16]	@ (8005c2c <MX_FATFS_Init+0x18>)
 8005c1a:	4805      	ldr	r0, [pc, #20]	@ (8005c30 <MX_FATFS_Init+0x1c>)
 8005c1c:	f002 fd08 	bl	8008630 <FATFS_LinkDriver>
 8005c20:	4603      	mov	r3, r0
 8005c22:	461a      	mov	r2, r3
 8005c24:	4b03      	ldr	r3, [pc, #12]	@ (8005c34 <MX_FATFS_Init+0x20>)
 8005c26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c28:	bf00      	nop
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20001438 	.word	0x20001438
 8005c30:	0800970c 	.word	0x0800970c
 8005c34:	20001434 	.word	0x20001434

08005c38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005c3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005c52:	f000 f879 	bl	8005d48 <BSP_SD_IsDetected>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d001      	beq.n	8005c60 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e012      	b.n	8005c86 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005c60:	480b      	ldr	r0, [pc, #44]	@ (8005c90 <BSP_SD_Init+0x48>)
 8005c62:	f7fe f8d9 	bl	8003e18 <HAL_SD_Init>
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d109      	bne.n	8005c84 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005c70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c74:	4806      	ldr	r0, [pc, #24]	@ (8005c90 <BSP_SD_Init+0x48>)
 8005c76:	f7fe feb3 	bl	80049e0 <HAL_SD_ConfigWideBusOperation>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005c84:	79fb      	ldrb	r3, [r7, #7]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000168 	.word	0x20000168

08005c94 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	68f9      	ldr	r1, [r7, #12]
 8005cb0:	4806      	ldr	r0, [pc, #24]	@ (8005ccc <BSP_SD_ReadBlocks+0x38>)
 8005cb2:	f7fe f961 	bl	8003f78 <HAL_SD_ReadBlocks>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000168 	.word	0x20000168

08005cd0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	4806      	ldr	r0, [pc, #24]	@ (8005d08 <BSP_SD_WriteBlocks+0x38>)
 8005cee:	f7fe fb21 	bl	8004334 <HAL_SD_WriteBlocks>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000168 	.word	0x20000168

08005d0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005d10:	4805      	ldr	r0, [pc, #20]	@ (8005d28 <BSP_SD_GetCardState+0x1c>)
 8005d12:	f7fe feff 	bl	8004b14 <HAL_SD_GetCardState>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000168 	.word	0x20000168

08005d2c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4803      	ldr	r0, [pc, #12]	@ (8005d44 <BSP_SD_GetCardInfo+0x18>)
 8005d38:	f7fe fe26 	bl	8004988 <HAL_SD_GetCardInfo>
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000168 	.word	0x20000168

08005d48 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005d52:	f000 f80b 	bl	8005d6c <BSP_PlatformIsDetected>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	b2db      	uxtb	r3, r3
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005d72:	2301      	movs	r3, #1
 8005d74:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005d76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005d7a:	4806      	ldr	r0, [pc, #24]	@ (8005d94 <BSP_PlatformIsDetected+0x28>)
 8005d7c:	f7fc f984 	bl	8002088 <HAL_GPIO_ReadPin>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005d86:	2300      	movs	r3, #0
 8005d88:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40020000 	.word	0x40020000

08005d98 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005da2:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd0 <SD_CheckStatus+0x38>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005da8:	f7ff ffb0 	bl	8005d0c <BSP_SD_GetCardState>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d107      	bne.n	8005dc2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005db2:	4b07      	ldr	r3, [pc, #28]	@ (8005dd0 <SD_CheckStatus+0x38>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	4b04      	ldr	r3, [pc, #16]	@ (8005dd0 <SD_CheckStatus+0x38>)
 8005dc0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005dc2:	4b03      	ldr	r3, [pc, #12]	@ (8005dd0 <SD_CheckStatus+0x38>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b2db      	uxtb	r3, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20000045 	.word	0x20000045

08005dd4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005dde:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <SD_initialize+0x38>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005de4:	f7ff ff30 	bl	8005c48 <BSP_SD_Init>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d107      	bne.n	8005dfe <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff ffd1 	bl	8005d98 <SD_CheckStatus>
 8005df6:	4603      	mov	r3, r0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <SD_initialize+0x38>)
 8005dfc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005dfe:	4b03      	ldr	r3, [pc, #12]	@ (8005e0c <SD_initialize+0x38>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	b2db      	uxtb	r3, r3
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000045 	.word	0x20000045

08005e10 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff ffbb 	bl	8005d98 <SD_CheckStatus>
 8005e22:	4603      	mov	r3, r0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005e40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	68b8      	ldr	r0, [r7, #8]
 8005e4a:	f7ff ff23 	bl	8005c94 <BSP_SD_ReadBlocks>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d107      	bne.n	8005e64 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005e54:	bf00      	nop
 8005e56:	f7ff ff59 	bl	8005d0c <BSP_SD_GetCardState>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1fa      	bne.n	8005e56 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b086      	sub	sp, #24
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	68b8      	ldr	r0, [r7, #8]
 8005e8c:	f7ff ff20 	bl	8005cd0 <BSP_SD_WriteBlocks>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d107      	bne.n	8005ea6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005e96:	bf00      	nop
 8005e98:	f7ff ff38 	bl	8005d0c <BSP_SD_GetCardState>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1fa      	bne.n	8005e98 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08c      	sub	sp, #48	@ 0x30
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	603a      	str	r2, [r7, #0]
 8005eba:	71fb      	strb	r3, [r7, #7]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005ec6:	4b25      	ldr	r3, [pc, #148]	@ (8005f5c <SD_ioctl+0xac>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <SD_ioctl+0x28>
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e03c      	b.n	8005f52 <SD_ioctl+0xa2>

  switch (cmd)
 8005ed8:	79bb      	ldrb	r3, [r7, #6]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d834      	bhi.n	8005f48 <SD_ioctl+0x98>
 8005ede:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee4 <SD_ioctl+0x34>)
 8005ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee4:	08005ef5 	.word	0x08005ef5
 8005ee8:	08005efd 	.word	0x08005efd
 8005eec:	08005f15 	.word	0x08005f15
 8005ef0:	08005f2f 	.word	0x08005f2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005efa:	e028      	b.n	8005f4e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005efc:	f107 030c 	add.w	r3, r7, #12
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff ff13 	bl	8005d2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005f12:	e01c      	b.n	8005f4e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f14:	f107 030c 	add.w	r3, r7, #12
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff ff07 	bl	8005d2c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005f2c:	e00f      	b.n	8005f4e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f2e:	f107 030c 	add.w	r3, r7, #12
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fefa 	bl	8005d2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	0a5a      	lsrs	r2, r3, #9
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005f46:	e002      	b.n	8005f4e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005f48:	2304      	movs	r3, #4
 8005f4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3730      	adds	r7, #48	@ 0x30
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000045 	.word	0x20000045

08005f60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	4a08      	ldr	r2, [pc, #32]	@ (8005f90 <disk_status+0x30>)
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	79fa      	ldrb	r2, [r7, #7]
 8005f78:	4905      	ldr	r1, [pc, #20]	@ (8005f90 <disk_status+0x30>)
 8005f7a:	440a      	add	r2, r1
 8005f7c:	7a12      	ldrb	r2, [r2, #8]
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4798      	blx	r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20001464 	.word	0x20001464

08005f94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8005fe0 <disk_initialize+0x4c>)
 8005fa6:	5cd3      	ldrb	r3, [r2, r3]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d114      	bne.n	8005fd6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe0 <disk_initialize+0x4c>)
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	79fa      	ldrb	r2, [r7, #7]
 8005fba:	4909      	ldr	r1, [pc, #36]	@ (8005fe0 <disk_initialize+0x4c>)
 8005fbc:	440a      	add	r2, r1
 8005fbe:	7a12      	ldrb	r2, [r2, #8]
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4798      	blx	r3
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	4a03      	ldr	r2, [pc, #12]	@ (8005fe0 <disk_initialize+0x4c>)
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20001464 	.word	0x20001464

08005fe4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005fe4:	b590      	push	{r4, r7, lr}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8006020 <disk_read+0x3c>)
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	689c      	ldr	r4, [r3, #8]
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	4a07      	ldr	r2, [pc, #28]	@ (8006020 <disk_read+0x3c>)
 8006004:	4413      	add	r3, r2
 8006006:	7a18      	ldrb	r0, [r3, #8]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	47a0      	blx	r4
 8006010:	4603      	mov	r3, r0
 8006012:	75fb      	strb	r3, [r7, #23]
  return res;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
}
 8006016:	4618      	mov	r0, r3
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	bd90      	pop	{r4, r7, pc}
 800601e:	bf00      	nop
 8006020:	20001464 	.word	0x20001464

08006024 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	4a0a      	ldr	r2, [pc, #40]	@ (8006060 <disk_write+0x3c>)
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	68dc      	ldr	r4, [r3, #12]
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	4a07      	ldr	r2, [pc, #28]	@ (8006060 <disk_write+0x3c>)
 8006044:	4413      	add	r3, r2
 8006046:	7a18      	ldrb	r0, [r3, #8]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	47a0      	blx	r4
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]
  return res;
 8006054:	7dfb      	ldrb	r3, [r7, #23]
}
 8006056:	4618      	mov	r0, r3
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd90      	pop	{r4, r7, pc}
 800605e:	bf00      	nop
 8006060:	20001464 	.word	0x20001464

08006064 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	603a      	str	r2, [r7, #0]
 800606e:	71fb      	strb	r3, [r7, #7]
 8006070:	460b      	mov	r3, r1
 8006072:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	4a09      	ldr	r2, [pc, #36]	@ (800609c <disk_ioctl+0x38>)
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	79fa      	ldrb	r2, [r7, #7]
 8006082:	4906      	ldr	r1, [pc, #24]	@ (800609c <disk_ioctl+0x38>)
 8006084:	440a      	add	r2, r1
 8006086:	7a10      	ldrb	r0, [r2, #8]
 8006088:	79b9      	ldrb	r1, [r7, #6]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	4798      	blx	r3
 800608e:	4603      	mov	r3, r0
 8006090:	73fb      	strb	r3, [r7, #15]
  return res;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20001464 	.word	0x20001464

080060a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3301      	adds	r3, #1
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80060b0:	89fb      	ldrh	r3, [r7, #14]
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	b21a      	sxth	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	b21b      	sxth	r3, r3
 80060bc:	4313      	orrs	r3, r2
 80060be:	b21b      	sxth	r3, r3
 80060c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80060c2:	89fb      	ldrh	r3, [r7, #14]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3303      	adds	r3, #3
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	3202      	adds	r2, #2
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	3201      	adds	r2, #1
 80060f6:	7812      	ldrb	r2, [r2, #0]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	7812      	ldrb	r2, [r2, #0]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
	return rv;
 8006108:	68fb      	ldr	r3, [r7, #12]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	460b      	mov	r3, r1
 8006120:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	887a      	ldrh	r2, [r7, #2]
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	887b      	ldrh	r3, [r7, #2]
 8006130:	0a1b      	lsrs	r3, r3, #8
 8006132:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	0a1b      	lsrs	r3, r3, #8
 8006166:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00d      	beq.n	80061da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	1c53      	adds	r3, r2, #1
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	1c59      	adds	r1, r3, #1
 80061c8:	6179      	str	r1, [r7, #20]
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	607b      	str	r3, [r7, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f1      	bne.n	80061be <mem_cpy+0x1a>
	}
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80061e6:	b480      	push	{r7}
 80061e8:	b087      	sub	sp, #28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	617a      	str	r2, [r7, #20]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3b01      	subs	r3, #1
 8006206:	607b      	str	r3, [r7, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f3      	bne.n	80061f6 <mem_set+0x10>
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800621c:	b480      	push	{r7}
 800621e:	b089      	sub	sp, #36	@ 0x24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	61fa      	str	r2, [r7, #28]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	4619      	mov	r1, r3
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	61ba      	str	r2, [r7, #24]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	1acb      	subs	r3, r1, r3
 8006248:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3b01      	subs	r3, #1
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <mem_cmp+0x40>
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0eb      	beq.n	8006234 <mem_cmp+0x18>

	return r;
 800625c:	697b      	ldr	r3, [r7, #20]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3724      	adds	r7, #36	@ 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006274:	e002      	b.n	800627c <chk_chr+0x12>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3301      	adds	r3, #1
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <chk_chr+0x26>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	4293      	cmp	r3, r2
 800628e:	d1f2      	bne.n	8006276 <chk_chr+0xc>
	return *str;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	781b      	ldrb	r3, [r3, #0]
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	e029      	b.n	8006308 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80062b4:	4a27      	ldr	r2, [pc, #156]	@ (8006354 <chk_lock+0xb4>)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	4413      	add	r3, r2
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01d      	beq.n	80062fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062c2:	4a24      	ldr	r2, [pc, #144]	@ (8006354 <chk_lock+0xb4>)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	4413      	add	r3, r2
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d116      	bne.n	8006302 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80062d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006354 <chk_lock+0xb4>)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	4413      	add	r3, r2
 80062dc:	3304      	adds	r3, #4
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d10c      	bne.n	8006302 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80062e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006354 <chk_lock+0xb4>)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	4413      	add	r3, r2
 80062f0:	3308      	adds	r3, #8
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d102      	bne.n	8006302 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80062fc:	e007      	b.n	800630e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80062fe:	2301      	movs	r3, #1
 8006300:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3301      	adds	r3, #1
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d9d2      	bls.n	80062b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d109      	bne.n	8006328 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <chk_lock+0x80>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d101      	bne.n	8006324 <chk_lock+0x84>
 8006320:	2300      	movs	r3, #0
 8006322:	e010      	b.n	8006346 <chk_lock+0xa6>
 8006324:	2312      	movs	r3, #18
 8006326:	e00e      	b.n	8006346 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d108      	bne.n	8006340 <chk_lock+0xa0>
 800632e:	4a09      	ldr	r2, [pc, #36]	@ (8006354 <chk_lock+0xb4>)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	4413      	add	r3, r2
 8006336:	330c      	adds	r3, #12
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633e:	d101      	bne.n	8006344 <chk_lock+0xa4>
 8006340:	2310      	movs	r3, #16
 8006342:	e000      	b.n	8006346 <chk_lock+0xa6>
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20001444 	.word	0x20001444

08006358 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800635e:	2300      	movs	r3, #0
 8006360:	607b      	str	r3, [r7, #4]
 8006362:	e002      	b.n	800636a <enq_lock+0x12>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3301      	adds	r3, #1
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d806      	bhi.n	800637e <enq_lock+0x26>
 8006370:	4a09      	ldr	r2, [pc, #36]	@ (8006398 <enq_lock+0x40>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	4413      	add	r3, r2
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f2      	bne.n	8006364 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b02      	cmp	r3, #2
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20001444 	.word	0x20001444

0800639c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	e01f      	b.n	80063ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80063ac:	4a41      	ldr	r2, [pc, #260]	@ (80064b4 <inc_lock+0x118>)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	4413      	add	r3, r2
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d113      	bne.n	80063e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80063be:	4a3d      	ldr	r2, [pc, #244]	@ (80064b4 <inc_lock+0x118>)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	4413      	add	r3, r2
 80063c6:	3304      	adds	r3, #4
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d109      	bne.n	80063e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80063d2:	4a38      	ldr	r2, [pc, #224]	@ (80064b4 <inc_lock+0x118>)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	4413      	add	r3, r2
 80063da:	3308      	adds	r3, #8
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d006      	beq.n	80063f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3301      	adds	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d9dc      	bls.n	80063ac <inc_lock+0x10>
 80063f2:	e000      	b.n	80063f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80063f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d132      	bne.n	8006462 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e002      	b.n	8006408 <inc_lock+0x6c>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3301      	adds	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d806      	bhi.n	800641c <inc_lock+0x80>
 800640e:	4a29      	ldr	r2, [pc, #164]	@ (80064b4 <inc_lock+0x118>)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	4413      	add	r3, r2
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f2      	bne.n	8006402 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d101      	bne.n	8006426 <inc_lock+0x8a>
 8006422:	2300      	movs	r3, #0
 8006424:	e040      	b.n	80064a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4922      	ldr	r1, [pc, #136]	@ (80064b4 <inc_lock+0x118>)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	440b      	add	r3, r1
 8006432:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	491e      	ldr	r1, [pc, #120]	@ (80064b4 <inc_lock+0x118>)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	440b      	add	r3, r1
 8006440:	3304      	adds	r3, #4
 8006442:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	491a      	ldr	r1, [pc, #104]	@ (80064b4 <inc_lock+0x118>)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	440b      	add	r3, r1
 8006450:	3308      	adds	r3, #8
 8006452:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006454:	4a17      	ldr	r2, [pc, #92]	@ (80064b4 <inc_lock+0x118>)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	4413      	add	r3, r2
 800645c:	330c      	adds	r3, #12
 800645e:	2200      	movs	r2, #0
 8006460:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d009      	beq.n	800647c <inc_lock+0xe0>
 8006468:	4a12      	ldr	r2, [pc, #72]	@ (80064b4 <inc_lock+0x118>)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	4413      	add	r3, r2
 8006470:	330c      	adds	r3, #12
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <inc_lock+0xe0>
 8006478:	2300      	movs	r3, #0
 800647a:	e015      	b.n	80064a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d108      	bne.n	8006494 <inc_lock+0xf8>
 8006482:	4a0c      	ldr	r2, [pc, #48]	@ (80064b4 <inc_lock+0x118>)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	4413      	add	r3, r2
 800648a:	330c      	adds	r3, #12
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	3301      	adds	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	e001      	b.n	8006498 <inc_lock+0xfc>
 8006494:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006498:	4906      	ldr	r1, [pc, #24]	@ (80064b4 <inc_lock+0x118>)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	440b      	add	r3, r1
 80064a0:	330c      	adds	r3, #12
 80064a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3301      	adds	r3, #1
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	20001444 	.word	0x20001444

080064b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	607b      	str	r3, [r7, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d825      	bhi.n	8006518 <dec_lock+0x60>
		n = Files[i].ctr;
 80064cc:	4a17      	ldr	r2, [pc, #92]	@ (800652c <dec_lock+0x74>)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	4413      	add	r3, r2
 80064d4:	330c      	adds	r3, #12
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80064da:	89fb      	ldrh	r3, [r7, #14]
 80064dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e0:	d101      	bne.n	80064e6 <dec_lock+0x2e>
 80064e2:	2300      	movs	r3, #0
 80064e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80064e6:	89fb      	ldrh	r3, [r7, #14]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <dec_lock+0x3a>
 80064ec:	89fb      	ldrh	r3, [r7, #14]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80064f2:	4a0e      	ldr	r2, [pc, #56]	@ (800652c <dec_lock+0x74>)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	4413      	add	r3, r2
 80064fa:	330c      	adds	r3, #12
 80064fc:	89fa      	ldrh	r2, [r7, #14]
 80064fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006500:	89fb      	ldrh	r3, [r7, #14]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <dec_lock+0x5a>
 8006506:	4a09      	ldr	r2, [pc, #36]	@ (800652c <dec_lock+0x74>)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	4413      	add	r3, r2
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	737b      	strb	r3, [r7, #13]
 8006516:	e001      	b.n	800651c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006518:	2302      	movs	r3, #2
 800651a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800651c:	7b7b      	ldrb	r3, [r7, #13]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20001444 	.word	0x20001444

08006530 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e010      	b.n	8006560 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800653e:	4a0d      	ldr	r2, [pc, #52]	@ (8006574 <clear_lock+0x44>)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	4413      	add	r3, r2
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	429a      	cmp	r2, r3
 800654c:	d105      	bne.n	800655a <clear_lock+0x2a>
 800654e:	4a09      	ldr	r2, [pc, #36]	@ (8006574 <clear_lock+0x44>)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	4413      	add	r3, r2
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d9eb      	bls.n	800653e <clear_lock+0xe>
	}
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	20001444 	.word	0x20001444

08006578 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	78db      	ldrb	r3, [r3, #3]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d034      	beq.n	80065f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006590:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	7858      	ldrb	r0, [r3, #1]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800659c:	2301      	movs	r3, #1
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	f7ff fd40 	bl	8006024 <disk_write>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	73fb      	strb	r3, [r7, #15]
 80065ae:	e022      	b.n	80065f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	1ad2      	subs	r2, r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d217      	bcs.n	80065f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	789b      	ldrb	r3, [r3, #2]
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	e010      	b.n	80065f0 <sync_window+0x78>
					wsect += fs->fsize;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4413      	add	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	7858      	ldrb	r0, [r3, #1]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80065e2:	2301      	movs	r3, #1
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	f7ff fd1d 	bl	8006024 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d8eb      	bhi.n	80065ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d01b      	beq.n	8006650 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff ffad 	bl	8006578 <sync_window>
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d113      	bne.n	8006650 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	7858      	ldrb	r0, [r3, #1]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006632:	2301      	movs	r3, #1
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	f7ff fcd5 	bl	8005fe4 <disk_read>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006644:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006646:	2301      	movs	r3, #1
 8006648:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006650:	7bfb      	ldrb	r3, [r7, #15]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff ff87 	bl	8006578 <sync_window>
 800666a:	4603      	mov	r3, r0
 800666c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d158      	bne.n	8006726 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d148      	bne.n	800670e <sync_fs+0xb2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	791b      	ldrb	r3, [r3, #4]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d144      	bne.n	800670e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3330      	adds	r3, #48	@ 0x30
 8006688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800668c:	2100      	movs	r1, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fda9 	bl	80061e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3330      	adds	r3, #48	@ 0x30
 8006698:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800669c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fd38 	bl	8006116 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3330      	adds	r3, #48	@ 0x30
 80066aa:	4921      	ldr	r1, [pc, #132]	@ (8006730 <sync_fs+0xd4>)
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff fd4d 	bl	800614c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3330      	adds	r3, #48	@ 0x30
 80066b6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80066ba:	491e      	ldr	r1, [pc, #120]	@ (8006734 <sync_fs+0xd8>)
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fd45 	bl	800614c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3330      	adds	r3, #48	@ 0x30
 80066c6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f7ff fd3b 	bl	800614c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3330      	adds	r3, #48	@ 0x30
 80066da:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	4619      	mov	r1, r3
 80066e4:	4610      	mov	r0, r2
 80066e6:	f7ff fd31 	bl	800614c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7858      	ldrb	r0, [r3, #1]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006702:	2301      	movs	r3, #1
 8006704:	f7ff fc8e 	bl	8006024 <disk_write>
			fs->fsi_flag = 0;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	2200      	movs	r2, #0
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff fca4 	bl	8006064 <disk_ioctl>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <sync_fs+0xca>
 8006722:	2301      	movs	r3, #1
 8006724:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006726:	7bfb      	ldrb	r3, [r7, #15]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	41615252 	.word	0x41615252
 8006734:	61417272 	.word	0x61417272

08006738 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	3b02      	subs	r3, #2
 8006746:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	3b02      	subs	r3, #2
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d301      	bcc.n	8006758 <clust2sect+0x20>
 8006754:	2300      	movs	r3, #0
 8006756:	e008      	b.n	800676a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	895b      	ldrh	r3, [r3, #10]
 800675c:	461a      	mov	r2, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	fb03 f202 	mul.w	r2, r3, r2
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	4413      	add	r3, r2
}
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d904      	bls.n	8006796 <get_fat+0x20>
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d302      	bcc.n	800679c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006796:	2301      	movs	r3, #1
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	e08e      	b.n	80068ba <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800679c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d061      	beq.n	800686e <get_fat+0xf8>
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	dc7b      	bgt.n	80068a6 <get_fat+0x130>
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d002      	beq.n	80067b8 <get_fat+0x42>
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d041      	beq.n	800683a <get_fat+0xc4>
 80067b6:	e076      	b.n	80068a6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	6a1a      	ldr	r2, [r3, #32]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	0a5b      	lsrs	r3, r3, #9
 80067ce:	4413      	add	r3, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	6938      	ldr	r0, [r7, #16]
 80067d4:	f7ff ff14 	bl	8006600 <move_window>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d166      	bne.n	80068ac <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	60fa      	str	r2, [r7, #12]
 80067e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4413      	add	r3, r2
 80067ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	6a1a      	ldr	r2, [r3, #32]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	0a5b      	lsrs	r3, r3, #9
 80067fa:	4413      	add	r3, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	6938      	ldr	r0, [r7, #16]
 8006800:	f7ff fefe 	bl	8006600 <move_window>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d152      	bne.n	80068b0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	4313      	orrs	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <get_fat+0xba>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	091b      	lsrs	r3, r3, #4
 800682e:	e002      	b.n	8006836 <get_fat+0xc0>
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006836:	617b      	str	r3, [r7, #20]
			break;
 8006838:	e03f      	b.n	80068ba <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6a1a      	ldr	r2, [r3, #32]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	0a1b      	lsrs	r3, r3, #8
 8006842:	4413      	add	r3, r2
 8006844:	4619      	mov	r1, r3
 8006846:	6938      	ldr	r0, [r7, #16]
 8006848:	f7ff feda 	bl	8006600 <move_window>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d130      	bne.n	80068b4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006860:	4413      	add	r3, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fc1c 	bl	80060a0 <ld_word>
 8006868:	4603      	mov	r3, r0
 800686a:	617b      	str	r3, [r7, #20]
			break;
 800686c:	e025      	b.n	80068ba <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	09db      	lsrs	r3, r3, #7
 8006876:	4413      	add	r3, r2
 8006878:	4619      	mov	r1, r3
 800687a:	6938      	ldr	r0, [r7, #16]
 800687c:	f7ff fec0 	bl	8006600 <move_window>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d118      	bne.n	80068b8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006894:	4413      	add	r3, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fc1a 	bl	80060d0 <ld_dword>
 800689c:	4603      	mov	r3, r0
 800689e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80068a2:	617b      	str	r3, [r7, #20]
			break;
 80068a4:	e009      	b.n	80068ba <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80068a6:	2301      	movs	r3, #1
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e006      	b.n	80068ba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068ac:	bf00      	nop
 80068ae:	e004      	b.n	80068ba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068b0:	bf00      	nop
 80068b2:	e002      	b.n	80068ba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80068b4:	bf00      	nop
 80068b6:	e000      	b.n	80068ba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80068b8:	bf00      	nop
		}
	}

	return val;
 80068ba:	697b      	ldr	r3, [r7, #20]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80068c4:	b590      	push	{r4, r7, lr}
 80068c6:	b089      	sub	sp, #36	@ 0x24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80068d0:	2302      	movs	r3, #2
 80068d2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	f240 80d9 	bls.w	8006a8e <put_fat+0x1ca>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	f080 80d3 	bcs.w	8006a8e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	f000 8096 	beq.w	8006a1e <put_fat+0x15a>
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	f300 80cb 	bgt.w	8006a8e <put_fat+0x1ca>
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d002      	beq.n	8006902 <put_fat+0x3e>
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d06e      	beq.n	80069de <put_fat+0x11a>
 8006900:	e0c5      	b.n	8006a8e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	085b      	lsrs	r3, r3, #1
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	4413      	add	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1a      	ldr	r2, [r3, #32]
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	0a5b      	lsrs	r3, r3, #9
 8006918:	4413      	add	r3, r2
 800691a:	4619      	mov	r1, r3
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7ff fe6f 	bl	8006600 <move_window>
 8006922:	4603      	mov	r3, r0
 8006924:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006926:	7ffb      	ldrb	r3, [r7, #31]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f040 80a9 	bne.w	8006a80 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	1c59      	adds	r1, r3, #1
 8006938:	61b9      	str	r1, [r7, #24]
 800693a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693e:	4413      	add	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00d      	beq.n	8006968 <put_fat+0xa4>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	b25b      	sxtb	r3, r3
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	b25a      	sxtb	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	b25b      	sxtb	r3, r3
 8006960:	4313      	orrs	r3, r2
 8006962:	b25b      	sxtb	r3, r3
 8006964:	b2db      	uxtb	r3, r3
 8006966:	e001      	b.n	800696c <put_fat+0xa8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1a      	ldr	r2, [r3, #32]
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	0a5b      	lsrs	r3, r3, #9
 800697e:	4413      	add	r3, r2
 8006980:	4619      	mov	r1, r3
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fe3c 	bl	8006600 <move_window>
 8006988:	4603      	mov	r3, r0
 800698a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800698c:	7ffb      	ldrb	r3, [r7, #31]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d178      	bne.n	8006a84 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	4413      	add	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <put_fat+0xf0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	091b      	lsrs	r3, r3, #4
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	e00e      	b.n	80069d2 <put_fat+0x10e>
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	b25b      	sxtb	r3, r3
 80069ba:	f023 030f 	bic.w	r3, r3, #15
 80069be:	b25a      	sxtb	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	0a1b      	lsrs	r3, r3, #8
 80069c4:	b25b      	sxtb	r3, r3
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	b25b      	sxtb	r3, r3
 80069cc:	4313      	orrs	r3, r2
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	70da      	strb	r2, [r3, #3]
			break;
 80069dc:	e057      	b.n	8006a8e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a1a      	ldr	r2, [r3, #32]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	4413      	add	r3, r2
 80069e8:	4619      	mov	r1, r3
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f7ff fe08 	bl	8006600 <move_window>
 80069f0:	4603      	mov	r3, r0
 80069f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069f4:	7ffb      	ldrb	r3, [r7, #31]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d146      	bne.n	8006a88 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006a08:	4413      	add	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	b292      	uxth	r2, r2
 8006a0e:	4611      	mov	r1, r2
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fb80 	bl	8006116 <st_word>
			fs->wflag = 1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	70da      	strb	r2, [r3, #3]
			break;
 8006a1c:	e037      	b.n	8006a8e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a1a      	ldr	r2, [r3, #32]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	09db      	lsrs	r3, r3, #7
 8006a26:	4413      	add	r3, r2
 8006a28:	4619      	mov	r1, r3
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7ff fde8 	bl	8006600 <move_window>
 8006a30:	4603      	mov	r3, r0
 8006a32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a34:	7ffb      	ldrb	r3, [r7, #31]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d128      	bne.n	8006a8c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006a4e:	4413      	add	r3, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fb3d 	bl	80060d0 <ld_dword>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006a5c:	4323      	orrs	r3, r4
 8006a5e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006a6e:	4413      	add	r3, r2
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fb6a 	bl	800614c <st_dword>
			fs->wflag = 1;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	70da      	strb	r2, [r3, #3]
			break;
 8006a7e:	e006      	b.n	8006a8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006a80:	bf00      	nop
 8006a82:	e004      	b.n	8006a8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006a84:	bf00      	nop
 8006a86:	e002      	b.n	8006a8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006a88:	bf00      	nop
 8006a8a:	e000      	b.n	8006a8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006a8c:	bf00      	nop
		}
	}
	return res;
 8006a8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3724      	adds	r7, #36	@ 0x24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd90      	pop	{r4, r7, pc}

08006a98 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d904      	bls.n	8006abe <remove_chain+0x26>
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d301      	bcc.n	8006ac2 <remove_chain+0x2a>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e04b      	b.n	8006b5a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00c      	beq.n	8006ae2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	69b8      	ldr	r0, [r7, #24]
 8006ad0:	f7ff fef8 	bl	80068c4 <put_fat>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ad8:	7ffb      	ldrb	r3, [r7, #31]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <remove_chain+0x4a>
 8006ade:	7ffb      	ldrb	r3, [r7, #31]
 8006ae0:	e03b      	b.n	8006b5a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff fe46 	bl	8006776 <get_fat>
 8006aea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d031      	beq.n	8006b56 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <remove_chain+0x64>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e02e      	b.n	8006b5a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b02:	d101      	bne.n	8006b08 <remove_chain+0x70>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e028      	b.n	8006b5a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006b08:	2200      	movs	r2, #0
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	69b8      	ldr	r0, [r7, #24]
 8006b0e:	f7ff fed9 	bl	80068c4 <put_fat>
 8006b12:	4603      	mov	r3, r0
 8006b14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006b16:	7ffb      	ldrb	r3, [r7, #31]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <remove_chain+0x88>
 8006b1c:	7ffb      	ldrb	r3, [r7, #31]
 8006b1e:	e01c      	b.n	8006b5a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	3b02      	subs	r3, #2
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d20b      	bcs.n	8006b46 <remove_chain+0xae>
			fs->free_clst++;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	791b      	ldrb	r3, [r3, #4]
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d3c6      	bcc.n	8006ae2 <remove_chain+0x4a>
 8006b54:	e000      	b.n	8006b58 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006b56:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3720      	adds	r7, #32
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b088      	sub	sp, #32
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <create_chain+0x2c>
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d31b      	bcc.n	8006bc6 <create_chain+0x64>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	e018      	b.n	8006bc6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff fded 	bl	8006776 <get_fat>
 8006b9c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d801      	bhi.n	8006ba8 <create_chain+0x46>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e070      	b.n	8006c8a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bae:	d101      	bne.n	8006bb4 <create_chain+0x52>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	e06a      	b.n	8006c8a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d201      	bcs.n	8006bc2 <create_chain+0x60>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	e063      	b.n	8006c8a <create_chain+0x128>
		scl = clst;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d307      	bcc.n	8006bea <create_chain+0x88>
				ncl = 2;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d901      	bls.n	8006bea <create_chain+0x88>
 8006be6:	2300      	movs	r3, #0
 8006be8:	e04f      	b.n	8006c8a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006bea:	69f9      	ldr	r1, [r7, #28]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff fdc2 	bl	8006776 <get_fat>
 8006bf2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00e      	beq.n	8006c18 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d003      	beq.n	8006c08 <create_chain+0xa6>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c06:	d101      	bne.n	8006c0c <create_chain+0xaa>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	e03e      	b.n	8006c8a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d1da      	bne.n	8006bca <create_chain+0x68>
 8006c14:	2300      	movs	r3, #0
 8006c16:	e038      	b.n	8006c8a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006c18:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006c1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c1e:	69f9      	ldr	r1, [r7, #28]
 8006c20:	6938      	ldr	r0, [r7, #16]
 8006c22:	f7ff fe4f 	bl	80068c4 <put_fat>
 8006c26:	4603      	mov	r3, r0
 8006c28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <create_chain+0xe2>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d006      	beq.n	8006c44 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006c36:	69fa      	ldr	r2, [r7, #28]
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6938      	ldr	r0, [r7, #16]
 8006c3c:	f7ff fe42 	bl	80068c4 <put_fat>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d116      	bne.n	8006c78 <create_chain+0x116>
		fs->last_clst = ncl;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	3b02      	subs	r3, #2
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d804      	bhi.n	8006c68 <create_chain+0x106>
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	1e5a      	subs	r2, r3, #1
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	791b      	ldrb	r3, [r3, #4]
 8006c6c:	f043 0301 	orr.w	r3, r3, #1
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	711a      	strb	r2, [r3, #4]
 8006c76:	e007      	b.n	8006c88 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d102      	bne.n	8006c84 <create_chain+0x122>
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c82:	e000      	b.n	8006c86 <create_chain+0x124>
 8006c84:	2301      	movs	r3, #1
 8006c86:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006c88:	69fb      	ldr	r3, [r7, #28]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b087      	sub	sp, #28
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	0a5b      	lsrs	r3, r3, #9
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	8952      	ldrh	r2, [r2, #10]
 8006cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1d1a      	adds	r2, r3, #4
 8006cbc:	613a      	str	r2, [r7, #16]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <clmt_clust+0x3a>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e010      	b.n	8006cee <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d307      	bcc.n	8006ce4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ce2:	e7e9      	b.n	8006cb8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006ce4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	4413      	add	r3, r2
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b086      	sub	sp, #24
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d10:	d204      	bcs.n	8006d1c <dir_sdi+0x22>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e063      	b.n	8006de8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <dir_sdi+0x46>
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d902      	bls.n	8006d40 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10c      	bne.n	8006d60 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	8912      	ldrh	r2, [r2, #8]
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d301      	bcc.n	8006d56 <dir_sdi+0x5c>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e048      	b.n	8006de8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	61da      	str	r2, [r3, #28]
 8006d5e:	e029      	b.n	8006db4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	895b      	ldrh	r3, [r3, #10]
 8006d64:	025b      	lsls	r3, r3, #9
 8006d66:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d68:	e019      	b.n	8006d9e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6979      	ldr	r1, [r7, #20]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff fd01 	bl	8006776 <get_fat>
 8006d74:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d7c:	d101      	bne.n	8006d82 <dir_sdi+0x88>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e032      	b.n	8006de8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d904      	bls.n	8006d92 <dir_sdi+0x98>
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d301      	bcc.n	8006d96 <dir_sdi+0x9c>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e028      	b.n	8006de8 <dir_sdi+0xee>
			ofs -= csz;
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d2e1      	bcs.n	8006d6a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006da6:	6979      	ldr	r1, [r7, #20]
 8006da8:	6938      	ldr	r0, [r7, #16]
 8006daa:	f7ff fcc5 	bl	8006738 <clust2sect>
 8006dae:	4602      	mov	r2, r0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <dir_sdi+0xcc>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e010      	b.n	8006de8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	0a5b      	lsrs	r3, r3, #9
 8006dce:	441a      	add	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de0:	441a      	add	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	3320      	adds	r3, #32
 8006e06:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <dir_next+0x28>
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e16:	d301      	bcc.n	8006e1c <dir_next+0x2c>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	e0aa      	b.n	8006f72 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f040 8098 	bne.w	8006f58 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	8912      	ldrh	r2, [r2, #8]
 8006e42:	4293      	cmp	r3, r2
 8006e44:	f0c0 8088 	bcc.w	8006f58 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	61da      	str	r2, [r3, #28]
 8006e4e:	2304      	movs	r3, #4
 8006e50:	e08f      	b.n	8006f72 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	0a5b      	lsrs	r3, r3, #9
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	8952      	ldrh	r2, [r2, #10]
 8006e5a:	3a01      	subs	r2, #1
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d17a      	bne.n	8006f58 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f7ff fc83 	bl	8006776 <get_fat>
 8006e70:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d801      	bhi.n	8006e7c <dir_next+0x8c>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e07a      	b.n	8006f72 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e82:	d101      	bne.n	8006e88 <dir_next+0x98>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e074      	b.n	8006f72 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d358      	bcc.n	8006f44 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	61da      	str	r2, [r3, #28]
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	e067      	b.n	8006f72 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4610      	mov	r0, r2
 8006eac:	f7ff fe59 	bl	8006b62 <create_chain>
 8006eb0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <dir_next+0xcc>
 8006eb8:	2307      	movs	r3, #7
 8006eba:	e05a      	b.n	8006f72 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <dir_next+0xd6>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e055      	b.n	8006f72 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ecc:	d101      	bne.n	8006ed2 <dir_next+0xe2>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e04f      	b.n	8006f72 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7ff fb50 	bl	8006578 <sync_window>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <dir_next+0xf2>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e047      	b.n	8006f72 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3330      	adds	r3, #48	@ 0x30
 8006ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006eea:	2100      	movs	r1, #0
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff f97a 	bl	80061e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	6979      	ldr	r1, [r7, #20]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff fc1d 	bl	8006738 <clust2sect>
 8006efe:	4602      	mov	r2, r0
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006f04:	e012      	b.n	8006f2c <dir_next+0x13c>
						fs->wflag = 1;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff fb33 	bl	8006578 <sync_window>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <dir_next+0x12c>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e02a      	b.n	8006f72 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	895b      	ldrh	r3, [r3, #10]
 8006f30:	461a      	mov	r2, r3
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d3e6      	bcc.n	8006f06 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006f4a:	6979      	ldr	r1, [r7, #20]
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff fbf3 	bl	8006738 <clust2sect>
 8006f52:	4602      	mov	r2, r0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6a:	441a      	add	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b086      	sub	sp, #24
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff feb4 	bl	8006cfa <dir_sdi>
 8006f92:	4603      	mov	r3, r0
 8006f94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d12b      	bne.n	8006ff4 <dir_alloc+0x7a>
		n = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7ff fb2a 	bl	8006600 <move_window>
 8006fac:	4603      	mov	r3, r0
 8006fae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d11d      	bne.n	8006ff2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2be5      	cmp	r3, #229	@ 0xe5
 8006fbe:	d004      	beq.n	8006fca <dir_alloc+0x50>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d107      	bne.n	8006fda <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	613b      	str	r3, [r7, #16]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d102      	bne.n	8006fde <dir_alloc+0x64>
 8006fd8:	e00c      	b.n	8006ff4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006fda:	2300      	movs	r3, #0
 8006fdc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006fde:	2101      	movs	r1, #1
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff ff05 	bl	8006df0 <dir_next>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0d7      	beq.n	8006fa0 <dir_alloc+0x26>
 8006ff0:	e000      	b.n	8006ff4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006ff2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d101      	bne.n	8006ffe <dir_alloc+0x84>
 8006ffa:	2307      	movs	r3, #7
 8006ffc:	75fb      	strb	r3, [r7, #23]
	return res;
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	331a      	adds	r3, #26
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff f842 	bl	80060a0 <ld_word>
 800701c:	4603      	mov	r3, r0
 800701e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b03      	cmp	r3, #3
 8007026:	d109      	bne.n	800703c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	3314      	adds	r3, #20
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff f837 	bl	80060a0 <ld_word>
 8007032:	4603      	mov	r3, r0
 8007034:	041b      	lsls	r3, r3, #16
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800703c:	68fb      	ldr	r3, [r7, #12]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	331a      	adds	r3, #26
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	b292      	uxth	r2, r2
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff f85a 	bl	8006116 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b03      	cmp	r3, #3
 8007068:	d109      	bne.n	800707e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f103 0214 	add.w	r2, r3, #20
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	b29b      	uxth	r3, r3
 8007076:	4619      	mov	r1, r3
 8007078:	4610      	mov	r0, r2
 800707a:	f7ff f84c 	bl	8006116 <st_word>
	}
}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b086      	sub	sp, #24
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007094:	2100      	movs	r1, #0
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff fe2f 	bl	8006cfa <dir_sdi>
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <dir_find+0x24>
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	e03e      	b.n	8007128 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6938      	ldr	r0, [r7, #16]
 80070b2:	f7ff faa5 	bl	8006600 <move_window>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d12f      	bne.n	8007120 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d102      	bne.n	80070d4 <dir_find+0x4e>
 80070ce:	2304      	movs	r3, #4
 80070d0:	75fb      	strb	r3, [r7, #23]
 80070d2:	e028      	b.n	8007126 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	330b      	adds	r3, #11
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	330b      	adds	r3, #11
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <dir_find+0x86>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a18      	ldr	r0, [r3, #32]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3324      	adds	r3, #36	@ 0x24
 80070fe:	220b      	movs	r2, #11
 8007100:	4619      	mov	r1, r3
 8007102:	f7ff f88b 	bl	800621c <mem_cmp>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00b      	beq.n	8007124 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800710c:	2100      	movs	r1, #0
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff fe6e 	bl	8006df0 <dir_next>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0c5      	beq.n	80070aa <dir_find+0x24>
 800711e:	e002      	b.n	8007126 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007124:	bf00      	nop

	return res;
 8007126:	7dfb      	ldrb	r3, [r7, #23]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800713e:	2101      	movs	r1, #1
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ff1a 	bl	8006f7a <dir_alloc>
 8007146:	4603      	mov	r3, r0
 8007148:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d11c      	bne.n	800718a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	4619      	mov	r1, r3
 8007156:	68b8      	ldr	r0, [r7, #8]
 8007158:	f7ff fa52 	bl	8006600 <move_window>
 800715c:	4603      	mov	r3, r0
 800715e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d111      	bne.n	800718a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	2220      	movs	r2, #32
 800716c:	2100      	movs	r1, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff f839 	bl	80061e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a18      	ldr	r0, [r3, #32]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3324      	adds	r3, #36	@ 0x24
 800717c:	220b      	movs	r2, #11
 800717e:	4619      	mov	r1, r3
 8007180:	f7ff f810 	bl	80061a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2201      	movs	r2, #1
 8007188:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800718a:	7bfb      	ldrb	r3, [r7, #15]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3324      	adds	r3, #36	@ 0x24
 80071a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80071aa:	220b      	movs	r2, #11
 80071ac:	2120      	movs	r1, #32
 80071ae:	68b8      	ldr	r0, [r7, #8]
 80071b0:	f7ff f819 	bl	80061e6 <mem_set>
	si = i = 0; ni = 8;
 80071b4:	2300      	movs	r3, #0
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	2308      	movs	r3, #8
 80071be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	61fa      	str	r2, [r7, #28]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80071ce:	7efb      	ldrb	r3, [r7, #27]
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d94e      	bls.n	8007272 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80071d4:	7efb      	ldrb	r3, [r7, #27]
 80071d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80071d8:	d006      	beq.n	80071e8 <create_name+0x54>
 80071da:	7efb      	ldrb	r3, [r7, #27]
 80071dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80071de:	d110      	bne.n	8007202 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80071e0:	e002      	b.n	80071e8 <create_name+0x54>
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	3301      	adds	r3, #1
 80071e6:	61fb      	str	r3, [r7, #28]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4413      	add	r3, r2
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80071f2:	d0f6      	beq.n	80071e2 <create_name+0x4e>
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80071fe:	d0f0      	beq.n	80071e2 <create_name+0x4e>
			break;
 8007200:	e038      	b.n	8007274 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007202:	7efb      	ldrb	r3, [r7, #27]
 8007204:	2b2e      	cmp	r3, #46	@ 0x2e
 8007206:	d003      	beq.n	8007210 <create_name+0x7c>
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	429a      	cmp	r2, r3
 800720e:	d30c      	bcc.n	800722a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b0b      	cmp	r3, #11
 8007214:	d002      	beq.n	800721c <create_name+0x88>
 8007216:	7efb      	ldrb	r3, [r7, #27]
 8007218:	2b2e      	cmp	r3, #46	@ 0x2e
 800721a:	d001      	beq.n	8007220 <create_name+0x8c>
 800721c:	2306      	movs	r3, #6
 800721e:	e044      	b.n	80072aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007220:	2308      	movs	r3, #8
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	230b      	movs	r3, #11
 8007226:	617b      	str	r3, [r7, #20]
			continue;
 8007228:	e022      	b.n	8007270 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800722a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800722e:	2b00      	cmp	r3, #0
 8007230:	da04      	bge.n	800723c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007232:	7efb      	ldrb	r3, [r7, #27]
 8007234:	3b80      	subs	r3, #128	@ 0x80
 8007236:	4a1f      	ldr	r2, [pc, #124]	@ (80072b4 <create_name+0x120>)
 8007238:	5cd3      	ldrb	r3, [r2, r3]
 800723a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800723c:	7efb      	ldrb	r3, [r7, #27]
 800723e:	4619      	mov	r1, r3
 8007240:	481d      	ldr	r0, [pc, #116]	@ (80072b8 <create_name+0x124>)
 8007242:	f7ff f812 	bl	800626a <chk_chr>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <create_name+0xbc>
 800724c:	2306      	movs	r3, #6
 800724e:	e02c      	b.n	80072aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007250:	7efb      	ldrb	r3, [r7, #27]
 8007252:	2b60      	cmp	r3, #96	@ 0x60
 8007254:	d905      	bls.n	8007262 <create_name+0xce>
 8007256:	7efb      	ldrb	r3, [r7, #27]
 8007258:	2b7a      	cmp	r3, #122	@ 0x7a
 800725a:	d802      	bhi.n	8007262 <create_name+0xce>
 800725c:	7efb      	ldrb	r3, [r7, #27]
 800725e:	3b20      	subs	r3, #32
 8007260:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	613a      	str	r2, [r7, #16]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	4413      	add	r3, r2
 800726c:	7efa      	ldrb	r2, [r7, #27]
 800726e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007270:	e7a6      	b.n	80071c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007272:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	441a      	add	r2, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <create_name+0xf4>
 8007284:	2306      	movs	r3, #6
 8007286:	e010      	b.n	80072aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2be5      	cmp	r3, #229	@ 0xe5
 800728e:	d102      	bne.n	8007296 <create_name+0x102>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2205      	movs	r2, #5
 8007294:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007296:	7efb      	ldrb	r3, [r7, #27]
 8007298:	2b20      	cmp	r3, #32
 800729a:	d801      	bhi.n	80072a0 <create_name+0x10c>
 800729c:	2204      	movs	r2, #4
 800729e:	e000      	b.n	80072a2 <create_name+0x10e>
 80072a0:	2200      	movs	r2, #0
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	330b      	adds	r3, #11
 80072a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80072a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	08009720 	.word	0x08009720
 80072b8:	080096b0 	.word	0x080096b0

080072bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80072d0:	e002      	b.n	80072d8 <follow_path+0x1c>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	3301      	adds	r3, #1
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80072de:	d0f8      	beq.n	80072d2 <follow_path+0x16>
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80072e6:	d0f4      	beq.n	80072d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2200      	movs	r2, #0
 80072ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b1f      	cmp	r3, #31
 80072f4:	d80a      	bhi.n	800730c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2280      	movs	r2, #128	@ 0x80
 80072fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80072fe:	2100      	movs	r1, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fcfa 	bl	8006cfa <dir_sdi>
 8007306:	4603      	mov	r3, r0
 8007308:	75fb      	strb	r3, [r7, #23]
 800730a:	e043      	b.n	8007394 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800730c:	463b      	mov	r3, r7
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff ff3f 	bl	8007194 <create_name>
 8007316:	4603      	mov	r3, r0
 8007318:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d134      	bne.n	800738a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff feb0 	bl	8007086 <dir_find>
 8007326:	4603      	mov	r3, r0
 8007328:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007330:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	2b04      	cmp	r3, #4
 800733c:	d127      	bne.n	800738e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d122      	bne.n	800738e <follow_path+0xd2>
 8007348:	2305      	movs	r3, #5
 800734a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800734c:	e01f      	b.n	800738e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800734e:	7afb      	ldrb	r3, [r7, #11]
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11c      	bne.n	8007392 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	799b      	ldrb	r3, [r3, #6]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	d102      	bne.n	800736a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007364:	2305      	movs	r3, #5
 8007366:	75fb      	strb	r3, [r7, #23]
 8007368:	e014      	b.n	8007394 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007378:	4413      	add	r3, r2
 800737a:	4619      	mov	r1, r3
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff fe43 	bl	8007008 <ld_clust>
 8007382:	4602      	mov	r2, r0
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007388:	e7c0      	b.n	800730c <follow_path+0x50>
			if (res != FR_OK) break;
 800738a:	bf00      	nop
 800738c:	e002      	b.n	8007394 <follow_path+0xd8>
				break;
 800738e:	bf00      	nop
 8007390:	e000      	b.n	8007394 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007392:	bf00      	nop
			}
		}
	}

	return res;
 8007394:	7dfb      	ldrb	r3, [r7, #23]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800739e:	b480      	push	{r7}
 80073a0:	b087      	sub	sp, #28
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80073a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d031      	beq.n	8007418 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	e002      	b.n	80073c2 <get_ldnumber+0x24>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	3301      	adds	r3, #1
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d903      	bls.n	80073d2 <get_ldnumber+0x34>
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b3a      	cmp	r3, #58	@ 0x3a
 80073d0:	d1f4      	bne.n	80073bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b3a      	cmp	r3, #58	@ 0x3a
 80073d8:	d11c      	bne.n	8007414 <get_ldnumber+0x76>
			tp = *path;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	60fa      	str	r2, [r7, #12]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	3b30      	subs	r3, #48	@ 0x30
 80073ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b09      	cmp	r3, #9
 80073f0:	d80e      	bhi.n	8007410 <get_ldnumber+0x72>
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d10a      	bne.n	8007410 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d107      	bne.n	8007410 <get_ldnumber+0x72>
					vol = (int)i;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	3301      	adds	r3, #1
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	e002      	b.n	800741a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007414:	2300      	movs	r3, #0
 8007416:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007418:	693b      	ldr	r3, [r7, #16]
}
 800741a:	4618      	mov	r0, r3
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
	...

08007428 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	70da      	strb	r2, [r3, #3]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800743e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff f8dc 	bl	8006600 <move_window>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <check_fs+0x2a>
 800744e:	2304      	movs	r3, #4
 8007450:	e038      	b.n	80074c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3330      	adds	r3, #48	@ 0x30
 8007456:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fe20 	bl	80060a0 <ld_word>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007468:	429a      	cmp	r2, r3
 800746a:	d001      	beq.n	8007470 <check_fs+0x48>
 800746c:	2303      	movs	r3, #3
 800746e:	e029      	b.n	80074c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007476:	2be9      	cmp	r3, #233	@ 0xe9
 8007478:	d009      	beq.n	800748e <check_fs+0x66>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007480:	2beb      	cmp	r3, #235	@ 0xeb
 8007482:	d11e      	bne.n	80074c2 <check_fs+0x9a>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800748a:	2b90      	cmp	r3, #144	@ 0x90
 800748c:	d119      	bne.n	80074c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3330      	adds	r3, #48	@ 0x30
 8007492:	3336      	adds	r3, #54	@ 0x36
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe fe1b 	bl	80060d0 <ld_dword>
 800749a:	4603      	mov	r3, r0
 800749c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80074a0:	4a0a      	ldr	r2, [pc, #40]	@ (80074cc <check_fs+0xa4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d101      	bne.n	80074aa <check_fs+0x82>
 80074a6:	2300      	movs	r3, #0
 80074a8:	e00c      	b.n	80074c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3330      	adds	r3, #48	@ 0x30
 80074ae:	3352      	adds	r3, #82	@ 0x52
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe fe0d 	bl	80060d0 <ld_dword>
 80074b6:	4603      	mov	r3, r0
 80074b8:	4a05      	ldr	r2, [pc, #20]	@ (80074d0 <check_fs+0xa8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d101      	bne.n	80074c2 <check_fs+0x9a>
 80074be:	2300      	movs	r3, #0
 80074c0:	e000      	b.n	80074c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80074c2:	2302      	movs	r3, #2
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	00544146 	.word	0x00544146
 80074d0:	33544146 	.word	0x33544146

080074d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b096      	sub	sp, #88	@ 0x58
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	4613      	mov	r3, r2
 80074e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7ff ff58 	bl	800739e <get_ldnumber>
 80074ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80074f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	da01      	bge.n	80074fa <find_volume+0x26>
 80074f6:	230b      	movs	r3, #11
 80074f8:	e22d      	b.n	8007956 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80074fa:	4aa1      	ldr	r2, [pc, #644]	@ (8007780 <find_volume+0x2ac>)
 80074fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007502:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <find_volume+0x3a>
 800750a:	230c      	movs	r3, #12
 800750c:	e223      	b.n	8007956 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007512:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	f023 0301 	bic.w	r3, r3, #1
 800751a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01a      	beq.n	800755a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	4618      	mov	r0, r3
 800752a:	f7fe fd19 	bl	8005f60 <disk_status>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007534:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10c      	bne.n	800755a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <find_volume+0x82>
 8007546:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007552:	230a      	movs	r3, #10
 8007554:	e1ff      	b.n	8007956 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007556:	2300      	movs	r3, #0
 8007558:	e1fd      	b.n	8007956 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800755a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755c:	2200      	movs	r2, #0
 800755e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007562:	b2da      	uxtb	r2, r3
 8007564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007566:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756a:	785b      	ldrb	r3, [r3, #1]
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fd11 	bl	8005f94 <disk_initialize>
 8007572:	4603      	mov	r3, r0
 8007574:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007578:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007584:	2303      	movs	r3, #3
 8007586:	e1e6      	b.n	8007956 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <find_volume+0xca>
 800758e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800759a:	230a      	movs	r3, #10
 800759c:	e1db      	b.n	8007956 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80075a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80075a6:	f7ff ff3f 	bl	8007428 <check_fs>
 80075aa:	4603      	mov	r3, r0
 80075ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80075b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d149      	bne.n	800764c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80075b8:	2300      	movs	r3, #0
 80075ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80075bc:	e01e      	b.n	80075fc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80075be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80075c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80075cc:	4413      	add	r3, r2
 80075ce:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80075d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d2:	3304      	adds	r3, #4
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d006      	beq.n	80075e8 <find_volume+0x114>
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	3308      	adds	r3, #8
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fd76 	bl	80060d0 <ld_dword>
 80075e4:	4602      	mov	r2, r0
 80075e6:	e000      	b.n	80075ea <find_volume+0x116>
 80075e8:	2200      	movs	r2, #0
 80075ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	3358      	adds	r3, #88	@ 0x58
 80075f0:	443b      	add	r3, r7
 80075f2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80075f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075f8:	3301      	adds	r3, #1
 80075fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80075fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d9dd      	bls.n	80075be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007602:	2300      	movs	r3, #0
 8007604:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <find_volume+0x13e>
 800760c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800760e:	3b01      	subs	r3, #1
 8007610:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	3358      	adds	r3, #88	@ 0x58
 8007618:	443b      	add	r3, r7
 800761a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800761e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <find_volume+0x15e>
 8007626:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007628:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800762a:	f7ff fefd 	bl	8007428 <check_fs>
 800762e:	4603      	mov	r3, r0
 8007630:	e000      	b.n	8007634 <find_volume+0x160>
 8007632:	2303      	movs	r3, #3
 8007634:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007638:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800763c:	2b01      	cmp	r3, #1
 800763e:	d905      	bls.n	800764c <find_volume+0x178>
 8007640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007642:	3301      	adds	r3, #1
 8007644:	643b      	str	r3, [r7, #64]	@ 0x40
 8007646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007648:	2b03      	cmp	r3, #3
 800764a:	d9e2      	bls.n	8007612 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800764c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007650:	2b04      	cmp	r3, #4
 8007652:	d101      	bne.n	8007658 <find_volume+0x184>
 8007654:	2301      	movs	r3, #1
 8007656:	e17e      	b.n	8007956 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007658:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800765c:	2b01      	cmp	r3, #1
 800765e:	d901      	bls.n	8007664 <find_volume+0x190>
 8007660:	230d      	movs	r3, #13
 8007662:	e178      	b.n	8007956 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007666:	3330      	adds	r3, #48	@ 0x30
 8007668:	330b      	adds	r3, #11
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fd18 	bl	80060a0 <ld_word>
 8007670:	4603      	mov	r3, r0
 8007672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007676:	d001      	beq.n	800767c <find_volume+0x1a8>
 8007678:	230d      	movs	r3, #13
 800767a:	e16c      	b.n	8007956 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800767c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767e:	3330      	adds	r3, #48	@ 0x30
 8007680:	3316      	adds	r3, #22
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fd0c 	bl	80060a0 <ld_word>
 8007688:	4603      	mov	r3, r0
 800768a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800768c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <find_volume+0x1cc>
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	3330      	adds	r3, #48	@ 0x30
 8007696:	3324      	adds	r3, #36	@ 0x24
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe fd19 	bl	80060d0 <ld_dword>
 800769e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80076a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076a4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80076b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b2:	789b      	ldrb	r3, [r3, #2]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d005      	beq.n	80076c4 <find_volume+0x1f0>
 80076b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ba:	789b      	ldrb	r3, [r3, #2]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d001      	beq.n	80076c4 <find_volume+0x1f0>
 80076c0:	230d      	movs	r3, #13
 80076c2:	e148      	b.n	8007956 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80076c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c6:	789b      	ldrb	r3, [r3, #2]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076cc:	fb02 f303 	mul.w	r3, r2, r3
 80076d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80076d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076d8:	461a      	mov	r2, r3
 80076da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80076de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e0:	895b      	ldrh	r3, [r3, #10]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d008      	beq.n	80076f8 <find_volume+0x224>
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	895b      	ldrh	r3, [r3, #10]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ee:	895b      	ldrh	r3, [r3, #10]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	4013      	ands	r3, r2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <find_volume+0x228>
 80076f8:	230d      	movs	r3, #13
 80076fa:	e12c      	b.n	8007956 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80076fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fe:	3330      	adds	r3, #48	@ 0x30
 8007700:	3311      	adds	r3, #17
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe fccc 	bl	80060a0 <ld_word>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	891b      	ldrh	r3, [r3, #8]
 8007714:	f003 030f 	and.w	r3, r3, #15
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <find_volume+0x24e>
 800771e:	230d      	movs	r3, #13
 8007720:	e119      	b.n	8007956 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007724:	3330      	adds	r3, #48	@ 0x30
 8007726:	3313      	adds	r3, #19
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fcb9 	bl	80060a0 <ld_word>
 800772e:	4603      	mov	r3, r0
 8007730:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007734:	2b00      	cmp	r3, #0
 8007736:	d106      	bne.n	8007746 <find_volume+0x272>
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	3330      	adds	r3, #48	@ 0x30
 800773c:	3320      	adds	r3, #32
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fcc6 	bl	80060d0 <ld_dword>
 8007744:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007748:	3330      	adds	r3, #48	@ 0x30
 800774a:	330e      	adds	r3, #14
 800774c:	4618      	mov	r0, r3
 800774e:	f7fe fca7 	bl	80060a0 <ld_word>
 8007752:	4603      	mov	r3, r0
 8007754:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007756:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <find_volume+0x28c>
 800775c:	230d      	movs	r3, #13
 800775e:	e0fa      	b.n	8007956 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007760:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007764:	4413      	add	r3, r2
 8007766:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007768:	8912      	ldrh	r2, [r2, #8]
 800776a:	0912      	lsrs	r2, r2, #4
 800776c:	b292      	uxth	r2, r2
 800776e:	4413      	add	r3, r2
 8007770:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007776:	429a      	cmp	r2, r3
 8007778:	d204      	bcs.n	8007784 <find_volume+0x2b0>
 800777a:	230d      	movs	r3, #13
 800777c:	e0eb      	b.n	8007956 <find_volume+0x482>
 800777e:	bf00      	nop
 8007780:	2000143c 	.word	0x2000143c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800778c:	8952      	ldrh	r2, [r2, #10]
 800778e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007792:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <find_volume+0x2ca>
 800779a:	230d      	movs	r3, #13
 800779c:	e0db      	b.n	8007956 <find_volume+0x482>
		fmt = FS_FAT32;
 800779e:	2303      	movs	r3, #3
 80077a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d802      	bhi.n	80077b4 <find_volume+0x2e0>
 80077ae:	2302      	movs	r3, #2
 80077b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d802      	bhi.n	80077c4 <find_volume+0x2f0>
 80077be:	2301      	movs	r3, #1
 80077c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80077c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c6:	1c9a      	adds	r2, r3, #2
 80077c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ca:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077d0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80077d2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80077d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077d6:	441a      	add	r2, r3
 80077d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077da:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80077dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	441a      	add	r2, r3
 80077e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80077e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d11e      	bne.n	800782c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	3330      	adds	r3, #48	@ 0x30
 80077f2:	332a      	adds	r3, #42	@ 0x2a
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fe fc53 	bl	80060a0 <ld_word>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <find_volume+0x330>
 8007800:	230d      	movs	r3, #13
 8007802:	e0a8      	b.n	8007956 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007806:	891b      	ldrh	r3, [r3, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <find_volume+0x33c>
 800780c:	230d      	movs	r3, #13
 800780e:	e0a2      	b.n	8007956 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007812:	3330      	adds	r3, #48	@ 0x30
 8007814:	332c      	adds	r3, #44	@ 0x2c
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fc5a 	bl	80060d0 <ld_dword>
 800781c:	4602      	mov	r2, r0
 800781e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007820:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	647b      	str	r3, [r7, #68]	@ 0x44
 800782a:	e01f      	b.n	800786c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800782c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782e:	891b      	ldrh	r3, [r3, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <find_volume+0x364>
 8007834:	230d      	movs	r3, #13
 8007836:	e08e      	b.n	8007956 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783a:	6a1a      	ldr	r2, [r3, #32]
 800783c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800783e:	441a      	add	r2, r3
 8007840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007842:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007844:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007848:	2b02      	cmp	r3, #2
 800784a:	d103      	bne.n	8007854 <find_volume+0x380>
 800784c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	e00a      	b.n	800786a <find_volume+0x396>
 8007854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007856:	695a      	ldr	r2, [r3, #20]
 8007858:	4613      	mov	r3, r2
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	4413      	add	r3, r2
 800785e:	085a      	lsrs	r2, r3, #1
 8007860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800786a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800786c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786e:	699a      	ldr	r2, [r3, #24]
 8007870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007872:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007876:	0a5b      	lsrs	r3, r3, #9
 8007878:	429a      	cmp	r2, r3
 800787a:	d201      	bcs.n	8007880 <find_volume+0x3ac>
 800787c:	230d      	movs	r3, #13
 800787e:	e06a      	b.n	8007956 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007882:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007886:	611a      	str	r2, [r3, #16]
 8007888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007892:	2280      	movs	r2, #128	@ 0x80
 8007894:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007896:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800789a:	2b03      	cmp	r3, #3
 800789c:	d149      	bne.n	8007932 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800789e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a0:	3330      	adds	r3, #48	@ 0x30
 80078a2:	3330      	adds	r3, #48	@ 0x30
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe fbfb 	bl	80060a0 <ld_word>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d140      	bne.n	8007932 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80078b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078b2:	3301      	adds	r3, #1
 80078b4:	4619      	mov	r1, r3
 80078b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80078b8:	f7fe fea2 	bl	8006600 <move_window>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d137      	bne.n	8007932 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c4:	2200      	movs	r2, #0
 80078c6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80078c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ca:	3330      	adds	r3, #48	@ 0x30
 80078cc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fbe5 	bl	80060a0 <ld_word>
 80078d6:	4603      	mov	r3, r0
 80078d8:	461a      	mov	r2, r3
 80078da:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80078de:	429a      	cmp	r2, r3
 80078e0:	d127      	bne.n	8007932 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	3330      	adds	r3, #48	@ 0x30
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fbf2 	bl	80060d0 <ld_dword>
 80078ec:	4603      	mov	r3, r0
 80078ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007960 <find_volume+0x48c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d11e      	bne.n	8007932 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80078f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f6:	3330      	adds	r3, #48	@ 0x30
 80078f8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fbe7 	bl	80060d0 <ld_dword>
 8007902:	4603      	mov	r3, r0
 8007904:	4a17      	ldr	r2, [pc, #92]	@ (8007964 <find_volume+0x490>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d113      	bne.n	8007932 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800790a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790c:	3330      	adds	r3, #48	@ 0x30
 800790e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fbdc 	bl	80060d0 <ld_dword>
 8007918:	4602      	mov	r2, r0
 800791a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800791e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007920:	3330      	adds	r3, #48	@ 0x30
 8007922:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fbd2 	bl	80060d0 <ld_dword>
 800792c:	4602      	mov	r2, r0
 800792e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007930:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007934:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007938:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800793a:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <find_volume+0x494>)
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	b29a      	uxth	r2, r3
 8007942:	4b09      	ldr	r3, [pc, #36]	@ (8007968 <find_volume+0x494>)
 8007944:	801a      	strh	r2, [r3, #0]
 8007946:	4b08      	ldr	r3, [pc, #32]	@ (8007968 <find_volume+0x494>)
 8007948:	881a      	ldrh	r2, [r3, #0]
 800794a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800794e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007950:	f7fe fdee 	bl	8006530 <clear_lock>
#endif
	return FR_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3758      	adds	r7, #88	@ 0x58
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	41615252 	.word	0x41615252
 8007964:	61417272 	.word	0x61417272
 8007968:	20001440 	.word	0x20001440

0800796c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007976:	2309      	movs	r3, #9
 8007978:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01c      	beq.n	80079ba <validate+0x4e>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d018      	beq.n	80079ba <validate+0x4e>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d013      	beq.n	80079ba <validate+0x4e>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	889a      	ldrh	r2, [r3, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	88db      	ldrh	r3, [r3, #6]
 800799c:	429a      	cmp	r2, r3
 800799e:	d10c      	bne.n	80079ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fada 	bl	8005f60 <disk_status>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <validate+0x4e>
			res = FR_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d102      	bne.n	80079c6 <validate+0x5a>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	e000      	b.n	80079c8 <validate+0x5c>
 80079c6:	2300      	movs	r3, #0
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	6013      	str	r3, [r2, #0]
	return res;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b098      	sub	sp, #96	@ 0x60
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	4613      	mov	r3, r2
 80079e2:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <f_open+0x18>
 80079ea:	2309      	movs	r3, #9
 80079ec:	e1a9      	b.n	8007d42 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079f4:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80079f6:	79fa      	ldrb	r2, [r7, #7]
 80079f8:	f107 0110 	add.w	r1, r7, #16
 80079fc:	f107 0308 	add.w	r3, r7, #8
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff fd67 	bl	80074d4 <find_volume>
 8007a06:	4603      	mov	r3, r0
 8007a08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f040 818d 	bne.w	8007d30 <f_open+0x35a>
		dj.obj.fs = fs;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	f107 0314 	add.w	r3, r7, #20
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff fc4a 	bl	80072bc <follow_path>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d118      	bne.n	8007a68 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007a36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	b25b      	sxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	da03      	bge.n	8007a48 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007a40:	2306      	movs	r3, #6
 8007a42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007a46:	e00f      	b.n	8007a68 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	bf8c      	ite	hi
 8007a4e:	2301      	movhi	r3, #1
 8007a50:	2300      	movls	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	f107 0314 	add.w	r3, r7, #20
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fc1f 	bl	80062a0 <chk_lock>
 8007a62:	4603      	mov	r3, r0
 8007a64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	f003 031c 	and.w	r3, r3, #28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d07f      	beq.n	8007b72 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007a72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d017      	beq.n	8007aaa <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d10e      	bne.n	8007aa0 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a82:	f7fe fc69 	bl	8006358 <enq_lock>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d006      	beq.n	8007a9a <f_open+0xc4>
 8007a8c:	f107 0314 	add.w	r3, r7, #20
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7ff fb4d 	bl	8007130 <dir_register>
 8007a96:	4603      	mov	r3, r0
 8007a98:	e000      	b.n	8007a9c <f_open+0xc6>
 8007a9a:	2312      	movs	r3, #18
 8007a9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	f043 0308 	orr.w	r3, r3, #8
 8007aa6:	71fb      	strb	r3, [r7, #7]
 8007aa8:	e010      	b.n	8007acc <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007aaa:	7ebb      	ldrb	r3, [r7, #26]
 8007aac:	f003 0311 	and.w	r3, r3, #17
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <f_open+0xe6>
					res = FR_DENIED;
 8007ab4:	2307      	movs	r3, #7
 8007ab6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007aba:	e007      	b.n	8007acc <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <f_open+0xf6>
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007acc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d168      	bne.n	8007ba6 <f_open+0x1d0>
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d063      	beq.n	8007ba6 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007ade:	f7fe f8ab 	bl	8005c38 <get_fattime>
 8007ae2:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae6:	330e      	adds	r3, #14
 8007ae8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fb2e 	bl	800614c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af2:	3316      	adds	r3, #22
 8007af4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fb28 	bl	800614c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afe:	330b      	adds	r3, #11
 8007b00:	2220      	movs	r2, #32
 8007b02:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fa7c 	bl	8007008 <ld_clust>
 8007b10:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007b16:	2200      	movs	r2, #0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff fa94 	bl	8007046 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b20:	331c      	adds	r3, #28
 8007b22:	2100      	movs	r1, #0
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe fb11 	bl	800614c <st_dword>
					fs->wflag = 1;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d037      	beq.n	8007ba6 <f_open+0x1d0>
						dw = fs->winsect;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3a:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007b3c:	f107 0314 	add.w	r3, r7, #20
 8007b40:	2200      	movs	r2, #0
 8007b42:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe ffa7 	bl	8006a98 <remove_chain>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007b50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d126      	bne.n	8007ba6 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fe fd4f 	bl	8006600 <move_window>
 8007b62:	4603      	mov	r3, r0
 8007b64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b6c:	3a01      	subs	r2, #1
 8007b6e:	60da      	str	r2, [r3, #12]
 8007b70:	e019      	b.n	8007ba6 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007b72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d115      	bne.n	8007ba6 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007b7a:	7ebb      	ldrb	r3, [r7, #26]
 8007b7c:	f003 0310 	and.w	r3, r3, #16
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <f_open+0x1b6>
					res = FR_NO_FILE;
 8007b84:	2304      	movs	r3, #4
 8007b86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007b8a:	e00c      	b.n	8007ba6 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d007      	beq.n	8007ba6 <f_open+0x1d0>
 8007b96:	7ebb      	ldrb	r3, [r7, #26]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <f_open+0x1d0>
						res = FR_DENIED;
 8007ba0:	2307      	movs	r3, #7
 8007ba2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d126      	bne.n	8007bfc <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bbe:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	bf8c      	ite	hi
 8007bd4:	2301      	movhi	r3, #1
 8007bd6:	2300      	movls	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f107 0314 	add.w	r3, r7, #20
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fbda 	bl	800639c <inc_lock>
 8007be8:	4602      	mov	r2, r0
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d102      	bne.n	8007bfc <f_open+0x226>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f040 8095 	bne.w	8007d30 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7ff f9fb 	bl	8007008 <ld_clust>
 8007c12:	4602      	mov	r2, r0
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c1a:	331c      	adds	r3, #28
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe fa57 	bl	80060d0 <ld_dword>
 8007c22:	4602      	mov	r2, r0
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	88da      	ldrh	r2, [r3, #6]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	79fa      	ldrb	r2, [r7, #7]
 8007c40:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3330      	adds	r3, #48	@ 0x30
 8007c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe fac1 	bl	80061e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d060      	beq.n	8007d30 <f_open+0x35a>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d05c      	beq.n	8007d30 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	895b      	ldrh	r3, [r3, #10]
 8007c82:	025b      	lsls	r3, r3, #9
 8007c84:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c92:	e016      	b.n	8007cc2 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fe fd6c 	bl	8006776 <get_fat>
 8007c9e:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007ca0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d802      	bhi.n	8007cac <f_open+0x2d6>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007cac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cb2:	d102      	bne.n	8007cba <f_open+0x2e4>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007cba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <f_open+0x2fc>
 8007cca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d8e0      	bhi.n	8007c94 <f_open+0x2be>
				}
				fp->clust = clst;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cd6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d127      	bne.n	8007d30 <f_open+0x35a>
 8007ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d022      	beq.n	8007d30 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fd22 	bl	8006738 <clust2sect>
 8007cf4:	6478      	str	r0, [r7, #68]	@ 0x44
 8007cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d103      	bne.n	8007d04 <f_open+0x32e>
						res = FR_INT_ERR;
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007d02:	e015      	b.n	8007d30 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d06:	0a5a      	lsrs	r2, r3, #9
 8007d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d0a:	441a      	add	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	7858      	ldrb	r0, [r3, #1]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a1a      	ldr	r2, [r3, #32]
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f7fe f960 	bl	8005fe4 <disk_read>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <f_open+0x35a>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007d30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <f_open+0x368>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3760      	adds	r7, #96	@ 0x60
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b08c      	sub	sp, #48	@ 0x30
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f107 0210 	add.w	r2, r7, #16
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff fdfe 	bl	800796c <validate>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d107      	bne.n	8007d8e <f_write+0x44>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	7d5b      	ldrb	r3, [r3, #21]
 8007d82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007d86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <f_write+0x4a>
 8007d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d92:	e14b      	b.n	800802c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	7d1b      	ldrb	r3, [r3, #20]
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <f_write+0x5a>
 8007da0:	2307      	movs	r3, #7
 8007da2:	e143      	b.n	800802c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	441a      	add	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	f080 812d 	bcs.w	8008010 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	43db      	mvns	r3, r3
 8007dbc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007dbe:	e127      	b.n	8008010 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f040 80e3 	bne.w	8007f94 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	0a5b      	lsrs	r3, r3, #9
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	8952      	ldrh	r2, [r2, #10]
 8007dd8:	3a01      	subs	r2, #1
 8007dda:	4013      	ands	r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d143      	bne.n	8007e6c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10c      	bne.n	8007e06 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d11a      	bne.n	8007e2e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe feb0 	bl	8006b62 <create_chain>
 8007e02:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007e04:	e013      	b.n	8007e2e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d007      	beq.n	8007e1e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	4619      	mov	r1, r3
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f7fe ff3c 	bl	8006c92 <clmt_clust>
 8007e1a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007e1c:	e007      	b.n	8007e2e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f7fe fe9b 	bl	8006b62 <create_chain>
 8007e2c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 80f2 	beq.w	800801a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d104      	bne.n	8007e46 <f_write+0xfc>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	755a      	strb	r2, [r3, #21]
 8007e42:	2302      	movs	r3, #2
 8007e44:	e0f2      	b.n	800802c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e4c:	d104      	bne.n	8007e58 <f_write+0x10e>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	755a      	strb	r2, [r3, #21]
 8007e54:	2301      	movs	r3, #1
 8007e56:	e0e9      	b.n	800802c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e5c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d102      	bne.n	8007e6c <f_write+0x122>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e6a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	7d1b      	ldrb	r3, [r3, #20]
 8007e70:	b25b      	sxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	da18      	bge.n	8007ea8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	7858      	ldrb	r0, [r3, #1]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a1a      	ldr	r2, [r3, #32]
 8007e84:	2301      	movs	r3, #1
 8007e86:	f7fe f8cd 	bl	8006024 <disk_write>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <f_write+0x150>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	755a      	strb	r2, [r3, #21]
 8007e96:	2301      	movs	r3, #1
 8007e98:	e0c8      	b.n	800802c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	7d1b      	ldrb	r3, [r3, #20]
 8007e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7fe fc41 	bl	8006738 <clust2sect>
 8007eb6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d104      	bne.n	8007ec8 <f_write+0x17e>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	755a      	strb	r2, [r3, #21]
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e0b1      	b.n	800802c <f_write+0x2e2>
			sect += csect;
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	4413      	add	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	0a5b      	lsrs	r3, r3, #9
 8007ed4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d03c      	beq.n	8007f56 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	8952      	ldrh	r2, [r2, #10]
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d905      	bls.n	8007ef6 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	895b      	ldrh	r3, [r3, #10]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	7858      	ldrb	r0, [r3, #1]
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	69f9      	ldr	r1, [r7, #28]
 8007f00:	f7fe f890 	bl	8006024 <disk_write>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d004      	beq.n	8007f14 <f_write+0x1ca>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	755a      	strb	r2, [r3, #21]
 8007f10:	2301      	movs	r3, #1
 8007f12:	e08b      	b.n	800802c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a1a      	ldr	r2, [r3, #32]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	6a3a      	ldr	r2, [r7, #32]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d915      	bls.n	8007f4e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1a      	ldr	r2, [r3, #32]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	025b      	lsls	r3, r3, #9
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	f7fe f932 	bl	80061a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	7d1b      	ldrb	r3, [r3, #20]
 8007f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	025b      	lsls	r3, r3, #9
 8007f52:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007f54:	e03f      	b.n	8007fd6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d016      	beq.n	8007f8e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	699a      	ldr	r2, [r3, #24]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d210      	bcs.n	8007f8e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	7858      	ldrb	r0, [r3, #1]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f76:	2301      	movs	r3, #1
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	f7fe f833 	bl	8005fe4 <disk_read>
 8007f7e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2201      	movs	r2, #1
 8007f88:	755a      	strb	r2, [r3, #21]
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e04e      	b.n	800802c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007fa0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d901      	bls.n	8007fae <f_write+0x264>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbc:	4413      	add	r3, r2
 8007fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc0:	69f9      	ldr	r1, [r7, #28]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe f8ee 	bl	80061a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	7d1b      	ldrb	r3, [r3, #20]
 8007fcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	4413      	add	r3, r2
 8007fdc:	61fb      	str	r3, [r7, #28]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	699a      	ldr	r2, [r3, #24]
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	619a      	str	r2, [r3, #24]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	bf38      	it	cc
 8007ff6:	461a      	movcc	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	60da      	str	r2, [r3, #12]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008002:	441a      	add	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f47f aed4 	bne.w	8007dc0 <f_write+0x76>
 8008018:	e000      	b.n	800801c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800801a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	7d1b      	ldrb	r3, [r3, #20]
 8008020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008024:	b2da      	uxtb	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3730      	adds	r7, #48	@ 0x30
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f107 0208 	add.w	r2, r7, #8
 8008042:	4611      	mov	r1, r2
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff fc91 	bl	800796c <validate>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d168      	bne.n	8008126 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	7d1b      	ldrb	r3, [r3, #20]
 8008058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d062      	beq.n	8008126 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7d1b      	ldrb	r3, [r3, #20]
 8008064:	b25b      	sxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	da15      	bge.n	8008096 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	7858      	ldrb	r0, [r3, #1]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a1a      	ldr	r2, [r3, #32]
 8008078:	2301      	movs	r3, #1
 800807a:	f7fd ffd3 	bl	8006024 <disk_write>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <f_sync+0x54>
 8008084:	2301      	movs	r3, #1
 8008086:	e04f      	b.n	8008128 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	7d1b      	ldrb	r3, [r3, #20]
 800808c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008090:	b2da      	uxtb	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008096:	f7fd fdcf 	bl	8005c38 <get_fattime>
 800809a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f7fe faab 	bl	8006600 <move_window>
 80080aa:	4603      	mov	r3, r0
 80080ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d138      	bne.n	8008126 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	330b      	adds	r3, #11
 80080be:	781a      	ldrb	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	330b      	adds	r3, #11
 80080c4:	f042 0220 	orr.w	r2, r2, #32
 80080c8:	b2d2      	uxtb	r2, r2
 80080ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	461a      	mov	r2, r3
 80080d6:	68f9      	ldr	r1, [r7, #12]
 80080d8:	f7fe ffb5 	bl	8007046 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f103 021c 	add.w	r2, r3, #28
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	4619      	mov	r1, r3
 80080e8:	4610      	mov	r0, r2
 80080ea:	f7fe f82f 	bl	800614c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3316      	adds	r3, #22
 80080f2:	6939      	ldr	r1, [r7, #16]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe f829 	bl	800614c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3312      	adds	r3, #18
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe f808 	bl	8006116 <st_word>
					fs->wflag = 1;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2201      	movs	r2, #1
 800810a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe faa4 	bl	800665c <sync_fs>
 8008114:	4603      	mov	r3, r0
 8008116:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	7d1b      	ldrb	r3, [r3, #20]
 800811c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008120:	b2da      	uxtb	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008126:	7dfb      	ldrb	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff ff7b 	bl	8008034 <f_sync>
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d118      	bne.n	800817a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f107 0208 	add.w	r2, r7, #8
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff fc0b 	bl	800796c <validate>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10c      	bne.n	800817a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe f9a7 	bl	80064b8 <dec_lock>
 800816a:	4603      	mov	r3, r0
 800816c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d102      	bne.n	800817a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b090      	sub	sp, #64	@ 0x40
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f107 0208 	add.w	r2, r7, #8
 8008194:	4611      	mov	r1, r2
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff fbe8 	bl	800796c <validate>
 800819c:	4603      	mov	r3, r0
 800819e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80081a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d103      	bne.n	80081b2 <f_lseek+0x2e>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	7d5b      	ldrb	r3, [r3, #21]
 80081ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80081b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <f_lseek+0x3c>
 80081ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081be:	e1e6      	b.n	800858e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 80d1 	beq.w	800836c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081d0:	d15a      	bne.n	8008288 <f_lseek+0x104>
			tbl = fp->cltbl;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80081d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	2302      	movs	r3, #2
 80081e4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80081ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d03a      	beq.n	8008268 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	613b      	str	r3, [r7, #16]
 80081f6:	2300      	movs	r3, #0
 80081f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fc:	3302      	adds	r3, #2
 80081fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008206:	3301      	adds	r3, #1
 8008208:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe fab1 	bl	8006776 <get_fat>
 8008214:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	2b01      	cmp	r3, #1
 800821a:	d804      	bhi.n	8008226 <f_lseek+0xa2>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	755a      	strb	r2, [r3, #21]
 8008222:	2302      	movs	r3, #2
 8008224:	e1b3      	b.n	800858e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800822c:	d104      	bne.n	8008238 <f_lseek+0xb4>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	755a      	strb	r2, [r3, #21]
 8008234:	2301      	movs	r3, #1
 8008236:	e1aa      	b.n	800858e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3301      	adds	r3, #1
 800823c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800823e:	429a      	cmp	r2, r3
 8008240:	d0de      	beq.n	8008200 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	429a      	cmp	r2, r3
 8008248:	d809      	bhi.n	800825e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	1d1a      	adds	r2, r3, #4
 800824e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008256:	1d1a      	adds	r2, r3, #4
 8008258:	627a      	str	r2, [r7, #36]	@ 0x24
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008264:	429a      	cmp	r2, r3
 8008266:	d3c4      	bcc.n	80081f2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800826e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	429a      	cmp	r2, r3
 8008276:	d803      	bhi.n	8008280 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	2200      	movs	r2, #0
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e184      	b.n	800858a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008280:	2311      	movs	r3, #17
 8008282:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008286:	e180      	b.n	800858a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d902      	bls.n	8008298 <f_lseek+0x114>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8172 	beq.w	800858a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7fe fcf0 	bl	8006c92 <clmt_clust>
 80082b2:	4602      	mov	r2, r0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f7fe fa39 	bl	8006738 <clust2sect>
 80082c6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d104      	bne.n	80082d8 <f_lseek+0x154>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2202      	movs	r2, #2
 80082d2:	755a      	strb	r2, [r3, #21]
 80082d4:	2302      	movs	r3, #2
 80082d6:	e15a      	b.n	800858e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	3b01      	subs	r3, #1
 80082dc:	0a5b      	lsrs	r3, r3, #9
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	8952      	ldrh	r2, [r2, #10]
 80082e2:	3a01      	subs	r2, #1
 80082e4:	4013      	ands	r3, r2
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	4413      	add	r3, r2
 80082ea:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 8148 	beq.w	800858a <f_lseek+0x406>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	429a      	cmp	r2, r3
 8008302:	f000 8142 	beq.w	800858a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	7d1b      	ldrb	r3, [r3, #20]
 800830a:	b25b      	sxtb	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	da18      	bge.n	8008342 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	7858      	ldrb	r0, [r3, #1]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1a      	ldr	r2, [r3, #32]
 800831e:	2301      	movs	r3, #1
 8008320:	f7fd fe80 	bl	8006024 <disk_write>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d004      	beq.n	8008334 <f_lseek+0x1b0>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	755a      	strb	r2, [r3, #21]
 8008330:	2301      	movs	r3, #1
 8008332:	e12c      	b.n	800858e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	7d1b      	ldrb	r3, [r3, #20]
 8008338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800833c:	b2da      	uxtb	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	7858      	ldrb	r0, [r3, #1]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800834c:	2301      	movs	r3, #1
 800834e:	69ba      	ldr	r2, [r7, #24]
 8008350:	f7fd fe48 	bl	8005fe4 <disk_read>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d004      	beq.n	8008364 <f_lseek+0x1e0>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	755a      	strb	r2, [r3, #21]
 8008360:	2301      	movs	r3, #1
 8008362:	e114      	b.n	800858e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	621a      	str	r2, [r3, #32]
 800836a:	e10e      	b.n	800858a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d908      	bls.n	8008388 <f_lseek+0x204>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7d1b      	ldrb	r3, [r3, #20]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d102      	bne.n	8008388 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	637b      	str	r3, [r7, #52]	@ 0x34
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008396:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 80a7 	beq.w	80084ee <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	895b      	ldrh	r3, [r3, #10]
 80083a4:	025b      	lsls	r3, r3, #9
 80083a6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d01b      	beq.n	80083e6 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	1e5a      	subs	r2, r3, #1
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	1e59      	subs	r1, r3, #1
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d30f      	bcc.n	80083e6 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	1e5a      	subs	r2, r3, #1
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	425b      	negs	r3, r3
 80083ce:	401a      	ands	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083e4:	e022      	b.n	800842c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80083ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d119      	bne.n	8008426 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2100      	movs	r1, #0
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fbb3 	bl	8006b62 <create_chain>
 80083fc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	2b01      	cmp	r3, #1
 8008402:	d104      	bne.n	800840e <f_lseek+0x28a>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	755a      	strb	r2, [r3, #21]
 800840a:	2302      	movs	r3, #2
 800840c:	e0bf      	b.n	800858e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800840e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008414:	d104      	bne.n	8008420 <f_lseek+0x29c>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	755a      	strb	r2, [r3, #21]
 800841c:	2301      	movs	r3, #1
 800841e:	e0b6      	b.n	800858e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008424:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800842a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800842c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842e:	2b00      	cmp	r3, #0
 8008430:	d05d      	beq.n	80084ee <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008432:	e03a      	b.n	80084aa <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699a      	ldr	r2, [r3, #24]
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	441a      	add	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7d1b      	ldrb	r3, [r3, #20]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe fb82 	bl	8006b62 <create_chain>
 800845e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008462:	2b00      	cmp	r3, #0
 8008464:	d108      	bne.n	8008478 <f_lseek+0x2f4>
							ofs = 0; break;
 8008466:	2300      	movs	r3, #0
 8008468:	603b      	str	r3, [r7, #0]
 800846a:	e022      	b.n	80084b2 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008470:	4618      	mov	r0, r3
 8008472:	f7fe f980 	bl	8006776 <get_fat>
 8008476:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800847e:	d104      	bne.n	800848a <f_lseek+0x306>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	755a      	strb	r2, [r3, #21]
 8008486:	2301      	movs	r3, #1
 8008488:	e081      	b.n	800858e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800848a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848c:	2b01      	cmp	r3, #1
 800848e:	d904      	bls.n	800849a <f_lseek+0x316>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008496:	429a      	cmp	r2, r3
 8008498:	d304      	bcc.n	80084a4 <f_lseek+0x320>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	755a      	strb	r2, [r3, #21]
 80084a0:	2302      	movs	r3, #2
 80084a2:	e074      	b.n	800858e <f_lseek+0x40a>
					fp->clust = clst;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084a8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d8c0      	bhi.n	8008434 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	441a      	add	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d012      	beq.n	80084ee <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fe f933 	bl	8006738 <clust2sect>
 80084d2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80084d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d104      	bne.n	80084e4 <f_lseek+0x360>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	755a      	strb	r2, [r3, #21]
 80084e0:	2302      	movs	r3, #2
 80084e2:	e054      	b.n	800858e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	0a5b      	lsrs	r3, r3, #9
 80084e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084ea:	4413      	add	r3, r2
 80084ec:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699a      	ldr	r2, [r3, #24]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d90a      	bls.n	8008510 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	7d1b      	ldrb	r3, [r3, #20]
 8008506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800850a:	b2da      	uxtb	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008518:	2b00      	cmp	r3, #0
 800851a:	d036      	beq.n	800858a <f_lseek+0x406>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008522:	429a      	cmp	r2, r3
 8008524:	d031      	beq.n	800858a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7d1b      	ldrb	r3, [r3, #20]
 800852a:	b25b      	sxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	da18      	bge.n	8008562 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	7858      	ldrb	r0, [r3, #1]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1a      	ldr	r2, [r3, #32]
 800853e:	2301      	movs	r3, #1
 8008540:	f7fd fd70 	bl	8006024 <disk_write>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <f_lseek+0x3d0>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	755a      	strb	r2, [r3, #21]
 8008550:	2301      	movs	r3, #1
 8008552:	e01c      	b.n	800858e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7d1b      	ldrb	r3, [r3, #20]
 8008558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800855c:	b2da      	uxtb	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	7858      	ldrb	r0, [r3, #1]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800856c:	2301      	movs	r3, #1
 800856e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008570:	f7fd fd38 	bl	8005fe4 <disk_read>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <f_lseek+0x400>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	755a      	strb	r2, [r3, #21]
 8008580:	2301      	movs	r3, #1
 8008582:	e004      	b.n	800858e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008588:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800858a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800858e:	4618      	mov	r0, r3
 8008590:	3740      	adds	r7, #64	@ 0x40
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	4613      	mov	r3, r2
 80085a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80085a6:	2301      	movs	r3, #1
 80085a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80085ae:	4b1f      	ldr	r3, [pc, #124]	@ (800862c <FATFS_LinkDriverEx+0x94>)
 80085b0:	7a5b      	ldrb	r3, [r3, #9]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d131      	bne.n	800861c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80085b8:	4b1c      	ldr	r3, [pc, #112]	@ (800862c <FATFS_LinkDriverEx+0x94>)
 80085ba:	7a5b      	ldrb	r3, [r3, #9]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	461a      	mov	r2, r3
 80085c0:	4b1a      	ldr	r3, [pc, #104]	@ (800862c <FATFS_LinkDriverEx+0x94>)
 80085c2:	2100      	movs	r1, #0
 80085c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80085c6:	4b19      	ldr	r3, [pc, #100]	@ (800862c <FATFS_LinkDriverEx+0x94>)
 80085c8:	7a5b      	ldrb	r3, [r3, #9]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	4a17      	ldr	r2, [pc, #92]	@ (800862c <FATFS_LinkDriverEx+0x94>)
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80085d6:	4b15      	ldr	r3, [pc, #84]	@ (800862c <FATFS_LinkDriverEx+0x94>)
 80085d8:	7a5b      	ldrb	r3, [r3, #9]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	461a      	mov	r2, r3
 80085de:	4b13      	ldr	r3, [pc, #76]	@ (800862c <FATFS_LinkDriverEx+0x94>)
 80085e0:	4413      	add	r3, r2
 80085e2:	79fa      	ldrb	r2, [r7, #7]
 80085e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80085e6:	4b11      	ldr	r3, [pc, #68]	@ (800862c <FATFS_LinkDriverEx+0x94>)
 80085e8:	7a5b      	ldrb	r3, [r3, #9]
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	b2d1      	uxtb	r1, r2
 80085f0:	4a0e      	ldr	r2, [pc, #56]	@ (800862c <FATFS_LinkDriverEx+0x94>)
 80085f2:	7251      	strb	r1, [r2, #9]
 80085f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80085f6:	7dbb      	ldrb	r3, [r7, #22]
 80085f8:	3330      	adds	r3, #48	@ 0x30
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	3301      	adds	r3, #1
 8008604:	223a      	movs	r2, #58	@ 0x3a
 8008606:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	3302      	adds	r3, #2
 800860c:	222f      	movs	r2, #47	@ 0x2f
 800860e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	3303      	adds	r3, #3
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800861c:	7dfb      	ldrb	r3, [r7, #23]
}
 800861e:	4618      	mov	r0, r3
 8008620:	371c      	adds	r7, #28
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	20001464 	.word	0x20001464

08008630 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800863a:	2200      	movs	r2, #0
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff ffaa 	bl	8008598 <FATFS_LinkDriverEx>
 8008644:	4603      	mov	r3, r0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <std>:
 8008650:	2300      	movs	r3, #0
 8008652:	b510      	push	{r4, lr}
 8008654:	4604      	mov	r4, r0
 8008656:	e9c0 3300 	strd	r3, r3, [r0]
 800865a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800865e:	6083      	str	r3, [r0, #8]
 8008660:	8181      	strh	r1, [r0, #12]
 8008662:	6643      	str	r3, [r0, #100]	@ 0x64
 8008664:	81c2      	strh	r2, [r0, #14]
 8008666:	6183      	str	r3, [r0, #24]
 8008668:	4619      	mov	r1, r3
 800866a:	2208      	movs	r2, #8
 800866c:	305c      	adds	r0, #92	@ 0x5c
 800866e:	f000 f9f9 	bl	8008a64 <memset>
 8008672:	4b0d      	ldr	r3, [pc, #52]	@ (80086a8 <std+0x58>)
 8008674:	6263      	str	r3, [r4, #36]	@ 0x24
 8008676:	4b0d      	ldr	r3, [pc, #52]	@ (80086ac <std+0x5c>)
 8008678:	62a3      	str	r3, [r4, #40]	@ 0x28
 800867a:	4b0d      	ldr	r3, [pc, #52]	@ (80086b0 <std+0x60>)
 800867c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800867e:	4b0d      	ldr	r3, [pc, #52]	@ (80086b4 <std+0x64>)
 8008680:	6323      	str	r3, [r4, #48]	@ 0x30
 8008682:	4b0d      	ldr	r3, [pc, #52]	@ (80086b8 <std+0x68>)
 8008684:	6224      	str	r4, [r4, #32]
 8008686:	429c      	cmp	r4, r3
 8008688:	d006      	beq.n	8008698 <std+0x48>
 800868a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800868e:	4294      	cmp	r4, r2
 8008690:	d002      	beq.n	8008698 <std+0x48>
 8008692:	33d0      	adds	r3, #208	@ 0xd0
 8008694:	429c      	cmp	r4, r3
 8008696:	d105      	bne.n	80086a4 <std+0x54>
 8008698:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800869c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a0:	f000 ba58 	b.w	8008b54 <__retarget_lock_init_recursive>
 80086a4:	bd10      	pop	{r4, pc}
 80086a6:	bf00      	nop
 80086a8:	080088b5 	.word	0x080088b5
 80086ac:	080088d7 	.word	0x080088d7
 80086b0:	0800890f 	.word	0x0800890f
 80086b4:	08008933 	.word	0x08008933
 80086b8:	20001470 	.word	0x20001470

080086bc <stdio_exit_handler>:
 80086bc:	4a02      	ldr	r2, [pc, #8]	@ (80086c8 <stdio_exit_handler+0xc>)
 80086be:	4903      	ldr	r1, [pc, #12]	@ (80086cc <stdio_exit_handler+0x10>)
 80086c0:	4803      	ldr	r0, [pc, #12]	@ (80086d0 <stdio_exit_handler+0x14>)
 80086c2:	f000 b869 	b.w	8008798 <_fwalk_sglue>
 80086c6:	bf00      	nop
 80086c8:	20000048 	.word	0x20000048
 80086cc:	080093f5 	.word	0x080093f5
 80086d0:	20000058 	.word	0x20000058

080086d4 <cleanup_stdio>:
 80086d4:	6841      	ldr	r1, [r0, #4]
 80086d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008708 <cleanup_stdio+0x34>)
 80086d8:	4299      	cmp	r1, r3
 80086da:	b510      	push	{r4, lr}
 80086dc:	4604      	mov	r4, r0
 80086de:	d001      	beq.n	80086e4 <cleanup_stdio+0x10>
 80086e0:	f000 fe88 	bl	80093f4 <_fflush_r>
 80086e4:	68a1      	ldr	r1, [r4, #8]
 80086e6:	4b09      	ldr	r3, [pc, #36]	@ (800870c <cleanup_stdio+0x38>)
 80086e8:	4299      	cmp	r1, r3
 80086ea:	d002      	beq.n	80086f2 <cleanup_stdio+0x1e>
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 fe81 	bl	80093f4 <_fflush_r>
 80086f2:	68e1      	ldr	r1, [r4, #12]
 80086f4:	4b06      	ldr	r3, [pc, #24]	@ (8008710 <cleanup_stdio+0x3c>)
 80086f6:	4299      	cmp	r1, r3
 80086f8:	d004      	beq.n	8008704 <cleanup_stdio+0x30>
 80086fa:	4620      	mov	r0, r4
 80086fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008700:	f000 be78 	b.w	80093f4 <_fflush_r>
 8008704:	bd10      	pop	{r4, pc}
 8008706:	bf00      	nop
 8008708:	20001470 	.word	0x20001470
 800870c:	200014d8 	.word	0x200014d8
 8008710:	20001540 	.word	0x20001540

08008714 <global_stdio_init.part.0>:
 8008714:	b510      	push	{r4, lr}
 8008716:	4b0b      	ldr	r3, [pc, #44]	@ (8008744 <global_stdio_init.part.0+0x30>)
 8008718:	4c0b      	ldr	r4, [pc, #44]	@ (8008748 <global_stdio_init.part.0+0x34>)
 800871a:	4a0c      	ldr	r2, [pc, #48]	@ (800874c <global_stdio_init.part.0+0x38>)
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	4620      	mov	r0, r4
 8008720:	2200      	movs	r2, #0
 8008722:	2104      	movs	r1, #4
 8008724:	f7ff ff94 	bl	8008650 <std>
 8008728:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800872c:	2201      	movs	r2, #1
 800872e:	2109      	movs	r1, #9
 8008730:	f7ff ff8e 	bl	8008650 <std>
 8008734:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008738:	2202      	movs	r2, #2
 800873a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800873e:	2112      	movs	r1, #18
 8008740:	f7ff bf86 	b.w	8008650 <std>
 8008744:	200015a8 	.word	0x200015a8
 8008748:	20001470 	.word	0x20001470
 800874c:	080086bd 	.word	0x080086bd

08008750 <__sfp_lock_acquire>:
 8008750:	4801      	ldr	r0, [pc, #4]	@ (8008758 <__sfp_lock_acquire+0x8>)
 8008752:	f000 ba00 	b.w	8008b56 <__retarget_lock_acquire_recursive>
 8008756:	bf00      	nop
 8008758:	200015b1 	.word	0x200015b1

0800875c <__sfp_lock_release>:
 800875c:	4801      	ldr	r0, [pc, #4]	@ (8008764 <__sfp_lock_release+0x8>)
 800875e:	f000 b9fb 	b.w	8008b58 <__retarget_lock_release_recursive>
 8008762:	bf00      	nop
 8008764:	200015b1 	.word	0x200015b1

08008768 <__sinit>:
 8008768:	b510      	push	{r4, lr}
 800876a:	4604      	mov	r4, r0
 800876c:	f7ff fff0 	bl	8008750 <__sfp_lock_acquire>
 8008770:	6a23      	ldr	r3, [r4, #32]
 8008772:	b11b      	cbz	r3, 800877c <__sinit+0x14>
 8008774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008778:	f7ff bff0 	b.w	800875c <__sfp_lock_release>
 800877c:	4b04      	ldr	r3, [pc, #16]	@ (8008790 <__sinit+0x28>)
 800877e:	6223      	str	r3, [r4, #32]
 8008780:	4b04      	ldr	r3, [pc, #16]	@ (8008794 <__sinit+0x2c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1f5      	bne.n	8008774 <__sinit+0xc>
 8008788:	f7ff ffc4 	bl	8008714 <global_stdio_init.part.0>
 800878c:	e7f2      	b.n	8008774 <__sinit+0xc>
 800878e:	bf00      	nop
 8008790:	080086d5 	.word	0x080086d5
 8008794:	200015a8 	.word	0x200015a8

08008798 <_fwalk_sglue>:
 8008798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879c:	4607      	mov	r7, r0
 800879e:	4688      	mov	r8, r1
 80087a0:	4614      	mov	r4, r2
 80087a2:	2600      	movs	r6, #0
 80087a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087a8:	f1b9 0901 	subs.w	r9, r9, #1
 80087ac:	d505      	bpl.n	80087ba <_fwalk_sglue+0x22>
 80087ae:	6824      	ldr	r4, [r4, #0]
 80087b0:	2c00      	cmp	r4, #0
 80087b2:	d1f7      	bne.n	80087a4 <_fwalk_sglue+0xc>
 80087b4:	4630      	mov	r0, r6
 80087b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ba:	89ab      	ldrh	r3, [r5, #12]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d907      	bls.n	80087d0 <_fwalk_sglue+0x38>
 80087c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087c4:	3301      	adds	r3, #1
 80087c6:	d003      	beq.n	80087d0 <_fwalk_sglue+0x38>
 80087c8:	4629      	mov	r1, r5
 80087ca:	4638      	mov	r0, r7
 80087cc:	47c0      	blx	r8
 80087ce:	4306      	orrs	r6, r0
 80087d0:	3568      	adds	r5, #104	@ 0x68
 80087d2:	e7e9      	b.n	80087a8 <_fwalk_sglue+0x10>

080087d4 <iprintf>:
 80087d4:	b40f      	push	{r0, r1, r2, r3}
 80087d6:	b507      	push	{r0, r1, r2, lr}
 80087d8:	4906      	ldr	r1, [pc, #24]	@ (80087f4 <iprintf+0x20>)
 80087da:	ab04      	add	r3, sp, #16
 80087dc:	6808      	ldr	r0, [r1, #0]
 80087de:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e2:	6881      	ldr	r1, [r0, #8]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	f000 fadb 	bl	8008da0 <_vfiprintf_r>
 80087ea:	b003      	add	sp, #12
 80087ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80087f0:	b004      	add	sp, #16
 80087f2:	4770      	bx	lr
 80087f4:	20000054 	.word	0x20000054

080087f8 <_puts_r>:
 80087f8:	6a03      	ldr	r3, [r0, #32]
 80087fa:	b570      	push	{r4, r5, r6, lr}
 80087fc:	6884      	ldr	r4, [r0, #8]
 80087fe:	4605      	mov	r5, r0
 8008800:	460e      	mov	r6, r1
 8008802:	b90b      	cbnz	r3, 8008808 <_puts_r+0x10>
 8008804:	f7ff ffb0 	bl	8008768 <__sinit>
 8008808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800880a:	07db      	lsls	r3, r3, #31
 800880c:	d405      	bmi.n	800881a <_puts_r+0x22>
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	0598      	lsls	r0, r3, #22
 8008812:	d402      	bmi.n	800881a <_puts_r+0x22>
 8008814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008816:	f000 f99e 	bl	8008b56 <__retarget_lock_acquire_recursive>
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	0719      	lsls	r1, r3, #28
 800881e:	d502      	bpl.n	8008826 <_puts_r+0x2e>
 8008820:	6923      	ldr	r3, [r4, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d135      	bne.n	8008892 <_puts_r+0x9a>
 8008826:	4621      	mov	r1, r4
 8008828:	4628      	mov	r0, r5
 800882a:	f000 f8c5 	bl	80089b8 <__swsetup_r>
 800882e:	b380      	cbz	r0, 8008892 <_puts_r+0x9a>
 8008830:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008834:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008836:	07da      	lsls	r2, r3, #31
 8008838:	d405      	bmi.n	8008846 <_puts_r+0x4e>
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	059b      	lsls	r3, r3, #22
 800883e:	d402      	bmi.n	8008846 <_puts_r+0x4e>
 8008840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008842:	f000 f989 	bl	8008b58 <__retarget_lock_release_recursive>
 8008846:	4628      	mov	r0, r5
 8008848:	bd70      	pop	{r4, r5, r6, pc}
 800884a:	2b00      	cmp	r3, #0
 800884c:	da04      	bge.n	8008858 <_puts_r+0x60>
 800884e:	69a2      	ldr	r2, [r4, #24]
 8008850:	429a      	cmp	r2, r3
 8008852:	dc17      	bgt.n	8008884 <_puts_r+0x8c>
 8008854:	290a      	cmp	r1, #10
 8008856:	d015      	beq.n	8008884 <_puts_r+0x8c>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	6022      	str	r2, [r4, #0]
 800885e:	7019      	strb	r1, [r3, #0]
 8008860:	68a3      	ldr	r3, [r4, #8]
 8008862:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008866:	3b01      	subs	r3, #1
 8008868:	60a3      	str	r3, [r4, #8]
 800886a:	2900      	cmp	r1, #0
 800886c:	d1ed      	bne.n	800884a <_puts_r+0x52>
 800886e:	2b00      	cmp	r3, #0
 8008870:	da11      	bge.n	8008896 <_puts_r+0x9e>
 8008872:	4622      	mov	r2, r4
 8008874:	210a      	movs	r1, #10
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f85f 	bl	800893a <__swbuf_r>
 800887c:	3001      	adds	r0, #1
 800887e:	d0d7      	beq.n	8008830 <_puts_r+0x38>
 8008880:	250a      	movs	r5, #10
 8008882:	e7d7      	b.n	8008834 <_puts_r+0x3c>
 8008884:	4622      	mov	r2, r4
 8008886:	4628      	mov	r0, r5
 8008888:	f000 f857 	bl	800893a <__swbuf_r>
 800888c:	3001      	adds	r0, #1
 800888e:	d1e7      	bne.n	8008860 <_puts_r+0x68>
 8008890:	e7ce      	b.n	8008830 <_puts_r+0x38>
 8008892:	3e01      	subs	r6, #1
 8008894:	e7e4      	b.n	8008860 <_puts_r+0x68>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	6022      	str	r2, [r4, #0]
 800889c:	220a      	movs	r2, #10
 800889e:	701a      	strb	r2, [r3, #0]
 80088a0:	e7ee      	b.n	8008880 <_puts_r+0x88>
	...

080088a4 <puts>:
 80088a4:	4b02      	ldr	r3, [pc, #8]	@ (80088b0 <puts+0xc>)
 80088a6:	4601      	mov	r1, r0
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f7ff bfa5 	b.w	80087f8 <_puts_r>
 80088ae:	bf00      	nop
 80088b0:	20000054 	.word	0x20000054

080088b4 <__sread>:
 80088b4:	b510      	push	{r4, lr}
 80088b6:	460c      	mov	r4, r1
 80088b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088bc:	f000 f8fc 	bl	8008ab8 <_read_r>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	bfab      	itete	ge
 80088c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088c6:	89a3      	ldrhlt	r3, [r4, #12]
 80088c8:	181b      	addge	r3, r3, r0
 80088ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088ce:	bfac      	ite	ge
 80088d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088d2:	81a3      	strhlt	r3, [r4, #12]
 80088d4:	bd10      	pop	{r4, pc}

080088d6 <__swrite>:
 80088d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088da:	461f      	mov	r7, r3
 80088dc:	898b      	ldrh	r3, [r1, #12]
 80088de:	05db      	lsls	r3, r3, #23
 80088e0:	4605      	mov	r5, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	4616      	mov	r6, r2
 80088e6:	d505      	bpl.n	80088f4 <__swrite+0x1e>
 80088e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ec:	2302      	movs	r3, #2
 80088ee:	2200      	movs	r2, #0
 80088f0:	f000 f8d0 	bl	8008a94 <_lseek_r>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	4632      	mov	r2, r6
 8008902:	463b      	mov	r3, r7
 8008904:	4628      	mov	r0, r5
 8008906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800890a:	f000 b8e7 	b.w	8008adc <_write_r>

0800890e <__sseek>:
 800890e:	b510      	push	{r4, lr}
 8008910:	460c      	mov	r4, r1
 8008912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008916:	f000 f8bd 	bl	8008a94 <_lseek_r>
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	bf15      	itete	ne
 8008920:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008922:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008926:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800892a:	81a3      	strheq	r3, [r4, #12]
 800892c:	bf18      	it	ne
 800892e:	81a3      	strhne	r3, [r4, #12]
 8008930:	bd10      	pop	{r4, pc}

08008932 <__sclose>:
 8008932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008936:	f000 b89d 	b.w	8008a74 <_close_r>

0800893a <__swbuf_r>:
 800893a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893c:	460e      	mov	r6, r1
 800893e:	4614      	mov	r4, r2
 8008940:	4605      	mov	r5, r0
 8008942:	b118      	cbz	r0, 800894c <__swbuf_r+0x12>
 8008944:	6a03      	ldr	r3, [r0, #32]
 8008946:	b90b      	cbnz	r3, 800894c <__swbuf_r+0x12>
 8008948:	f7ff ff0e 	bl	8008768 <__sinit>
 800894c:	69a3      	ldr	r3, [r4, #24]
 800894e:	60a3      	str	r3, [r4, #8]
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	071a      	lsls	r2, r3, #28
 8008954:	d501      	bpl.n	800895a <__swbuf_r+0x20>
 8008956:	6923      	ldr	r3, [r4, #16]
 8008958:	b943      	cbnz	r3, 800896c <__swbuf_r+0x32>
 800895a:	4621      	mov	r1, r4
 800895c:	4628      	mov	r0, r5
 800895e:	f000 f82b 	bl	80089b8 <__swsetup_r>
 8008962:	b118      	cbz	r0, 800896c <__swbuf_r+0x32>
 8008964:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008968:	4638      	mov	r0, r7
 800896a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	6922      	ldr	r2, [r4, #16]
 8008970:	1a98      	subs	r0, r3, r2
 8008972:	6963      	ldr	r3, [r4, #20]
 8008974:	b2f6      	uxtb	r6, r6
 8008976:	4283      	cmp	r3, r0
 8008978:	4637      	mov	r7, r6
 800897a:	dc05      	bgt.n	8008988 <__swbuf_r+0x4e>
 800897c:	4621      	mov	r1, r4
 800897e:	4628      	mov	r0, r5
 8008980:	f000 fd38 	bl	80093f4 <_fflush_r>
 8008984:	2800      	cmp	r0, #0
 8008986:	d1ed      	bne.n	8008964 <__swbuf_r+0x2a>
 8008988:	68a3      	ldr	r3, [r4, #8]
 800898a:	3b01      	subs	r3, #1
 800898c:	60a3      	str	r3, [r4, #8]
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	6022      	str	r2, [r4, #0]
 8008994:	701e      	strb	r6, [r3, #0]
 8008996:	6962      	ldr	r2, [r4, #20]
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	429a      	cmp	r2, r3
 800899c:	d004      	beq.n	80089a8 <__swbuf_r+0x6e>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	07db      	lsls	r3, r3, #31
 80089a2:	d5e1      	bpl.n	8008968 <__swbuf_r+0x2e>
 80089a4:	2e0a      	cmp	r6, #10
 80089a6:	d1df      	bne.n	8008968 <__swbuf_r+0x2e>
 80089a8:	4621      	mov	r1, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 fd22 	bl	80093f4 <_fflush_r>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0d9      	beq.n	8008968 <__swbuf_r+0x2e>
 80089b4:	e7d6      	b.n	8008964 <__swbuf_r+0x2a>
	...

080089b8 <__swsetup_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4b29      	ldr	r3, [pc, #164]	@ (8008a60 <__swsetup_r+0xa8>)
 80089bc:	4605      	mov	r5, r0
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	460c      	mov	r4, r1
 80089c2:	b118      	cbz	r0, 80089cc <__swsetup_r+0x14>
 80089c4:	6a03      	ldr	r3, [r0, #32]
 80089c6:	b90b      	cbnz	r3, 80089cc <__swsetup_r+0x14>
 80089c8:	f7ff fece 	bl	8008768 <__sinit>
 80089cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d0:	0719      	lsls	r1, r3, #28
 80089d2:	d422      	bmi.n	8008a1a <__swsetup_r+0x62>
 80089d4:	06da      	lsls	r2, r3, #27
 80089d6:	d407      	bmi.n	80089e8 <__swsetup_r+0x30>
 80089d8:	2209      	movs	r2, #9
 80089da:	602a      	str	r2, [r5, #0]
 80089dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089e6:	e033      	b.n	8008a50 <__swsetup_r+0x98>
 80089e8:	0758      	lsls	r0, r3, #29
 80089ea:	d512      	bpl.n	8008a12 <__swsetup_r+0x5a>
 80089ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ee:	b141      	cbz	r1, 8008a02 <__swsetup_r+0x4a>
 80089f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089f4:	4299      	cmp	r1, r3
 80089f6:	d002      	beq.n	80089fe <__swsetup_r+0x46>
 80089f8:	4628      	mov	r0, r5
 80089fa:	f000 f8af 	bl	8008b5c <_free_r>
 80089fe:	2300      	movs	r3, #0
 8008a00:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6063      	str	r3, [r4, #4]
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	f043 0308 	orr.w	r3, r3, #8
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	b94b      	cbnz	r3, 8008a32 <__swsetup_r+0x7a>
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a28:	d003      	beq.n	8008a32 <__swsetup_r+0x7a>
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 fd2f 	bl	8009490 <__smakebuf_r>
 8008a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a36:	f013 0201 	ands.w	r2, r3, #1
 8008a3a:	d00a      	beq.n	8008a52 <__swsetup_r+0x9a>
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	60a2      	str	r2, [r4, #8]
 8008a40:	6962      	ldr	r2, [r4, #20]
 8008a42:	4252      	negs	r2, r2
 8008a44:	61a2      	str	r2, [r4, #24]
 8008a46:	6922      	ldr	r2, [r4, #16]
 8008a48:	b942      	cbnz	r2, 8008a5c <__swsetup_r+0xa4>
 8008a4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a4e:	d1c5      	bne.n	80089dc <__swsetup_r+0x24>
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	0799      	lsls	r1, r3, #30
 8008a54:	bf58      	it	pl
 8008a56:	6962      	ldrpl	r2, [r4, #20]
 8008a58:	60a2      	str	r2, [r4, #8]
 8008a5a:	e7f4      	b.n	8008a46 <__swsetup_r+0x8e>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e7f7      	b.n	8008a50 <__swsetup_r+0x98>
 8008a60:	20000054 	.word	0x20000054

08008a64 <memset>:
 8008a64:	4402      	add	r2, r0
 8008a66:	4603      	mov	r3, r0
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d100      	bne.n	8008a6e <memset+0xa>
 8008a6c:	4770      	bx	lr
 8008a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a72:	e7f9      	b.n	8008a68 <memset+0x4>

08008a74 <_close_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d06      	ldr	r5, [pc, #24]	@ (8008a90 <_close_r+0x1c>)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	602b      	str	r3, [r5, #0]
 8008a80:	f7f8 fb3f 	bl	8001102 <_close>
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	d102      	bne.n	8008a8e <_close_r+0x1a>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	b103      	cbz	r3, 8008a8e <_close_r+0x1a>
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	200015ac 	.word	0x200015ac

08008a94 <_lseek_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4d07      	ldr	r5, [pc, #28]	@ (8008ab4 <_lseek_r+0x20>)
 8008a98:	4604      	mov	r4, r0
 8008a9a:	4608      	mov	r0, r1
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	602a      	str	r2, [r5, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f7f8 fb54 	bl	8001150 <_lseek>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_lseek_r+0x1e>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_lseek_r+0x1e>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	200015ac 	.word	0x200015ac

08008ab8 <_read_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4d07      	ldr	r5, [pc, #28]	@ (8008ad8 <_read_r+0x20>)
 8008abc:	4604      	mov	r4, r0
 8008abe:	4608      	mov	r0, r1
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	602a      	str	r2, [r5, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f7f8 fafe 	bl	80010c8 <_read>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_read_r+0x1e>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_read_r+0x1e>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	200015ac 	.word	0x200015ac

08008adc <_write_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4d07      	ldr	r5, [pc, #28]	@ (8008afc <_write_r+0x20>)
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	602a      	str	r2, [r5, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f7f7 ff56 	bl	800099c <_write>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_write_r+0x1e>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_write_r+0x1e>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	200015ac 	.word	0x200015ac

08008b00 <__errno>:
 8008b00:	4b01      	ldr	r3, [pc, #4]	@ (8008b08 <__errno+0x8>)
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	20000054 	.word	0x20000054

08008b0c <__libc_init_array>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8008b44 <__libc_init_array+0x38>)
 8008b10:	4c0d      	ldr	r4, [pc, #52]	@ (8008b48 <__libc_init_array+0x3c>)
 8008b12:	1b64      	subs	r4, r4, r5
 8008b14:	10a4      	asrs	r4, r4, #2
 8008b16:	2600      	movs	r6, #0
 8008b18:	42a6      	cmp	r6, r4
 8008b1a:	d109      	bne.n	8008b30 <__libc_init_array+0x24>
 8008b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8008b4c <__libc_init_array+0x40>)
 8008b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8008b50 <__libc_init_array+0x44>)
 8008b20:	f000 fd24 	bl	800956c <_init>
 8008b24:	1b64      	subs	r4, r4, r5
 8008b26:	10a4      	asrs	r4, r4, #2
 8008b28:	2600      	movs	r6, #0
 8008b2a:	42a6      	cmp	r6, r4
 8008b2c:	d105      	bne.n	8008b3a <__libc_init_array+0x2e>
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
 8008b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b34:	4798      	blx	r3
 8008b36:	3601      	adds	r6, #1
 8008b38:	e7ee      	b.n	8008b18 <__libc_init_array+0xc>
 8008b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3e:	4798      	blx	r3
 8008b40:	3601      	adds	r6, #1
 8008b42:	e7f2      	b.n	8008b2a <__libc_init_array+0x1e>
 8008b44:	080097dc 	.word	0x080097dc
 8008b48:	080097dc 	.word	0x080097dc
 8008b4c:	080097dc 	.word	0x080097dc
 8008b50:	080097e0 	.word	0x080097e0

08008b54 <__retarget_lock_init_recursive>:
 8008b54:	4770      	bx	lr

08008b56 <__retarget_lock_acquire_recursive>:
 8008b56:	4770      	bx	lr

08008b58 <__retarget_lock_release_recursive>:
 8008b58:	4770      	bx	lr
	...

08008b5c <_free_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4605      	mov	r5, r0
 8008b60:	2900      	cmp	r1, #0
 8008b62:	d041      	beq.n	8008be8 <_free_r+0x8c>
 8008b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b68:	1f0c      	subs	r4, r1, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bfb8      	it	lt
 8008b6e:	18e4      	addlt	r4, r4, r3
 8008b70:	f000 f8e0 	bl	8008d34 <__malloc_lock>
 8008b74:	4a1d      	ldr	r2, [pc, #116]	@ (8008bec <_free_r+0x90>)
 8008b76:	6813      	ldr	r3, [r2, #0]
 8008b78:	b933      	cbnz	r3, 8008b88 <_free_r+0x2c>
 8008b7a:	6063      	str	r3, [r4, #4]
 8008b7c:	6014      	str	r4, [r2, #0]
 8008b7e:	4628      	mov	r0, r5
 8008b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b84:	f000 b8dc 	b.w	8008d40 <__malloc_unlock>
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	d908      	bls.n	8008b9e <_free_r+0x42>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	1821      	adds	r1, r4, r0
 8008b90:	428b      	cmp	r3, r1
 8008b92:	bf01      	itttt	eq
 8008b94:	6819      	ldreq	r1, [r3, #0]
 8008b96:	685b      	ldreq	r3, [r3, #4]
 8008b98:	1809      	addeq	r1, r1, r0
 8008b9a:	6021      	streq	r1, [r4, #0]
 8008b9c:	e7ed      	b.n	8008b7a <_free_r+0x1e>
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	b10b      	cbz	r3, 8008ba8 <_free_r+0x4c>
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	d9fa      	bls.n	8008b9e <_free_r+0x42>
 8008ba8:	6811      	ldr	r1, [r2, #0]
 8008baa:	1850      	adds	r0, r2, r1
 8008bac:	42a0      	cmp	r0, r4
 8008bae:	d10b      	bne.n	8008bc8 <_free_r+0x6c>
 8008bb0:	6820      	ldr	r0, [r4, #0]
 8008bb2:	4401      	add	r1, r0
 8008bb4:	1850      	adds	r0, r2, r1
 8008bb6:	4283      	cmp	r3, r0
 8008bb8:	6011      	str	r1, [r2, #0]
 8008bba:	d1e0      	bne.n	8008b7e <_free_r+0x22>
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	6053      	str	r3, [r2, #4]
 8008bc2:	4408      	add	r0, r1
 8008bc4:	6010      	str	r0, [r2, #0]
 8008bc6:	e7da      	b.n	8008b7e <_free_r+0x22>
 8008bc8:	d902      	bls.n	8008bd0 <_free_r+0x74>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	e7d6      	b.n	8008b7e <_free_r+0x22>
 8008bd0:	6820      	ldr	r0, [r4, #0]
 8008bd2:	1821      	adds	r1, r4, r0
 8008bd4:	428b      	cmp	r3, r1
 8008bd6:	bf04      	itt	eq
 8008bd8:	6819      	ldreq	r1, [r3, #0]
 8008bda:	685b      	ldreq	r3, [r3, #4]
 8008bdc:	6063      	str	r3, [r4, #4]
 8008bde:	bf04      	itt	eq
 8008be0:	1809      	addeq	r1, r1, r0
 8008be2:	6021      	streq	r1, [r4, #0]
 8008be4:	6054      	str	r4, [r2, #4]
 8008be6:	e7ca      	b.n	8008b7e <_free_r+0x22>
 8008be8:	bd38      	pop	{r3, r4, r5, pc}
 8008bea:	bf00      	nop
 8008bec:	200015b8 	.word	0x200015b8

08008bf0 <sbrk_aligned>:
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	4e0f      	ldr	r6, [pc, #60]	@ (8008c30 <sbrk_aligned+0x40>)
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	6831      	ldr	r1, [r6, #0]
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	b911      	cbnz	r1, 8008c02 <sbrk_aligned+0x12>
 8008bfc:	f000 fca6 	bl	800954c <_sbrk_r>
 8008c00:	6030      	str	r0, [r6, #0]
 8008c02:	4621      	mov	r1, r4
 8008c04:	4628      	mov	r0, r5
 8008c06:	f000 fca1 	bl	800954c <_sbrk_r>
 8008c0a:	1c43      	adds	r3, r0, #1
 8008c0c:	d103      	bne.n	8008c16 <sbrk_aligned+0x26>
 8008c0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008c12:	4620      	mov	r0, r4
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
 8008c16:	1cc4      	adds	r4, r0, #3
 8008c18:	f024 0403 	bic.w	r4, r4, #3
 8008c1c:	42a0      	cmp	r0, r4
 8008c1e:	d0f8      	beq.n	8008c12 <sbrk_aligned+0x22>
 8008c20:	1a21      	subs	r1, r4, r0
 8008c22:	4628      	mov	r0, r5
 8008c24:	f000 fc92 	bl	800954c <_sbrk_r>
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d1f2      	bne.n	8008c12 <sbrk_aligned+0x22>
 8008c2c:	e7ef      	b.n	8008c0e <sbrk_aligned+0x1e>
 8008c2e:	bf00      	nop
 8008c30:	200015b4 	.word	0x200015b4

08008c34 <_malloc_r>:
 8008c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c38:	1ccd      	adds	r5, r1, #3
 8008c3a:	f025 0503 	bic.w	r5, r5, #3
 8008c3e:	3508      	adds	r5, #8
 8008c40:	2d0c      	cmp	r5, #12
 8008c42:	bf38      	it	cc
 8008c44:	250c      	movcc	r5, #12
 8008c46:	2d00      	cmp	r5, #0
 8008c48:	4606      	mov	r6, r0
 8008c4a:	db01      	blt.n	8008c50 <_malloc_r+0x1c>
 8008c4c:	42a9      	cmp	r1, r5
 8008c4e:	d904      	bls.n	8008c5a <_malloc_r+0x26>
 8008c50:	230c      	movs	r3, #12
 8008c52:	6033      	str	r3, [r6, #0]
 8008c54:	2000      	movs	r0, #0
 8008c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d30 <_malloc_r+0xfc>
 8008c5e:	f000 f869 	bl	8008d34 <__malloc_lock>
 8008c62:	f8d8 3000 	ldr.w	r3, [r8]
 8008c66:	461c      	mov	r4, r3
 8008c68:	bb44      	cbnz	r4, 8008cbc <_malloc_r+0x88>
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7ff ffbf 	bl	8008bf0 <sbrk_aligned>
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	4604      	mov	r4, r0
 8008c76:	d158      	bne.n	8008d2a <_malloc_r+0xf6>
 8008c78:	f8d8 4000 	ldr.w	r4, [r8]
 8008c7c:	4627      	mov	r7, r4
 8008c7e:	2f00      	cmp	r7, #0
 8008c80:	d143      	bne.n	8008d0a <_malloc_r+0xd6>
 8008c82:	2c00      	cmp	r4, #0
 8008c84:	d04b      	beq.n	8008d1e <_malloc_r+0xea>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	4639      	mov	r1, r7
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	eb04 0903 	add.w	r9, r4, r3
 8008c90:	f000 fc5c 	bl	800954c <_sbrk_r>
 8008c94:	4581      	cmp	r9, r0
 8008c96:	d142      	bne.n	8008d1e <_malloc_r+0xea>
 8008c98:	6821      	ldr	r1, [r4, #0]
 8008c9a:	1a6d      	subs	r5, r5, r1
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f7ff ffa6 	bl	8008bf0 <sbrk_aligned>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d03a      	beq.n	8008d1e <_malloc_r+0xea>
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	442b      	add	r3, r5
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	bb62      	cbnz	r2, 8008d10 <_malloc_r+0xdc>
 8008cb6:	f8c8 7000 	str.w	r7, [r8]
 8008cba:	e00f      	b.n	8008cdc <_malloc_r+0xa8>
 8008cbc:	6822      	ldr	r2, [r4, #0]
 8008cbe:	1b52      	subs	r2, r2, r5
 8008cc0:	d420      	bmi.n	8008d04 <_malloc_r+0xd0>
 8008cc2:	2a0b      	cmp	r2, #11
 8008cc4:	d917      	bls.n	8008cf6 <_malloc_r+0xc2>
 8008cc6:	1961      	adds	r1, r4, r5
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	6025      	str	r5, [r4, #0]
 8008ccc:	bf18      	it	ne
 8008cce:	6059      	strne	r1, [r3, #4]
 8008cd0:	6863      	ldr	r3, [r4, #4]
 8008cd2:	bf08      	it	eq
 8008cd4:	f8c8 1000 	streq.w	r1, [r8]
 8008cd8:	5162      	str	r2, [r4, r5]
 8008cda:	604b      	str	r3, [r1, #4]
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f000 f82f 	bl	8008d40 <__malloc_unlock>
 8008ce2:	f104 000b 	add.w	r0, r4, #11
 8008ce6:	1d23      	adds	r3, r4, #4
 8008ce8:	f020 0007 	bic.w	r0, r0, #7
 8008cec:	1ac2      	subs	r2, r0, r3
 8008cee:	bf1c      	itt	ne
 8008cf0:	1a1b      	subne	r3, r3, r0
 8008cf2:	50a3      	strne	r3, [r4, r2]
 8008cf4:	e7af      	b.n	8008c56 <_malloc_r+0x22>
 8008cf6:	6862      	ldr	r2, [r4, #4]
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	bf0c      	ite	eq
 8008cfc:	f8c8 2000 	streq.w	r2, [r8]
 8008d00:	605a      	strne	r2, [r3, #4]
 8008d02:	e7eb      	b.n	8008cdc <_malloc_r+0xa8>
 8008d04:	4623      	mov	r3, r4
 8008d06:	6864      	ldr	r4, [r4, #4]
 8008d08:	e7ae      	b.n	8008c68 <_malloc_r+0x34>
 8008d0a:	463c      	mov	r4, r7
 8008d0c:	687f      	ldr	r7, [r7, #4]
 8008d0e:	e7b6      	b.n	8008c7e <_malloc_r+0x4a>
 8008d10:	461a      	mov	r2, r3
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	d1fb      	bne.n	8008d10 <_malloc_r+0xdc>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	6053      	str	r3, [r2, #4]
 8008d1c:	e7de      	b.n	8008cdc <_malloc_r+0xa8>
 8008d1e:	230c      	movs	r3, #12
 8008d20:	6033      	str	r3, [r6, #0]
 8008d22:	4630      	mov	r0, r6
 8008d24:	f000 f80c 	bl	8008d40 <__malloc_unlock>
 8008d28:	e794      	b.n	8008c54 <_malloc_r+0x20>
 8008d2a:	6005      	str	r5, [r0, #0]
 8008d2c:	e7d6      	b.n	8008cdc <_malloc_r+0xa8>
 8008d2e:	bf00      	nop
 8008d30:	200015b8 	.word	0x200015b8

08008d34 <__malloc_lock>:
 8008d34:	4801      	ldr	r0, [pc, #4]	@ (8008d3c <__malloc_lock+0x8>)
 8008d36:	f7ff bf0e 	b.w	8008b56 <__retarget_lock_acquire_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	200015b0 	.word	0x200015b0

08008d40 <__malloc_unlock>:
 8008d40:	4801      	ldr	r0, [pc, #4]	@ (8008d48 <__malloc_unlock+0x8>)
 8008d42:	f7ff bf09 	b.w	8008b58 <__retarget_lock_release_recursive>
 8008d46:	bf00      	nop
 8008d48:	200015b0 	.word	0x200015b0

08008d4c <__sfputc_r>:
 8008d4c:	6893      	ldr	r3, [r2, #8]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	b410      	push	{r4}
 8008d54:	6093      	str	r3, [r2, #8]
 8008d56:	da08      	bge.n	8008d6a <__sfputc_r+0x1e>
 8008d58:	6994      	ldr	r4, [r2, #24]
 8008d5a:	42a3      	cmp	r3, r4
 8008d5c:	db01      	blt.n	8008d62 <__sfputc_r+0x16>
 8008d5e:	290a      	cmp	r1, #10
 8008d60:	d103      	bne.n	8008d6a <__sfputc_r+0x1e>
 8008d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d66:	f7ff bde8 	b.w	800893a <__swbuf_r>
 8008d6a:	6813      	ldr	r3, [r2, #0]
 8008d6c:	1c58      	adds	r0, r3, #1
 8008d6e:	6010      	str	r0, [r2, #0]
 8008d70:	7019      	strb	r1, [r3, #0]
 8008d72:	4608      	mov	r0, r1
 8008d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <__sfputs_r>:
 8008d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7c:	4606      	mov	r6, r0
 8008d7e:	460f      	mov	r7, r1
 8008d80:	4614      	mov	r4, r2
 8008d82:	18d5      	adds	r5, r2, r3
 8008d84:	42ac      	cmp	r4, r5
 8008d86:	d101      	bne.n	8008d8c <__sfputs_r+0x12>
 8008d88:	2000      	movs	r0, #0
 8008d8a:	e007      	b.n	8008d9c <__sfputs_r+0x22>
 8008d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d90:	463a      	mov	r2, r7
 8008d92:	4630      	mov	r0, r6
 8008d94:	f7ff ffda 	bl	8008d4c <__sfputc_r>
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	d1f3      	bne.n	8008d84 <__sfputs_r+0xa>
 8008d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008da0 <_vfiprintf_r>:
 8008da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	460d      	mov	r5, r1
 8008da6:	b09d      	sub	sp, #116	@ 0x74
 8008da8:	4614      	mov	r4, r2
 8008daa:	4698      	mov	r8, r3
 8008dac:	4606      	mov	r6, r0
 8008dae:	b118      	cbz	r0, 8008db8 <_vfiprintf_r+0x18>
 8008db0:	6a03      	ldr	r3, [r0, #32]
 8008db2:	b90b      	cbnz	r3, 8008db8 <_vfiprintf_r+0x18>
 8008db4:	f7ff fcd8 	bl	8008768 <__sinit>
 8008db8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dba:	07d9      	lsls	r1, r3, #31
 8008dbc:	d405      	bmi.n	8008dca <_vfiprintf_r+0x2a>
 8008dbe:	89ab      	ldrh	r3, [r5, #12]
 8008dc0:	059a      	lsls	r2, r3, #22
 8008dc2:	d402      	bmi.n	8008dca <_vfiprintf_r+0x2a>
 8008dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dc6:	f7ff fec6 	bl	8008b56 <__retarget_lock_acquire_recursive>
 8008dca:	89ab      	ldrh	r3, [r5, #12]
 8008dcc:	071b      	lsls	r3, r3, #28
 8008dce:	d501      	bpl.n	8008dd4 <_vfiprintf_r+0x34>
 8008dd0:	692b      	ldr	r3, [r5, #16]
 8008dd2:	b99b      	cbnz	r3, 8008dfc <_vfiprintf_r+0x5c>
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f7ff fdee 	bl	80089b8 <__swsetup_r>
 8008ddc:	b170      	cbz	r0, 8008dfc <_vfiprintf_r+0x5c>
 8008dde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008de0:	07dc      	lsls	r4, r3, #31
 8008de2:	d504      	bpl.n	8008dee <_vfiprintf_r+0x4e>
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008de8:	b01d      	add	sp, #116	@ 0x74
 8008dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dee:	89ab      	ldrh	r3, [r5, #12]
 8008df0:	0598      	lsls	r0, r3, #22
 8008df2:	d4f7      	bmi.n	8008de4 <_vfiprintf_r+0x44>
 8008df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008df6:	f7ff feaf 	bl	8008b58 <__retarget_lock_release_recursive>
 8008dfa:	e7f3      	b.n	8008de4 <_vfiprintf_r+0x44>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e00:	2320      	movs	r3, #32
 8008e02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e0a:	2330      	movs	r3, #48	@ 0x30
 8008e0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fbc <_vfiprintf_r+0x21c>
 8008e10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e14:	f04f 0901 	mov.w	r9, #1
 8008e18:	4623      	mov	r3, r4
 8008e1a:	469a      	mov	sl, r3
 8008e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e20:	b10a      	cbz	r2, 8008e26 <_vfiprintf_r+0x86>
 8008e22:	2a25      	cmp	r2, #37	@ 0x25
 8008e24:	d1f9      	bne.n	8008e1a <_vfiprintf_r+0x7a>
 8008e26:	ebba 0b04 	subs.w	fp, sl, r4
 8008e2a:	d00b      	beq.n	8008e44 <_vfiprintf_r+0xa4>
 8008e2c:	465b      	mov	r3, fp
 8008e2e:	4622      	mov	r2, r4
 8008e30:	4629      	mov	r1, r5
 8008e32:	4630      	mov	r0, r6
 8008e34:	f7ff ffa1 	bl	8008d7a <__sfputs_r>
 8008e38:	3001      	adds	r0, #1
 8008e3a:	f000 80a7 	beq.w	8008f8c <_vfiprintf_r+0x1ec>
 8008e3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e40:	445a      	add	r2, fp
 8008e42:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e44:	f89a 3000 	ldrb.w	r3, [sl]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 809f 	beq.w	8008f8c <_vfiprintf_r+0x1ec>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e58:	f10a 0a01 	add.w	sl, sl, #1
 8008e5c:	9304      	str	r3, [sp, #16]
 8008e5e:	9307      	str	r3, [sp, #28]
 8008e60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e64:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e66:	4654      	mov	r4, sl
 8008e68:	2205      	movs	r2, #5
 8008e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e6e:	4853      	ldr	r0, [pc, #332]	@ (8008fbc <_vfiprintf_r+0x21c>)
 8008e70:	f7f7 f9ce 	bl	8000210 <memchr>
 8008e74:	9a04      	ldr	r2, [sp, #16]
 8008e76:	b9d8      	cbnz	r0, 8008eb0 <_vfiprintf_r+0x110>
 8008e78:	06d1      	lsls	r1, r2, #27
 8008e7a:	bf44      	itt	mi
 8008e7c:	2320      	movmi	r3, #32
 8008e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e82:	0713      	lsls	r3, r2, #28
 8008e84:	bf44      	itt	mi
 8008e86:	232b      	movmi	r3, #43	@ 0x2b
 8008e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e92:	d015      	beq.n	8008ec0 <_vfiprintf_r+0x120>
 8008e94:	9a07      	ldr	r2, [sp, #28]
 8008e96:	4654      	mov	r4, sl
 8008e98:	2000      	movs	r0, #0
 8008e9a:	f04f 0c0a 	mov.w	ip, #10
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ea4:	3b30      	subs	r3, #48	@ 0x30
 8008ea6:	2b09      	cmp	r3, #9
 8008ea8:	d94b      	bls.n	8008f42 <_vfiprintf_r+0x1a2>
 8008eaa:	b1b0      	cbz	r0, 8008eda <_vfiprintf_r+0x13a>
 8008eac:	9207      	str	r2, [sp, #28]
 8008eae:	e014      	b.n	8008eda <_vfiprintf_r+0x13a>
 8008eb0:	eba0 0308 	sub.w	r3, r0, r8
 8008eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	9304      	str	r3, [sp, #16]
 8008ebc:	46a2      	mov	sl, r4
 8008ebe:	e7d2      	b.n	8008e66 <_vfiprintf_r+0xc6>
 8008ec0:	9b03      	ldr	r3, [sp, #12]
 8008ec2:	1d19      	adds	r1, r3, #4
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	9103      	str	r1, [sp, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	bfbb      	ittet	lt
 8008ecc:	425b      	neglt	r3, r3
 8008ece:	f042 0202 	orrlt.w	r2, r2, #2
 8008ed2:	9307      	strge	r3, [sp, #28]
 8008ed4:	9307      	strlt	r3, [sp, #28]
 8008ed6:	bfb8      	it	lt
 8008ed8:	9204      	strlt	r2, [sp, #16]
 8008eda:	7823      	ldrb	r3, [r4, #0]
 8008edc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ede:	d10a      	bne.n	8008ef6 <_vfiprintf_r+0x156>
 8008ee0:	7863      	ldrb	r3, [r4, #1]
 8008ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ee4:	d132      	bne.n	8008f4c <_vfiprintf_r+0x1ac>
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	1d1a      	adds	r2, r3, #4
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	9203      	str	r2, [sp, #12]
 8008eee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ef2:	3402      	adds	r4, #2
 8008ef4:	9305      	str	r3, [sp, #20]
 8008ef6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fcc <_vfiprintf_r+0x22c>
 8008efa:	7821      	ldrb	r1, [r4, #0]
 8008efc:	2203      	movs	r2, #3
 8008efe:	4650      	mov	r0, sl
 8008f00:	f7f7 f986 	bl	8000210 <memchr>
 8008f04:	b138      	cbz	r0, 8008f16 <_vfiprintf_r+0x176>
 8008f06:	9b04      	ldr	r3, [sp, #16]
 8008f08:	eba0 000a 	sub.w	r0, r0, sl
 8008f0c:	2240      	movs	r2, #64	@ 0x40
 8008f0e:	4082      	lsls	r2, r0
 8008f10:	4313      	orrs	r3, r2
 8008f12:	3401      	adds	r4, #1
 8008f14:	9304      	str	r3, [sp, #16]
 8008f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1a:	4829      	ldr	r0, [pc, #164]	@ (8008fc0 <_vfiprintf_r+0x220>)
 8008f1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f20:	2206      	movs	r2, #6
 8008f22:	f7f7 f975 	bl	8000210 <memchr>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d03f      	beq.n	8008faa <_vfiprintf_r+0x20a>
 8008f2a:	4b26      	ldr	r3, [pc, #152]	@ (8008fc4 <_vfiprintf_r+0x224>)
 8008f2c:	bb1b      	cbnz	r3, 8008f76 <_vfiprintf_r+0x1d6>
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	3307      	adds	r3, #7
 8008f32:	f023 0307 	bic.w	r3, r3, #7
 8008f36:	3308      	adds	r3, #8
 8008f38:	9303      	str	r3, [sp, #12]
 8008f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f3c:	443b      	add	r3, r7
 8008f3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f40:	e76a      	b.n	8008e18 <_vfiprintf_r+0x78>
 8008f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f46:	460c      	mov	r4, r1
 8008f48:	2001      	movs	r0, #1
 8008f4a:	e7a8      	b.n	8008e9e <_vfiprintf_r+0xfe>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	3401      	adds	r4, #1
 8008f50:	9305      	str	r3, [sp, #20]
 8008f52:	4619      	mov	r1, r3
 8008f54:	f04f 0c0a 	mov.w	ip, #10
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f5e:	3a30      	subs	r2, #48	@ 0x30
 8008f60:	2a09      	cmp	r2, #9
 8008f62:	d903      	bls.n	8008f6c <_vfiprintf_r+0x1cc>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0c6      	beq.n	8008ef6 <_vfiprintf_r+0x156>
 8008f68:	9105      	str	r1, [sp, #20]
 8008f6a:	e7c4      	b.n	8008ef6 <_vfiprintf_r+0x156>
 8008f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f70:	4604      	mov	r4, r0
 8008f72:	2301      	movs	r3, #1
 8008f74:	e7f0      	b.n	8008f58 <_vfiprintf_r+0x1b8>
 8008f76:	ab03      	add	r3, sp, #12
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	4b12      	ldr	r3, [pc, #72]	@ (8008fc8 <_vfiprintf_r+0x228>)
 8008f7e:	a904      	add	r1, sp, #16
 8008f80:	4630      	mov	r0, r6
 8008f82:	f3af 8000 	nop.w
 8008f86:	4607      	mov	r7, r0
 8008f88:	1c78      	adds	r0, r7, #1
 8008f8a:	d1d6      	bne.n	8008f3a <_vfiprintf_r+0x19a>
 8008f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f8e:	07d9      	lsls	r1, r3, #31
 8008f90:	d405      	bmi.n	8008f9e <_vfiprintf_r+0x1fe>
 8008f92:	89ab      	ldrh	r3, [r5, #12]
 8008f94:	059a      	lsls	r2, r3, #22
 8008f96:	d402      	bmi.n	8008f9e <_vfiprintf_r+0x1fe>
 8008f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f9a:	f7ff fddd 	bl	8008b58 <__retarget_lock_release_recursive>
 8008f9e:	89ab      	ldrh	r3, [r5, #12]
 8008fa0:	065b      	lsls	r3, r3, #25
 8008fa2:	f53f af1f 	bmi.w	8008de4 <_vfiprintf_r+0x44>
 8008fa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fa8:	e71e      	b.n	8008de8 <_vfiprintf_r+0x48>
 8008faa:	ab03      	add	r3, sp, #12
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	462a      	mov	r2, r5
 8008fb0:	4b05      	ldr	r3, [pc, #20]	@ (8008fc8 <_vfiprintf_r+0x228>)
 8008fb2:	a904      	add	r1, sp, #16
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f000 f879 	bl	80090ac <_printf_i>
 8008fba:	e7e4      	b.n	8008f86 <_vfiprintf_r+0x1e6>
 8008fbc:	080097a0 	.word	0x080097a0
 8008fc0:	080097aa 	.word	0x080097aa
 8008fc4:	00000000 	.word	0x00000000
 8008fc8:	08008d7b 	.word	0x08008d7b
 8008fcc:	080097a6 	.word	0x080097a6

08008fd0 <_printf_common>:
 8008fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd4:	4616      	mov	r6, r2
 8008fd6:	4698      	mov	r8, r3
 8008fd8:	688a      	ldr	r2, [r1, #8]
 8008fda:	690b      	ldr	r3, [r1, #16]
 8008fdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	bfb8      	it	lt
 8008fe4:	4613      	movlt	r3, r2
 8008fe6:	6033      	str	r3, [r6, #0]
 8008fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008fec:	4607      	mov	r7, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	b10a      	cbz	r2, 8008ff6 <_printf_common+0x26>
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	6033      	str	r3, [r6, #0]
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	0699      	lsls	r1, r3, #26
 8008ffa:	bf42      	ittt	mi
 8008ffc:	6833      	ldrmi	r3, [r6, #0]
 8008ffe:	3302      	addmi	r3, #2
 8009000:	6033      	strmi	r3, [r6, #0]
 8009002:	6825      	ldr	r5, [r4, #0]
 8009004:	f015 0506 	ands.w	r5, r5, #6
 8009008:	d106      	bne.n	8009018 <_printf_common+0x48>
 800900a:	f104 0a19 	add.w	sl, r4, #25
 800900e:	68e3      	ldr	r3, [r4, #12]
 8009010:	6832      	ldr	r2, [r6, #0]
 8009012:	1a9b      	subs	r3, r3, r2
 8009014:	42ab      	cmp	r3, r5
 8009016:	dc26      	bgt.n	8009066 <_printf_common+0x96>
 8009018:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800901c:	6822      	ldr	r2, [r4, #0]
 800901e:	3b00      	subs	r3, #0
 8009020:	bf18      	it	ne
 8009022:	2301      	movne	r3, #1
 8009024:	0692      	lsls	r2, r2, #26
 8009026:	d42b      	bmi.n	8009080 <_printf_common+0xb0>
 8009028:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800902c:	4641      	mov	r1, r8
 800902e:	4638      	mov	r0, r7
 8009030:	47c8      	blx	r9
 8009032:	3001      	adds	r0, #1
 8009034:	d01e      	beq.n	8009074 <_printf_common+0xa4>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	6922      	ldr	r2, [r4, #16]
 800903a:	f003 0306 	and.w	r3, r3, #6
 800903e:	2b04      	cmp	r3, #4
 8009040:	bf02      	ittt	eq
 8009042:	68e5      	ldreq	r5, [r4, #12]
 8009044:	6833      	ldreq	r3, [r6, #0]
 8009046:	1aed      	subeq	r5, r5, r3
 8009048:	68a3      	ldr	r3, [r4, #8]
 800904a:	bf0c      	ite	eq
 800904c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009050:	2500      	movne	r5, #0
 8009052:	4293      	cmp	r3, r2
 8009054:	bfc4      	itt	gt
 8009056:	1a9b      	subgt	r3, r3, r2
 8009058:	18ed      	addgt	r5, r5, r3
 800905a:	2600      	movs	r6, #0
 800905c:	341a      	adds	r4, #26
 800905e:	42b5      	cmp	r5, r6
 8009060:	d11a      	bne.n	8009098 <_printf_common+0xc8>
 8009062:	2000      	movs	r0, #0
 8009064:	e008      	b.n	8009078 <_printf_common+0xa8>
 8009066:	2301      	movs	r3, #1
 8009068:	4652      	mov	r2, sl
 800906a:	4641      	mov	r1, r8
 800906c:	4638      	mov	r0, r7
 800906e:	47c8      	blx	r9
 8009070:	3001      	adds	r0, #1
 8009072:	d103      	bne.n	800907c <_printf_common+0xac>
 8009074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907c:	3501      	adds	r5, #1
 800907e:	e7c6      	b.n	800900e <_printf_common+0x3e>
 8009080:	18e1      	adds	r1, r4, r3
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	2030      	movs	r0, #48	@ 0x30
 8009086:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800908a:	4422      	add	r2, r4
 800908c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009094:	3302      	adds	r3, #2
 8009096:	e7c7      	b.n	8009028 <_printf_common+0x58>
 8009098:	2301      	movs	r3, #1
 800909a:	4622      	mov	r2, r4
 800909c:	4641      	mov	r1, r8
 800909e:	4638      	mov	r0, r7
 80090a0:	47c8      	blx	r9
 80090a2:	3001      	adds	r0, #1
 80090a4:	d0e6      	beq.n	8009074 <_printf_common+0xa4>
 80090a6:	3601      	adds	r6, #1
 80090a8:	e7d9      	b.n	800905e <_printf_common+0x8e>
	...

080090ac <_printf_i>:
 80090ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	7e0f      	ldrb	r7, [r1, #24]
 80090b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090b4:	2f78      	cmp	r7, #120	@ 0x78
 80090b6:	4691      	mov	r9, r2
 80090b8:	4680      	mov	r8, r0
 80090ba:	460c      	mov	r4, r1
 80090bc:	469a      	mov	sl, r3
 80090be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090c2:	d807      	bhi.n	80090d4 <_printf_i+0x28>
 80090c4:	2f62      	cmp	r7, #98	@ 0x62
 80090c6:	d80a      	bhi.n	80090de <_printf_i+0x32>
 80090c8:	2f00      	cmp	r7, #0
 80090ca:	f000 80d2 	beq.w	8009272 <_printf_i+0x1c6>
 80090ce:	2f58      	cmp	r7, #88	@ 0x58
 80090d0:	f000 80b9 	beq.w	8009246 <_printf_i+0x19a>
 80090d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090dc:	e03a      	b.n	8009154 <_printf_i+0xa8>
 80090de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090e2:	2b15      	cmp	r3, #21
 80090e4:	d8f6      	bhi.n	80090d4 <_printf_i+0x28>
 80090e6:	a101      	add	r1, pc, #4	@ (adr r1, 80090ec <_printf_i+0x40>)
 80090e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090ec:	08009145 	.word	0x08009145
 80090f0:	08009159 	.word	0x08009159
 80090f4:	080090d5 	.word	0x080090d5
 80090f8:	080090d5 	.word	0x080090d5
 80090fc:	080090d5 	.word	0x080090d5
 8009100:	080090d5 	.word	0x080090d5
 8009104:	08009159 	.word	0x08009159
 8009108:	080090d5 	.word	0x080090d5
 800910c:	080090d5 	.word	0x080090d5
 8009110:	080090d5 	.word	0x080090d5
 8009114:	080090d5 	.word	0x080090d5
 8009118:	08009259 	.word	0x08009259
 800911c:	08009183 	.word	0x08009183
 8009120:	08009213 	.word	0x08009213
 8009124:	080090d5 	.word	0x080090d5
 8009128:	080090d5 	.word	0x080090d5
 800912c:	0800927b 	.word	0x0800927b
 8009130:	080090d5 	.word	0x080090d5
 8009134:	08009183 	.word	0x08009183
 8009138:	080090d5 	.word	0x080090d5
 800913c:	080090d5 	.word	0x080090d5
 8009140:	0800921b 	.word	0x0800921b
 8009144:	6833      	ldr	r3, [r6, #0]
 8009146:	1d1a      	adds	r2, r3, #4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6032      	str	r2, [r6, #0]
 800914c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009150:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009154:	2301      	movs	r3, #1
 8009156:	e09d      	b.n	8009294 <_printf_i+0x1e8>
 8009158:	6833      	ldr	r3, [r6, #0]
 800915a:	6820      	ldr	r0, [r4, #0]
 800915c:	1d19      	adds	r1, r3, #4
 800915e:	6031      	str	r1, [r6, #0]
 8009160:	0606      	lsls	r6, r0, #24
 8009162:	d501      	bpl.n	8009168 <_printf_i+0xbc>
 8009164:	681d      	ldr	r5, [r3, #0]
 8009166:	e003      	b.n	8009170 <_printf_i+0xc4>
 8009168:	0645      	lsls	r5, r0, #25
 800916a:	d5fb      	bpl.n	8009164 <_printf_i+0xb8>
 800916c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009170:	2d00      	cmp	r5, #0
 8009172:	da03      	bge.n	800917c <_printf_i+0xd0>
 8009174:	232d      	movs	r3, #45	@ 0x2d
 8009176:	426d      	negs	r5, r5
 8009178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800917c:	4859      	ldr	r0, [pc, #356]	@ (80092e4 <_printf_i+0x238>)
 800917e:	230a      	movs	r3, #10
 8009180:	e011      	b.n	80091a6 <_printf_i+0xfa>
 8009182:	6821      	ldr	r1, [r4, #0]
 8009184:	6833      	ldr	r3, [r6, #0]
 8009186:	0608      	lsls	r0, r1, #24
 8009188:	f853 5b04 	ldr.w	r5, [r3], #4
 800918c:	d402      	bmi.n	8009194 <_printf_i+0xe8>
 800918e:	0649      	lsls	r1, r1, #25
 8009190:	bf48      	it	mi
 8009192:	b2ad      	uxthmi	r5, r5
 8009194:	2f6f      	cmp	r7, #111	@ 0x6f
 8009196:	4853      	ldr	r0, [pc, #332]	@ (80092e4 <_printf_i+0x238>)
 8009198:	6033      	str	r3, [r6, #0]
 800919a:	bf14      	ite	ne
 800919c:	230a      	movne	r3, #10
 800919e:	2308      	moveq	r3, #8
 80091a0:	2100      	movs	r1, #0
 80091a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091a6:	6866      	ldr	r6, [r4, #4]
 80091a8:	60a6      	str	r6, [r4, #8]
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	bfa2      	ittt	ge
 80091ae:	6821      	ldrge	r1, [r4, #0]
 80091b0:	f021 0104 	bicge.w	r1, r1, #4
 80091b4:	6021      	strge	r1, [r4, #0]
 80091b6:	b90d      	cbnz	r5, 80091bc <_printf_i+0x110>
 80091b8:	2e00      	cmp	r6, #0
 80091ba:	d04b      	beq.n	8009254 <_printf_i+0x1a8>
 80091bc:	4616      	mov	r6, r2
 80091be:	fbb5 f1f3 	udiv	r1, r5, r3
 80091c2:	fb03 5711 	mls	r7, r3, r1, r5
 80091c6:	5dc7      	ldrb	r7, [r0, r7]
 80091c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091cc:	462f      	mov	r7, r5
 80091ce:	42bb      	cmp	r3, r7
 80091d0:	460d      	mov	r5, r1
 80091d2:	d9f4      	bls.n	80091be <_printf_i+0x112>
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d10b      	bne.n	80091f0 <_printf_i+0x144>
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	07df      	lsls	r7, r3, #31
 80091dc:	d508      	bpl.n	80091f0 <_printf_i+0x144>
 80091de:	6923      	ldr	r3, [r4, #16]
 80091e0:	6861      	ldr	r1, [r4, #4]
 80091e2:	4299      	cmp	r1, r3
 80091e4:	bfde      	ittt	le
 80091e6:	2330      	movle	r3, #48	@ 0x30
 80091e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80091f0:	1b92      	subs	r2, r2, r6
 80091f2:	6122      	str	r2, [r4, #16]
 80091f4:	f8cd a000 	str.w	sl, [sp]
 80091f8:	464b      	mov	r3, r9
 80091fa:	aa03      	add	r2, sp, #12
 80091fc:	4621      	mov	r1, r4
 80091fe:	4640      	mov	r0, r8
 8009200:	f7ff fee6 	bl	8008fd0 <_printf_common>
 8009204:	3001      	adds	r0, #1
 8009206:	d14a      	bne.n	800929e <_printf_i+0x1f2>
 8009208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800920c:	b004      	add	sp, #16
 800920e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	f043 0320 	orr.w	r3, r3, #32
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	4833      	ldr	r0, [pc, #204]	@ (80092e8 <_printf_i+0x23c>)
 800921c:	2778      	movs	r7, #120	@ 0x78
 800921e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	6831      	ldr	r1, [r6, #0]
 8009226:	061f      	lsls	r7, r3, #24
 8009228:	f851 5b04 	ldr.w	r5, [r1], #4
 800922c:	d402      	bmi.n	8009234 <_printf_i+0x188>
 800922e:	065f      	lsls	r7, r3, #25
 8009230:	bf48      	it	mi
 8009232:	b2ad      	uxthmi	r5, r5
 8009234:	6031      	str	r1, [r6, #0]
 8009236:	07d9      	lsls	r1, r3, #31
 8009238:	bf44      	itt	mi
 800923a:	f043 0320 	orrmi.w	r3, r3, #32
 800923e:	6023      	strmi	r3, [r4, #0]
 8009240:	b11d      	cbz	r5, 800924a <_printf_i+0x19e>
 8009242:	2310      	movs	r3, #16
 8009244:	e7ac      	b.n	80091a0 <_printf_i+0xf4>
 8009246:	4827      	ldr	r0, [pc, #156]	@ (80092e4 <_printf_i+0x238>)
 8009248:	e7e9      	b.n	800921e <_printf_i+0x172>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	f023 0320 	bic.w	r3, r3, #32
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	e7f6      	b.n	8009242 <_printf_i+0x196>
 8009254:	4616      	mov	r6, r2
 8009256:	e7bd      	b.n	80091d4 <_printf_i+0x128>
 8009258:	6833      	ldr	r3, [r6, #0]
 800925a:	6825      	ldr	r5, [r4, #0]
 800925c:	6961      	ldr	r1, [r4, #20]
 800925e:	1d18      	adds	r0, r3, #4
 8009260:	6030      	str	r0, [r6, #0]
 8009262:	062e      	lsls	r6, r5, #24
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	d501      	bpl.n	800926c <_printf_i+0x1c0>
 8009268:	6019      	str	r1, [r3, #0]
 800926a:	e002      	b.n	8009272 <_printf_i+0x1c6>
 800926c:	0668      	lsls	r0, r5, #25
 800926e:	d5fb      	bpl.n	8009268 <_printf_i+0x1bc>
 8009270:	8019      	strh	r1, [r3, #0]
 8009272:	2300      	movs	r3, #0
 8009274:	6123      	str	r3, [r4, #16]
 8009276:	4616      	mov	r6, r2
 8009278:	e7bc      	b.n	80091f4 <_printf_i+0x148>
 800927a:	6833      	ldr	r3, [r6, #0]
 800927c:	1d1a      	adds	r2, r3, #4
 800927e:	6032      	str	r2, [r6, #0]
 8009280:	681e      	ldr	r6, [r3, #0]
 8009282:	6862      	ldr	r2, [r4, #4]
 8009284:	2100      	movs	r1, #0
 8009286:	4630      	mov	r0, r6
 8009288:	f7f6 ffc2 	bl	8000210 <memchr>
 800928c:	b108      	cbz	r0, 8009292 <_printf_i+0x1e6>
 800928e:	1b80      	subs	r0, r0, r6
 8009290:	6060      	str	r0, [r4, #4]
 8009292:	6863      	ldr	r3, [r4, #4]
 8009294:	6123      	str	r3, [r4, #16]
 8009296:	2300      	movs	r3, #0
 8009298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800929c:	e7aa      	b.n	80091f4 <_printf_i+0x148>
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	4632      	mov	r2, r6
 80092a2:	4649      	mov	r1, r9
 80092a4:	4640      	mov	r0, r8
 80092a6:	47d0      	blx	sl
 80092a8:	3001      	adds	r0, #1
 80092aa:	d0ad      	beq.n	8009208 <_printf_i+0x15c>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	079b      	lsls	r3, r3, #30
 80092b0:	d413      	bmi.n	80092da <_printf_i+0x22e>
 80092b2:	68e0      	ldr	r0, [r4, #12]
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	4298      	cmp	r0, r3
 80092b8:	bfb8      	it	lt
 80092ba:	4618      	movlt	r0, r3
 80092bc:	e7a6      	b.n	800920c <_printf_i+0x160>
 80092be:	2301      	movs	r3, #1
 80092c0:	4632      	mov	r2, r6
 80092c2:	4649      	mov	r1, r9
 80092c4:	4640      	mov	r0, r8
 80092c6:	47d0      	blx	sl
 80092c8:	3001      	adds	r0, #1
 80092ca:	d09d      	beq.n	8009208 <_printf_i+0x15c>
 80092cc:	3501      	adds	r5, #1
 80092ce:	68e3      	ldr	r3, [r4, #12]
 80092d0:	9903      	ldr	r1, [sp, #12]
 80092d2:	1a5b      	subs	r3, r3, r1
 80092d4:	42ab      	cmp	r3, r5
 80092d6:	dcf2      	bgt.n	80092be <_printf_i+0x212>
 80092d8:	e7eb      	b.n	80092b2 <_printf_i+0x206>
 80092da:	2500      	movs	r5, #0
 80092dc:	f104 0619 	add.w	r6, r4, #25
 80092e0:	e7f5      	b.n	80092ce <_printf_i+0x222>
 80092e2:	bf00      	nop
 80092e4:	080097b1 	.word	0x080097b1
 80092e8:	080097c2 	.word	0x080097c2

080092ec <__sflush_r>:
 80092ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	0716      	lsls	r6, r2, #28
 80092f6:	4605      	mov	r5, r0
 80092f8:	460c      	mov	r4, r1
 80092fa:	d454      	bmi.n	80093a6 <__sflush_r+0xba>
 80092fc:	684b      	ldr	r3, [r1, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dc02      	bgt.n	8009308 <__sflush_r+0x1c>
 8009302:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009304:	2b00      	cmp	r3, #0
 8009306:	dd48      	ble.n	800939a <__sflush_r+0xae>
 8009308:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800930a:	2e00      	cmp	r6, #0
 800930c:	d045      	beq.n	800939a <__sflush_r+0xae>
 800930e:	2300      	movs	r3, #0
 8009310:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009314:	682f      	ldr	r7, [r5, #0]
 8009316:	6a21      	ldr	r1, [r4, #32]
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	d030      	beq.n	800937e <__sflush_r+0x92>
 800931c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	0759      	lsls	r1, r3, #29
 8009322:	d505      	bpl.n	8009330 <__sflush_r+0x44>
 8009324:	6863      	ldr	r3, [r4, #4]
 8009326:	1ad2      	subs	r2, r2, r3
 8009328:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800932a:	b10b      	cbz	r3, 8009330 <__sflush_r+0x44>
 800932c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800932e:	1ad2      	subs	r2, r2, r3
 8009330:	2300      	movs	r3, #0
 8009332:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009334:	6a21      	ldr	r1, [r4, #32]
 8009336:	4628      	mov	r0, r5
 8009338:	47b0      	blx	r6
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	d106      	bne.n	800934e <__sflush_r+0x62>
 8009340:	6829      	ldr	r1, [r5, #0]
 8009342:	291d      	cmp	r1, #29
 8009344:	d82b      	bhi.n	800939e <__sflush_r+0xb2>
 8009346:	4a2a      	ldr	r2, [pc, #168]	@ (80093f0 <__sflush_r+0x104>)
 8009348:	410a      	asrs	r2, r1
 800934a:	07d6      	lsls	r6, r2, #31
 800934c:	d427      	bmi.n	800939e <__sflush_r+0xb2>
 800934e:	2200      	movs	r2, #0
 8009350:	6062      	str	r2, [r4, #4]
 8009352:	04d9      	lsls	r1, r3, #19
 8009354:	6922      	ldr	r2, [r4, #16]
 8009356:	6022      	str	r2, [r4, #0]
 8009358:	d504      	bpl.n	8009364 <__sflush_r+0x78>
 800935a:	1c42      	adds	r2, r0, #1
 800935c:	d101      	bne.n	8009362 <__sflush_r+0x76>
 800935e:	682b      	ldr	r3, [r5, #0]
 8009360:	b903      	cbnz	r3, 8009364 <__sflush_r+0x78>
 8009362:	6560      	str	r0, [r4, #84]	@ 0x54
 8009364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009366:	602f      	str	r7, [r5, #0]
 8009368:	b1b9      	cbz	r1, 800939a <__sflush_r+0xae>
 800936a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800936e:	4299      	cmp	r1, r3
 8009370:	d002      	beq.n	8009378 <__sflush_r+0x8c>
 8009372:	4628      	mov	r0, r5
 8009374:	f7ff fbf2 	bl	8008b5c <_free_r>
 8009378:	2300      	movs	r3, #0
 800937a:	6363      	str	r3, [r4, #52]	@ 0x34
 800937c:	e00d      	b.n	800939a <__sflush_r+0xae>
 800937e:	2301      	movs	r3, #1
 8009380:	4628      	mov	r0, r5
 8009382:	47b0      	blx	r6
 8009384:	4602      	mov	r2, r0
 8009386:	1c50      	adds	r0, r2, #1
 8009388:	d1c9      	bne.n	800931e <__sflush_r+0x32>
 800938a:	682b      	ldr	r3, [r5, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d0c6      	beq.n	800931e <__sflush_r+0x32>
 8009390:	2b1d      	cmp	r3, #29
 8009392:	d001      	beq.n	8009398 <__sflush_r+0xac>
 8009394:	2b16      	cmp	r3, #22
 8009396:	d11e      	bne.n	80093d6 <__sflush_r+0xea>
 8009398:	602f      	str	r7, [r5, #0]
 800939a:	2000      	movs	r0, #0
 800939c:	e022      	b.n	80093e4 <__sflush_r+0xf8>
 800939e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093a2:	b21b      	sxth	r3, r3
 80093a4:	e01b      	b.n	80093de <__sflush_r+0xf2>
 80093a6:	690f      	ldr	r7, [r1, #16]
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	d0f6      	beq.n	800939a <__sflush_r+0xae>
 80093ac:	0793      	lsls	r3, r2, #30
 80093ae:	680e      	ldr	r6, [r1, #0]
 80093b0:	bf08      	it	eq
 80093b2:	694b      	ldreq	r3, [r1, #20]
 80093b4:	600f      	str	r7, [r1, #0]
 80093b6:	bf18      	it	ne
 80093b8:	2300      	movne	r3, #0
 80093ba:	eba6 0807 	sub.w	r8, r6, r7
 80093be:	608b      	str	r3, [r1, #8]
 80093c0:	f1b8 0f00 	cmp.w	r8, #0
 80093c4:	dde9      	ble.n	800939a <__sflush_r+0xae>
 80093c6:	6a21      	ldr	r1, [r4, #32]
 80093c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093ca:	4643      	mov	r3, r8
 80093cc:	463a      	mov	r2, r7
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b0      	blx	r6
 80093d2:	2800      	cmp	r0, #0
 80093d4:	dc08      	bgt.n	80093e8 <__sflush_r+0xfc>
 80093d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093de:	81a3      	strh	r3, [r4, #12]
 80093e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e8:	4407      	add	r7, r0
 80093ea:	eba8 0800 	sub.w	r8, r8, r0
 80093ee:	e7e7      	b.n	80093c0 <__sflush_r+0xd4>
 80093f0:	dfbffffe 	.word	0xdfbffffe

080093f4 <_fflush_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	690b      	ldr	r3, [r1, #16]
 80093f8:	4605      	mov	r5, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	b913      	cbnz	r3, 8009404 <_fflush_r+0x10>
 80093fe:	2500      	movs	r5, #0
 8009400:	4628      	mov	r0, r5
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	b118      	cbz	r0, 800940e <_fflush_r+0x1a>
 8009406:	6a03      	ldr	r3, [r0, #32]
 8009408:	b90b      	cbnz	r3, 800940e <_fflush_r+0x1a>
 800940a:	f7ff f9ad 	bl	8008768 <__sinit>
 800940e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0f3      	beq.n	80093fe <_fflush_r+0xa>
 8009416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009418:	07d0      	lsls	r0, r2, #31
 800941a:	d404      	bmi.n	8009426 <_fflush_r+0x32>
 800941c:	0599      	lsls	r1, r3, #22
 800941e:	d402      	bmi.n	8009426 <_fflush_r+0x32>
 8009420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009422:	f7ff fb98 	bl	8008b56 <__retarget_lock_acquire_recursive>
 8009426:	4628      	mov	r0, r5
 8009428:	4621      	mov	r1, r4
 800942a:	f7ff ff5f 	bl	80092ec <__sflush_r>
 800942e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009430:	07da      	lsls	r2, r3, #31
 8009432:	4605      	mov	r5, r0
 8009434:	d4e4      	bmi.n	8009400 <_fflush_r+0xc>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	059b      	lsls	r3, r3, #22
 800943a:	d4e1      	bmi.n	8009400 <_fflush_r+0xc>
 800943c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800943e:	f7ff fb8b 	bl	8008b58 <__retarget_lock_release_recursive>
 8009442:	e7dd      	b.n	8009400 <_fflush_r+0xc>

08009444 <__swhatbuf_r>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	460c      	mov	r4, r1
 8009448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800944c:	2900      	cmp	r1, #0
 800944e:	b096      	sub	sp, #88	@ 0x58
 8009450:	4615      	mov	r5, r2
 8009452:	461e      	mov	r6, r3
 8009454:	da0d      	bge.n	8009472 <__swhatbuf_r+0x2e>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800945c:	f04f 0100 	mov.w	r1, #0
 8009460:	bf14      	ite	ne
 8009462:	2340      	movne	r3, #64	@ 0x40
 8009464:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009468:	2000      	movs	r0, #0
 800946a:	6031      	str	r1, [r6, #0]
 800946c:	602b      	str	r3, [r5, #0]
 800946e:	b016      	add	sp, #88	@ 0x58
 8009470:	bd70      	pop	{r4, r5, r6, pc}
 8009472:	466a      	mov	r2, sp
 8009474:	f000 f848 	bl	8009508 <_fstat_r>
 8009478:	2800      	cmp	r0, #0
 800947a:	dbec      	blt.n	8009456 <__swhatbuf_r+0x12>
 800947c:	9901      	ldr	r1, [sp, #4]
 800947e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009482:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009486:	4259      	negs	r1, r3
 8009488:	4159      	adcs	r1, r3
 800948a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800948e:	e7eb      	b.n	8009468 <__swhatbuf_r+0x24>

08009490 <__smakebuf_r>:
 8009490:	898b      	ldrh	r3, [r1, #12]
 8009492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009494:	079d      	lsls	r5, r3, #30
 8009496:	4606      	mov	r6, r0
 8009498:	460c      	mov	r4, r1
 800949a:	d507      	bpl.n	80094ac <__smakebuf_r+0x1c>
 800949c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	6123      	str	r3, [r4, #16]
 80094a4:	2301      	movs	r3, #1
 80094a6:	6163      	str	r3, [r4, #20]
 80094a8:	b003      	add	sp, #12
 80094aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ac:	ab01      	add	r3, sp, #4
 80094ae:	466a      	mov	r2, sp
 80094b0:	f7ff ffc8 	bl	8009444 <__swhatbuf_r>
 80094b4:	9f00      	ldr	r7, [sp, #0]
 80094b6:	4605      	mov	r5, r0
 80094b8:	4639      	mov	r1, r7
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff fbba 	bl	8008c34 <_malloc_r>
 80094c0:	b948      	cbnz	r0, 80094d6 <__smakebuf_r+0x46>
 80094c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c6:	059a      	lsls	r2, r3, #22
 80094c8:	d4ee      	bmi.n	80094a8 <__smakebuf_r+0x18>
 80094ca:	f023 0303 	bic.w	r3, r3, #3
 80094ce:	f043 0302 	orr.w	r3, r3, #2
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	e7e2      	b.n	800949c <__smakebuf_r+0xc>
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	6020      	str	r0, [r4, #0]
 80094da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094de:	81a3      	strh	r3, [r4, #12]
 80094e0:	9b01      	ldr	r3, [sp, #4]
 80094e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094e6:	b15b      	cbz	r3, 8009500 <__smakebuf_r+0x70>
 80094e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094ec:	4630      	mov	r0, r6
 80094ee:	f000 f81d 	bl	800952c <_isatty_r>
 80094f2:	b128      	cbz	r0, 8009500 <__smakebuf_r+0x70>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f023 0303 	bic.w	r3, r3, #3
 80094fa:	f043 0301 	orr.w	r3, r3, #1
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	431d      	orrs	r5, r3
 8009504:	81a5      	strh	r5, [r4, #12]
 8009506:	e7cf      	b.n	80094a8 <__smakebuf_r+0x18>

08009508 <_fstat_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4d07      	ldr	r5, [pc, #28]	@ (8009528 <_fstat_r+0x20>)
 800950c:	2300      	movs	r3, #0
 800950e:	4604      	mov	r4, r0
 8009510:	4608      	mov	r0, r1
 8009512:	4611      	mov	r1, r2
 8009514:	602b      	str	r3, [r5, #0]
 8009516:	f7f7 fe00 	bl	800111a <_fstat>
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	d102      	bne.n	8009524 <_fstat_r+0x1c>
 800951e:	682b      	ldr	r3, [r5, #0]
 8009520:	b103      	cbz	r3, 8009524 <_fstat_r+0x1c>
 8009522:	6023      	str	r3, [r4, #0]
 8009524:	bd38      	pop	{r3, r4, r5, pc}
 8009526:	bf00      	nop
 8009528:	200015ac 	.word	0x200015ac

0800952c <_isatty_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d06      	ldr	r5, [pc, #24]	@ (8009548 <_isatty_r+0x1c>)
 8009530:	2300      	movs	r3, #0
 8009532:	4604      	mov	r4, r0
 8009534:	4608      	mov	r0, r1
 8009536:	602b      	str	r3, [r5, #0]
 8009538:	f7f7 fdff 	bl	800113a <_isatty>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_isatty_r+0x1a>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	b103      	cbz	r3, 8009546 <_isatty_r+0x1a>
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	200015ac 	.word	0x200015ac

0800954c <_sbrk_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d06      	ldr	r5, [pc, #24]	@ (8009568 <_sbrk_r+0x1c>)
 8009550:	2300      	movs	r3, #0
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	602b      	str	r3, [r5, #0]
 8009558:	f7f7 fe08 	bl	800116c <_sbrk>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_sbrk_r+0x1a>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_sbrk_r+0x1a>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	200015ac 	.word	0x200015ac

0800956c <_init>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr

08009578 <_fini>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	bf00      	nop
 800957c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957e:	bc08      	pop	{r3}
 8009580:	469e      	mov	lr, r3
 8009582:	4770      	bx	lr
